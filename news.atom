<?xml version="1.0" encoding="utf-8" ?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
  <id>/</id>
  <title>Immutant</title>
  <updated>2018-01-22T11:53:22-05:00</updated>
  <link href="/news.atom" rel="self" type="application/atom+xml" />
  <link href="/" rel="alternate" type="text/html" />
  <entry>
    <id>/news/2018/01/22/announcing-2-1-10/</id>
    <title>Immutant 2.1.10 Release</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2018-01-22T00:00:00+00:00</published>
    <link href="/news/2018/01/22/announcing-2-1-10/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="releases"></category>
    <summary>
      We just released Immutant 2.1.10. This will prevent the TLS error you
      get when fetching dependencies using recent versions of Leiningen.
      
      What is Immutant?
      
      Immutant is an integrated suite of Clojure
      libraries backed by Undertow for web, HornetQ for messaging,
      Infinispan for caching, Quartz for scheduling, and Narayana for
      transactions. Applications built with Immutant can optionally be
      deployed to a WildFly or JBoss EAP cluster for enhanced features. Its
      fundamental goal is to reduce the inherent
      incidental complexity
      in real world applications.
      
      Get In Touch
      
      As always, if you have any questions, issues, or other feedback about
      Immutant, you can always find us on
      #immutant on freenode or
      our mailing lists.
      
      Issues resolved in 2.1.9
      
      
      [IMMUTANT-637] -...
    </summary>
    <content type="html">
      &lt;p&gt;We just released Immutant 2.1.10. This will prevent the TLS error you
      get when fetching dependencies using recent versions of &lt;code&gt;Leiningen&lt;/code&gt;.&lt;/p&gt;
      
      &lt;h2&gt;What is Immutant?&lt;/h2&gt;
      
      &lt;p&gt;Immutant is an integrated suite of &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;
      libraries backed by &lt;a href=&quot;http://undertow.io&quot;&gt;Undertow&lt;/a&gt; for web, &lt;a href=&quot;http://jboss.org/hornetq/&quot;&gt;HornetQ&lt;/a&gt; for messaging,
      &lt;a href=&quot;http://infinispan.org&quot;&gt;Infinispan&lt;/a&gt; for caching, &lt;a href=&quot;http://quartz-scheduler.org/&quot;&gt;Quartz&lt;/a&gt; for scheduling, and &lt;a href=&quot;http://www.jboss.org/narayana&quot;&gt;Narayana&lt;/a&gt; for
      transactions. Applications built with Immutant can optionally be
      deployed to a &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; or &lt;a href=&quot;http://www.jboss.org/products/eap/overview/&quot;&gt;JBoss EAP&lt;/a&gt; cluster for enhanced features. Its
      fundamental goal is to reduce the inherent
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Accidental_complexity&quot;&gt;incidental complexity&lt;/a&gt;
      in real world applications.&lt;/p&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;As always, if you have any questions, issues, or other feedback about
      Immutant, you can always find us on
      &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/mailing_lists&quot;&gt;our mailing lists&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Issues resolved in 2.1.9&lt;/h2&gt;
      
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-637&quot;&gt;IMMUTANT-637&lt;/a&gt;] -         TLS error when fetching deps with lein 2.8.1
      &lt;/li&gt;
      &lt;/ul&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2017/06/23/announcing-2-1-9/</id>
    <title>Immutant 2.1.9 Release</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2017-06-23T00:00:00+00:00</published>
    <link href="/news/2017/06/23/announcing-2-1-9/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="releases"></category>
    <summary>
      We just released Immutant 2.1.9. This release includes one fix:
      
      
      If you tried to call .hashCode on the Ring request, you would get
      a NullPointerException. This was caused by a bug in Potemkin,
      which we ported to our internal copy of Potemkin to resolve the
      issue.
      
      
      What is Immutant?
      
      Immutant is an integrated suite of Clojure
      libraries backed by Undertow for web, HornetQ for messaging,
      Infinispan for caching, Quartz for scheduling, and Narayana for
      transactions. Applications built with Immutant can optionally be
      deployed to a WildFly or JBoss EAP cluster for enhanced features. Its
      fundamental goal is to reduce the inherent
      incidental complexity
      in real world applications.
      
      Get In Touch
      
      As always, if you have...
    </summary>
    <content type="html">
      &lt;p&gt;We just released Immutant 2.1.9. This release includes one fix:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;If you tried to call &lt;code&gt;.hashCode&lt;/code&gt; on the Ring request, you would get
      a &lt;code&gt;NullPointerException&lt;/code&gt;. This was caused by a &lt;a href=&quot;https://github.com/ztellman/potemkin/issues/52&quot;&gt;bug in Potemkin&lt;/a&gt;,
      which we ported to our internal copy of Potemkin to resolve the
      issue.&lt;/li&gt;
      &lt;/ul&gt;&lt;h2&gt;What is Immutant?&lt;/h2&gt;
      
      &lt;p&gt;Immutant is an integrated suite of &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;
      libraries backed by &lt;a href=&quot;http://undertow.io&quot;&gt;Undertow&lt;/a&gt; for web, &lt;a href=&quot;http://jboss.org/hornetq/&quot;&gt;HornetQ&lt;/a&gt; for messaging,
      &lt;a href=&quot;http://infinispan.org&quot;&gt;Infinispan&lt;/a&gt; for caching, &lt;a href=&quot;http://quartz-scheduler.org/&quot;&gt;Quartz&lt;/a&gt; for scheduling, and &lt;a href=&quot;http://www.jboss.org/narayana&quot;&gt;Narayana&lt;/a&gt; for
      transactions. Applications built with Immutant can optionally be
      deployed to a &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; or &lt;a href=&quot;http://www.jboss.org/products/eap/overview/&quot;&gt;JBoss EAP&lt;/a&gt; cluster for enhanced features. Its
      fundamental goal is to reduce the inherent
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Accidental_complexity&quot;&gt;incidental complexity&lt;/a&gt;
      in real world applications.&lt;/p&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;As always, if you have any questions, issues, or other feedback about
      Immutant, you can always find us on
      &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/mailing_lists&quot;&gt;our mailing lists&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Issues resolved in 2.1.9&lt;/h2&gt;
      
      &lt;ul&gt;&lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-633&quot;&gt;IMMUTANT-633&lt;/a&gt;] -         Ring request map's .hashCode throws NPE if any key is nil
      &lt;/li&gt;&lt;/ul&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2017/05/30/announcing-2-1-8/</id>
    <title>Immutant 2.1.8 Release</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2017-05-30T00:00:00+00:00</published>
    <link href="/news/2017/05/30/announcing-2-1-8/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="releases"></category>
    <summary>
      We just released Immutant 2.1.8. This release includes one fix:
      
      
      If you abort a WebSocket connection attempt by returning a regular
      Ring response map, the body and status of that response are now
      properly returned to the client.
      
      
      What is Immutant?
      
      Immutant is an integrated suite of Clojure
      libraries backed by Undertow for web, HornetQ for messaging,
      Infinispan for caching, Quartz for scheduling, and Narayana for
      transactions. Applications built with Immutant can optionally be
      deployed to a WildFly or JBoss EAP cluster for enhanced features. Its
      fundamental goal is to reduce the inherent
      incidental complexity
      in real world applications.
      
      Get In Touch
      
      As always, if you have any questions, issues, or other feedback about
      Immutant,...
    </summary>
    <content type="html">
      &lt;p&gt;We just released Immutant 2.1.8. This release includes one fix:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;If you abort a WebSocket connection attempt by returning a regular
      Ring response map, the body and status of that response are now
      properly returned to the client.&lt;/li&gt;
      &lt;/ul&gt;&lt;h2&gt;What is Immutant?&lt;/h2&gt;
      
      &lt;p&gt;Immutant is an integrated suite of &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;
      libraries backed by &lt;a href=&quot;http://undertow.io&quot;&gt;Undertow&lt;/a&gt; for web, &lt;a href=&quot;http://jboss.org/hornetq/&quot;&gt;HornetQ&lt;/a&gt; for messaging,
      &lt;a href=&quot;http://infinispan.org&quot;&gt;Infinispan&lt;/a&gt; for caching, &lt;a href=&quot;http://quartz-scheduler.org/&quot;&gt;Quartz&lt;/a&gt; for scheduling, and &lt;a href=&quot;http://www.jboss.org/narayana&quot;&gt;Narayana&lt;/a&gt; for
      transactions. Applications built with Immutant can optionally be
      deployed to a &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; or &lt;a href=&quot;http://www.jboss.org/products/eap/overview/&quot;&gt;JBoss EAP&lt;/a&gt; cluster for enhanced features. Its
      fundamental goal is to reduce the inherent
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Accidental_complexity&quot;&gt;incidental complexity&lt;/a&gt;
      in real world applications.&lt;/p&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;As always, if you have any questions, issues, or other feedback about
      Immutant, you can always find us on
      &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/mailing_lists&quot;&gt;our mailing lists&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Issues resolved in 2.1.8&lt;/h2&gt;
      
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-632&quot;&gt;IMMUTANT-632&lt;/a&gt;] -     Can’t send 4xx/5xx to websocket requests&lt;/li&gt; 
      &lt;/ul&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2017/05/18/announcing-2-1-7/</id>
    <title>Immutant 2.1.7 Release</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2017-05-18T00:00:00+00:00</published>
    <link href="/news/2017/05/18/announcing-2-1-7/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="releases"></category>
    <summary>
      We just released Immutant 2.1.7. This release includes the following changes:
      
      
      We&#39;ve upgraded our Undertow dependency to the latest stable
      version (1.4.14.Final) to resolve an issue with socket leaks when
      using async http responses/SSE.
      We&#39;ve also upgraded our Ring dependency to 1.6.0.
      For HEAD requests, async channels now automatically close after the
      first send! call.
      
      
      What is Immutant?
      
      Immutant is an integrated suite of Clojure
      libraries backed by Undertow for web, HornetQ for messaging,
      Infinispan for caching, Quartz for scheduling, and Narayana for
      transactions. Applications built with Immutant can optionally be
      deployed to a WildFly or JBoss EAP cluster for enhanced features. Its
      fundamental goal is to reduce the inherent
      incidental complexity
      in real world...
    </summary>
    <content type="html">
      &lt;p&gt;We just released Immutant 2.1.7. This release includes the following changes:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;We've upgraded our &lt;a href=&quot;http://undertow.io&quot;&gt;Undertow&lt;/a&gt; dependency to the latest stable
      version (1.4.14.Final) to resolve an issue with socket leaks when
      using async http responses/SSE.&lt;/li&gt;
      &lt;li&gt;We've also upgraded our Ring dependency to 1.6.0.&lt;/li&gt;
      &lt;li&gt;For HEAD requests, async channels now automatically close after the
      first &lt;code&gt;send!&lt;/code&gt; call.&lt;/li&gt;
      &lt;/ul&gt;&lt;h2&gt;What is Immutant?&lt;/h2&gt;
      
      &lt;p&gt;Immutant is an integrated suite of &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;
      libraries backed by &lt;a href=&quot;http://undertow.io&quot;&gt;Undertow&lt;/a&gt; for web, &lt;a href=&quot;http://jboss.org/hornetq/&quot;&gt;HornetQ&lt;/a&gt; for messaging,
      &lt;a href=&quot;http://infinispan.org&quot;&gt;Infinispan&lt;/a&gt; for caching, &lt;a href=&quot;http://quartz-scheduler.org/&quot;&gt;Quartz&lt;/a&gt; for scheduling, and &lt;a href=&quot;http://www.jboss.org/narayana&quot;&gt;Narayana&lt;/a&gt; for
      transactions. Applications built with Immutant can optionally be
      deployed to a &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; or &lt;a href=&quot;http://www.jboss.org/products/eap/overview/&quot;&gt;JBoss EAP&lt;/a&gt; cluster for enhanced features. Its
      fundamental goal is to reduce the inherent
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Accidental_complexity&quot;&gt;incidental complexity&lt;/a&gt;
      in real world applications.&lt;/p&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;As always, if you have any questions, issues, or other feedback about
      Immutant, you can always find us on
      &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/mailing_lists&quot;&gt;our mailing lists&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Issues resolved in 2.1.7&lt;/h2&gt;
      
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-627&quot;&gt;IMMUTANT-627&lt;/a&gt;] -         Upgrade to Undertow &amp;gt;= 1.3.27.Final&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-629&quot;&gt;IMMUTANT-629&lt;/a&gt;] -         Update to Ring 1.6&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-630&quot;&gt;IMMUTANT-630&lt;/a&gt;] -         Web applications can't adequately respond to HEAD requests in certain cases&lt;/li&gt;
      &lt;/ul&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2017/01/12/announcing-2-1-6/</id>
    <title>Immutant 2.1.6 Release</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2017-01-12T00:00:00+00:00</published>
    <link href="/news/2017/01/12/announcing-2-1-6/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="releases"></category>
    <summary>
      We just released Immutant 2.1.6. This release includes the following changes:
      
      
      Update to Ring 1.5.1 to address a security vulnerability. This
      vulnerability only affects applications that are running from the
      filesytem, not from an uberjar or war, so most users aren&#39;t affected.
      Remove our dependency on Potemkin. This was a common source of
      collision with other application dependencies, so we now use an
      internal copy of Potemkin under different namespaces so it doesn&#39;t
      conflict.
      A minor update of the version of tools.nrepl on which we depend
      (0.2.11 -&gt; 0.2.12)
      
      
      What is Immutant?
      
      Immutant is an integrated suite of Clojure
      libraries backed by Undertow for web, HornetQ for messaging,
      Infinispan for caching, Quartz for...
    </summary>
    <content type="html">
      &lt;p&gt;We just released Immutant 2.1.6. This release includes the following changes:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;Update to Ring 1.5.1 to address a &lt;a href=&quot;https://groups.google.com/d/msg/clojure-sec/WOMCpKAFkDE/ObzkAYhnBgAJ&quot;&gt;security vulnerability&lt;/a&gt;. This
      vulnerability only affects applications that are running from the
      filesytem, not from an uberjar or war, so most users aren't affected.&lt;/li&gt;
      &lt;li&gt;Remove our dependency on Potemkin. This was a common source of
      collision with other application dependencies, so we now use an
      internal copy of Potemkin under different namespaces so it doesn't
      conflict.&lt;/li&gt;
      &lt;li&gt;A minor update of the version of tools.nrepl on which we depend
      (0.2.11 -&amp;gt; 0.2.12)&lt;/li&gt;
      &lt;/ul&gt;&lt;h2&gt;What is Immutant?&lt;/h2&gt;
      
      &lt;p&gt;Immutant is an integrated suite of &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;
      libraries backed by &lt;a href=&quot;http://undertow.io&quot;&gt;Undertow&lt;/a&gt; for web, &lt;a href=&quot;http://jboss.org/hornetq/&quot;&gt;HornetQ&lt;/a&gt; for messaging,
      &lt;a href=&quot;http://infinispan.org&quot;&gt;Infinispan&lt;/a&gt; for caching, &lt;a href=&quot;http://quartz-scheduler.org/&quot;&gt;Quartz&lt;/a&gt; for scheduling, and &lt;a href=&quot;http://www.jboss.org/narayana&quot;&gt;Narayana&lt;/a&gt; for
      transactions. Applications built with Immutant can optionally be
      deployed to a &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; or &lt;a href=&quot;http://www.jboss.org/products/eap/overview/&quot;&gt;JBoss EAP&lt;/a&gt; cluster for enhanced features. Its
      fundamental goal is to reduce the inherent
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Accidental_complexity&quot;&gt;incidental complexity&lt;/a&gt;
      in real world applications.&lt;/p&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;As always, if you have any questions, issues, or other feedback about
      Immutant, you can always find us on
      &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/mailing_lists&quot;&gt;our mailing lists&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Issues resolved in 2.1.6&lt;/h2&gt;
      
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-622&quot;&gt;IMMUTANT-622&lt;/a&gt;] -         immutant/web won't build with Clojure 1.9.0-alpha11&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-624&quot;&gt;IMMUTANT-624&lt;/a&gt;] -         Update to Ring 1.5.1&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-625&quot;&gt;IMMUTANT-625&lt;/a&gt;] -         Internalize Potemkin dependency&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-626&quot;&gt;IMMUTANT-626&lt;/a&gt;] -         Update to latest tools.nrepl&lt;/li&gt;
      &lt;/ul&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2016/06/27/announcing-2-1-5/</id>
    <title>Immutant 2.1.5 Release</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2016-06-27T00:00:00+00:00</published>
    <link href="/news/2016/06/27/announcing-2-1-5/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="releases"></category>
    <summary>
      We just released Immutant 2.1.5. This release includes the following changes:
      
      
      Support for deployment to the newly-released JBoss EAP 7
      A fix to allow you to use XA, immutant.messaging/listen, and a remote context together
      We no longer transitively depend on two different versions of jboss-logging
      Our Undertow dependency has been updated to 1.3.23.Final (from 1.3.0.Beta9) to fix issues with HTTP/2 in Chrome (IMMUTANT-621)
      Other updates to our transitive depenencies, including:
      
      
      java.classpath 0.2.2 -&gt; 0.2.3
      potemkin 0.4.1 -&gt; 0.4.3
      tools.nrepl 0.2.7 -&gt; 0.2.11
      
      
      
      We&#39;re especially proud to announce full support for EAP7 on the day
      of its official release, expanding our supported deployment options to
      the following:
      
      
      Standalone
      JBoss EAP 6.4 and 7.0
      WildFly 8,...
    </summary>
    <content type="html">
      &lt;p&gt;We just released Immutant 2.1.5. This release includes the following changes:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;Support for deployment to the newly-released &lt;a href=&quot;https://www.redhat.com/en/about/press-releases/red-hat-delivers-jboss-eap-7-foundation-hybrid-cloud-applications&quot;&gt;JBoss EAP 7&lt;/a&gt;
      &lt;/li&gt;
      &lt;li&gt;A fix to allow you to use XA, &lt;code&gt;immutant.messaging/listen&lt;/code&gt;, and a remote context together&lt;/li&gt;
      &lt;li&gt;We no longer transitively depend on two different versions of jboss-logging&lt;/li&gt;
      &lt;li&gt;Our Undertow dependency has been updated to 1.3.23.Final (from 1.3.0.Beta9) to fix issues with HTTP/2 in Chrome (&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-621&quot;&gt;IMMUTANT-621&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Other updates to our transitive depenencies, including:
      
      &lt;ul&gt;
      &lt;li&gt;java.classpath 0.2.2 -&amp;gt; 0.2.3&lt;/li&gt;
      &lt;li&gt;potemkin 0.4.1 -&amp;gt; 0.4.3&lt;/li&gt;
      &lt;li&gt;tools.nrepl 0.2.7 -&amp;gt; 0.2.11&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;We're especially proud to announce full support for &lt;a href=&quot;https://www.redhat.com/en/about/press-releases/red-hat-delivers-jboss-eap-7-foundation-hybrid-cloud-applications&quot;&gt;EAP7&lt;/a&gt; on the day
      of its official release, expanding our supported deployment options to
      the following:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;Standalone&lt;/li&gt;
      &lt;li&gt;
      &lt;a href=&quot;http://www.jboss.org/products/eap/overview/&quot;&gt;JBoss EAP&lt;/a&gt; 6.4 and 7.0&lt;/li&gt;
      &lt;li&gt;
      &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; 8, 9, and 10&lt;/li&gt;
      &lt;li&gt;Clojure 1.7, 1.8, and 1.9&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;Our comprehensive, automated integration test suite verifies all of
      these whenever a change to Immutant is committed.&lt;/p&gt;
      
      &lt;h2&gt;What is Immutant?&lt;/h2&gt;
      
      &lt;p&gt;Immutant is an integrated suite of &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;
      libraries backed by &lt;a href=&quot;http://undertow.io&quot;&gt;Undertow&lt;/a&gt; for web, &lt;a href=&quot;http://jboss.org/hornetq/&quot;&gt;HornetQ&lt;/a&gt; for messaging,
      &lt;a href=&quot;http://infinispan.org&quot;&gt;Infinispan&lt;/a&gt; for caching, &lt;a href=&quot;http://quartz-scheduler.org/&quot;&gt;Quartz&lt;/a&gt; for scheduling, and &lt;a href=&quot;http://www.jboss.org/narayana&quot;&gt;Narayana&lt;/a&gt; for
      transactions. Applications built with Immutant can optionally be
      deployed to a &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; or &lt;a href=&quot;http://www.jboss.org/products/eap/overview/&quot;&gt;JBoss EAP&lt;/a&gt; cluster for enhanced features. Its
      fundamental goal is to reduce the inherent
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Accidental_complexity&quot;&gt;incidental complexity&lt;/a&gt;
      in real world applications.&lt;/p&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;As always, if you have any questions, issues, or other feedback about
      Immutant, you can always find us on
      &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/mailing_lists&quot;&gt;our mailing lists&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Issues resolved in 2.1.5&lt;/h2&gt;
      
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-617&quot;&gt;IMMUTANT-617&lt;/a&gt;] -         immutant/web brings in two versions of jboss-logging&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-618&quot;&gt;IMMUTANT-618&lt;/a&gt;] -         Support deployment to EAP 7&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-619&quot;&gt;IMMUTANT-619&lt;/a&gt;] -         IllegalStateException when passing remote xa context to msg/listen&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-620&quot;&gt;IMMUTANT-620&lt;/a&gt;] -         Update Undertow version&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-621&quot;&gt;IMMUTANT-621&lt;/a&gt;] -         Crash in Chrome with  HTTP/2&lt;/li&gt;
      &lt;/ul&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2016/04/20/announcing-2-1-4/</id>
    <title>Immutant 2.1.4 Release</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2016-04-20T00:00:00+00:00</published>
    <link href="/news/2016/04/20/announcing-2-1-4/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="releases"></category>
    <summary>
      We just released Immutant 2.1.4. There are just a couple of small
      changes in this release, only one of which is notable: you can now
      provide a handler deal with any errors that occur when writing the
      ring response. For details, see the immutant.web/run docstring and
      the example in IMMUTANT-615.
      
      What is Immutant?
      
      Immutant is an integrated suite of Clojure
      libraries backed by Undertow for web, HornetQ for messaging,
      Infinispan for caching, Quartz for scheduling, and Narayana for
      transactions. Applications built with Immutant can optionally be
      deployed to a WildFly cluster for enhanced features. Its fundamental
      goal is to reduce the inherent
      incidental complexity
      in real world applications.
      
      Get In Touch
      
      As always, if you...
    </summary>
    <content type="html">
      &lt;p&gt;We just released Immutant 2.1.4. There are just a couple of small
      changes in this release, only one of which is notable: you can now
      provide a handler deal with any errors that occur when writing the
      ring response. For details, see the &lt;a href=&quot;/documentation/2.1.4/apidoc/immutant.web.html#var-run&quot;&gt;immutant.web/run docstring&lt;/a&gt; and
      the example in &lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-615?focusedCommentId=13194024&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13194024&quot;&gt;IMMUTANT-615&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;What is Immutant?&lt;/h2&gt;
      
      &lt;p&gt;Immutant is an integrated suite of &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;
      libraries backed by &lt;a href=&quot;http://undertow.io&quot;&gt;Undertow&lt;/a&gt; for web, &lt;a href=&quot;http://jboss.org/hornetq/&quot;&gt;HornetQ&lt;/a&gt; for messaging,
      &lt;a href=&quot;http://infinispan.org&quot;&gt;Infinispan&lt;/a&gt; for caching, &lt;a href=&quot;http://quartz-scheduler.org/&quot;&gt;Quartz&lt;/a&gt; for scheduling, and &lt;a href=&quot;http://www.jboss.org/narayana&quot;&gt;Narayana&lt;/a&gt; for
      transactions. Applications built with Immutant can optionally be
      deployed to a &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; cluster for enhanced features. Its fundamental
      goal is to reduce the inherent
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Accidental_complexity&quot;&gt;incidental complexity&lt;/a&gt;
      in real world applications.&lt;/p&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;As always, if you have any questions, issues, or other feedback about
      Immutant, you can always find us on
      &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/mailing_lists&quot;&gt;our mailing lists&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Issues resolved in 2.1.4&lt;/h2&gt;
      
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-613&quot;&gt;IMMUTANT-613&lt;/a&gt;] -         Add boot-immutant to WildFly guide
      &lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-614&quot;&gt;IMMUTANT-614&lt;/a&gt;] -         Using a dev war prints out a deprecation warning for app-relative
      &lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-615&quot;&gt;IMMUTANT-615&lt;/a&gt;] -         User can't catch errors that occur when writing the ring response
      &lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-616&quot;&gt;IMMUTANT-616&lt;/a&gt;] -         Allow adding extensions to undertow's WebSocket handshake handler
      &lt;/li&gt;
      &lt;/ul&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2016/03/23/boot-immutant/</id>
    <title>An Immutant Plugin For Boot Redux</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2016-03-23T00:00:00+00:00</published>
    <link href="/news/2016/03/23/boot-immutant/" rel="alternate" type="text/html" />
    <author>
      <name>Toby Crawley</name>
    </author>
    <category term="boot"></category>
    <category term="wildfly"></category>
    <summary>
      Last year, we released a Boot plugin for building Immutant WAR
      archives for deploying to the WildFly application server. This
      initial version was basically a port of the lein-immutant plugin
      and didn&#39;t really behave as a proper Boot plugin should (mainly by
      writing outside of and ignoring files in the fileset).
      
      This made it difficult to use the plugin for anything other than a
      vanilla project, so we rewrote the plugin to be a better Boot citizen.
      
      The new plugin provides two tasks: boot.immutant/gird and
      boot.immutant/test-in-container. The gird task adds the files
      needed to activate an Immutant application in WildFly to the fileset,
      allowing you to use standard Boot tasks...
    </summary>
    <content type="html">
      &lt;p&gt;Last year, we &lt;a href=&quot;/news/2015/05/20/boot-immutant/&quot;&gt;released&lt;/a&gt; a &lt;a href=&quot;http://boot-clj.com/&quot;&gt;Boot&lt;/a&gt; plugin for building Immutant WAR
      archives for deploying to the &lt;a href=&quot;/documentation/current/apidoc/guide-wildfly.html&quot;&gt;WildFly&lt;/a&gt; application server. This
      initial version was basically a port of the &lt;a href=&quot;https://github.com/immutant/lein-immutant/&quot;&gt;lein-immutant&lt;/a&gt; plugin
      and didn't really behave as a proper Boot plugin should (mainly by
      writing outside of and ignoring files in the fileset).&lt;/p&gt;
      
      &lt;p&gt;This made it difficult to use the plugin for anything other than a
      vanilla project, so we rewrote the plugin to be a better Boot citizen.&lt;/p&gt;
      
      &lt;p&gt;The new plugin provides two tasks: &lt;code&gt;boot.immutant/gird&lt;/code&gt; and
      &lt;code&gt;boot.immutant/test-in-container&lt;/code&gt;. The &lt;code&gt;gird&lt;/code&gt; task adds the files
      needed to activate an Immutant application in WildFly to the fileset,
      allowing you to use standard Boot tasks to assemble the other contents
      and actually create the war:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(require '[boot.immutant :refer :all])
      
      (deftask build-war []
        (comp
          (uber :as-jars true)
          (aot :all true)
          (gird :init-fn 'my-app.core/init)
          (war)
          (target)))&lt;/pre&gt;
      
      &lt;p&gt;For more details on the &lt;code&gt;gird&lt;/code&gt; task, see the &lt;a href=&quot;https://github.com/immutant/boot-immutant/blob/master/resources/deployment-guide.md&quot;&gt;deployment guide&lt;/a&gt;.&lt;/p&gt;
      
      &lt;p&gt;The &lt;code&gt;test-in-container&lt;/code&gt; task will take an Immutant WAR, spin up a
      WildFly container, deploy the WAR, run your tests, and shut it
      down. To build on the above example:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(deftask run-tests []
        (comp
          (build-dev-war)
          (test-in-container)))&lt;/pre&gt;
      
      &lt;p&gt;For more details on the &lt;code&gt;test-in-container&lt;/code&gt; task, see the
      &lt;a href=&quot;https://github.com/immutant/boot-immutant/blob/master/resources/testing-guide.md&quot;&gt;testing guide&lt;/a&gt;.&lt;/p&gt;
      
      &lt;p&gt;If you're a Boot + Immutant + WildFly user, please see the &lt;a href=&quot;https://github.com/immutant/boot-immutant#installation&quot;&gt;README&lt;/a&gt;
      for installation instructions, give it a try and let us know if you
      run in to any issues, either through the &lt;a href=&quot;/community/&quot;&gt;usual channels&lt;/a&gt; or by filing
      an &lt;a href=&quot;https://github.com/immutant/boot-immutant/&quot;&gt;issue&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2016/03/08/announcing-2-1-3/</id>
    <title>Immutant 2.1.3 Release</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2016-03-08T00:00:00+00:00</published>
    <link href="/news/2016/03/08/announcing-2-1-3/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="releases"></category>
    <summary>
      We just released Immutant 2.1.3. Most issues addressed in this release
      are minor bug fixes and documentation enhancements. 
      
      One not-so-minor bug was discovering that our :dispatch? false
      option has been broken since 2.1.0. That&#39;s fixed now, and should help
      to improve compute-bound benchmark results.
      
      One other minor change worth noting is the addition of two functions
      to the immutant.web.undertow namespace: http-handler, which turns
      a Ring handler into an Undertow HttpHandler, and
      graceful-shutdown, which invokes Undertow&#39;s ability to gracefully
      shutdown a web server by prohibiting new requests while pending ones
      complete. See IMMUTANT-605
      for a simple example.
      
      We also had a couple of community contributions in this release: Dave
      Della Costa fixed our...
    </summary>
    <content type="html">
      &lt;p&gt;We just released Immutant 2.1.3. Most issues addressed in this release
      are minor bug fixes and documentation enhancements. &lt;/p&gt;
      
      &lt;p&gt;One not-so-minor bug was discovering that our &lt;code&gt;:dispatch? false&lt;/code&gt;
      option has been broken since 2.1.0. That's fixed now, and should help
      to improve compute-bound benchmark results.&lt;/p&gt;
      
      &lt;p&gt;One other minor change worth noting is the addition of two functions
      to the &lt;a href=&quot;/documentation/2.1.3/apidoc/immutant.web.undertow.html&quot;&gt;immutant.web.undertow&lt;/a&gt; namespace: &lt;code&gt;http-handler&lt;/code&gt;, which turns
      a Ring handler into an &lt;a href=&quot;http://undertow.io&quot;&gt;Undertow&lt;/a&gt; &lt;code&gt;HttpHandler&lt;/code&gt;, and
      &lt;code&gt;graceful-shutdown&lt;/code&gt;, which invokes Undertow's ability to gracefully
      shutdown a web server by prohibiting new requests while pending ones
      complete. See &lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-605&quot;&gt;IMMUTANT-605&lt;/a&gt;
      for a simple example.&lt;/p&gt;
      
      &lt;p&gt;We also had a couple of community contributions in this release: Dave
      Della Costa fixed our issue with decoded &lt;code&gt;:path-info&lt;/code&gt;, and Matthias
      Nehlsen fixed some documentation issues with our web namespace. Thanks
      guys!&lt;/p&gt;
      
      &lt;h2&gt;What is Immutant?&lt;/h2&gt;
      
      &lt;p&gt;Immutant is an integrated suite of &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;
      libraries backed by &lt;a href=&quot;http://undertow.io&quot;&gt;Undertow&lt;/a&gt; for web, &lt;a href=&quot;http://hornetq.org&quot;&gt;HornetQ&lt;/a&gt; for messaging,
      &lt;a href=&quot;http://infinispan.org&quot;&gt;Infinispan&lt;/a&gt; for caching, &lt;a href=&quot;http://quartz-scheduler.org/&quot;&gt;Quartz&lt;/a&gt; for scheduling, and &lt;a href=&quot;http://www.jboss.org/narayana&quot;&gt;Narayana&lt;/a&gt; for
      transactions. Applications built with Immutant can optionally be
      deployed to a &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; cluster for enhanced features. Its fundamental
      goal is to reduce the inherent
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Accidental_complexity&quot;&gt;incidental complexity&lt;/a&gt;
      in real world applications.&lt;/p&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;As always, if you have any questions, issues, or other feedback about
      Immutant, you can always find us on
      &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/mailing_lists&quot;&gt;our mailing lists&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Issues resolved in 2.1.3&lt;/h2&gt;
      
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-599&quot;&gt;IMMUTANT-599&lt;/a&gt;] - An async call in WildFly can result in a TimeoutException that permanently breaks an app&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-600&quot;&gt;IMMUTANT-600&lt;/a&gt;] - Deploying a servlet to EAP fails if websockets isn't activated&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-601&quot;&gt;IMMUTANT-601&lt;/a&gt;] - Document that a queue shouldn't be shared between 'listen and 'respond&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-604&quot;&gt;IMMUTANT-604&lt;/a&gt;] - Using web/run :filter-map option causes ClassCastException&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-605&quot;&gt;IMMUTANT-605&lt;/a&gt;] - Graceful Shutdown of Web Server&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-606&quot;&gt;IMMUTANT-606&lt;/a&gt;] - deprecate util/app-root and util/app-relative&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-607&quot;&gt;IMMUTANT-607&lt;/a&gt;] - Caching tests fail under WildFly 10.0.0.Final&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-609&quot;&gt;IMMUTANT-609&lt;/a&gt;] - document org.immutant/wildfly dependency in installation &amp;amp; wildfly guides&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-610&quot;&gt;IMMUTANT-610&lt;/a&gt;] - provide a non-decoded :path-info to ring&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-611&quot;&gt;IMMUTANT-611&lt;/a&gt;] - Impossible to run handlers on IO thread (:dispatch? false)&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-612&quot;&gt;IMMUTANT-612&lt;/a&gt;] - Passing undertow options to web/run can result in wrong :port in result&lt;/li&gt;
      &lt;/ul&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2016/01/08/announcing-2-1-2/</id>
    <title>Immutant 2.1.2 Release</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2016-01-08T00:00:00+00:00</published>
    <link href="/news/2016/01/08/announcing-2-1-2/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="releases"></category>
    <summary>
      We just released Immutant 2.1.2. The only significant change is an
      option to more easily enable HTTP/2.0 in immutant/web. We&#39;ve had a
      few people ask about it and got tired of telling them to use an
      incremental release while we waited to fix enough bugs to justify an
      &quot;official&quot; release.
      
      But there simply aren&#39;t any bugs to fix. ;)
      
      We updated our Feature Demo with an HTTP/2.0 example using a
      self-signed certificate since, as you may know, HTTP/2.0 requires SSL.
      
      (Configuring SSL in Java is still terrible, by the way. This release
      doesn&#39;t address that.)
      
      What is Immutant?
      
      Immutant is an integrated suite of Clojure
      libraries backed by Undertow for web, HornetQ...
    </summary>
    <content type="html">
      &lt;p&gt;We just released Immutant 2.1.2. The only significant change is an
      option to more easily enable HTTP/2.0 in &lt;code&gt;immutant/web&lt;/code&gt;. We've had a
      few people ask about it and got tired of telling them to use an
      incremental release while we waited to fix enough bugs to justify an
      &quot;official&quot; release.&lt;/p&gt;
      
      &lt;p&gt;But there simply aren't any bugs to fix. ;)&lt;/p&gt;
      
      &lt;p&gt;We updated our &lt;a href=&quot;https://github.com/immutant/feature-demo&quot;&gt;Feature Demo&lt;/a&gt; with an HTTP/2.0 example using a
      self-signed certificate since, as you may know, HTTP/2.0 requires SSL.&lt;/p&gt;
      
      &lt;p&gt;(Configuring SSL in Java is still terrible, by the way. This release
      doesn't address that.)&lt;/p&gt;
      
      &lt;h2&gt;What is Immutant?&lt;/h2&gt;
      
      &lt;p&gt;Immutant is an integrated suite of &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;
      libraries backed by &lt;a href=&quot;http://undertow.io&quot;&gt;Undertow&lt;/a&gt; for web, &lt;a href=&quot;http://hornetq.org&quot;&gt;HornetQ&lt;/a&gt; for messaging,
      &lt;a href=&quot;http://infinispan.org&quot;&gt;Infinispan&lt;/a&gt; for caching, &lt;a href=&quot;http://quartz-scheduler.org/&quot;&gt;Quartz&lt;/a&gt; for scheduling, and &lt;a href=&quot;http://www.jboss.org/narayana&quot;&gt;Narayana&lt;/a&gt; for
      transactions. Applications built with Immutant can optionally be
      deployed to a &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; cluster for enhanced features. Its fundamental
      goal is to reduce the inherent
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Accidental_complexity&quot;&gt;incidental complexity&lt;/a&gt;
      in real world applications.&lt;/p&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;As always, if you have any questions, issues, or other feedback about
      Immutant, you can always find us on
      &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/mailing_lists&quot;&gt;our mailing lists&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Issues resolved in 2.1.2&lt;/h2&gt;
      
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-597&quot;&gt;IMMUTANT-597&lt;/a&gt;] - Destination names segmented with / can shadow each other Inside the container&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-596&quot;&gt;IMMUTANT-596&lt;/a&gt;] - Messaging docs are incorrect wrt specifying destinations in standalone.xml&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-595&quot;&gt;IMMUTANT-595&lt;/a&gt;] - HTTP2 setup problems&lt;/li&gt;
      &lt;/ul&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2015/11/13/announcing-2-1-1/</id>
    <title>Immutant 2.1.1 Release</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2015-11-13T00:00:00+00:00</published>
    <link href="/news/2015/11/13/announcing-2-1-1/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="releases"></category>
    <summary>
      We just released Immutant 2.1.1! This is mostly a bugfix/documentation
      release. Specific issues are listed below.
      
      What is Immutant?
      
      Immutant is an integrated suite of Clojure
      libraries backed by Undertow for web, HornetQ for messaging,
      Infinispan for caching, Quartz for scheduling, and Narayana for
      transactions. Applications built with Immutant can optionally be
      deployed to a WildFly cluster for enhanced features. Its fundamental
      goal is to reduce the inherent
      incidental complexity
      in real world applications.
      
      lein-immutant/boot-immutant Releases
      
      We&#39;ve also released new versions of lein-immutant and
      boot-immutant (2.1.0 and 0.5.0, respectively). You&#39;ll need to
      update the appropriate plugin if you use Immutant with WildFly - we
      rearranged some of our upstream dependencies in 2.1.1 that are used
      in-container,...
    </summary>
    <content type="html">
      &lt;p&gt;We just released Immutant 2.1.1! This is mostly a bugfix/documentation
      release. Specific issues are listed below.&lt;/p&gt;
      
      &lt;h2&gt;What is Immutant?&lt;/h2&gt;
      
      &lt;p&gt;Immutant is an integrated suite of &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;
      libraries backed by &lt;a href=&quot;http://undertow.io&quot;&gt;Undertow&lt;/a&gt; for web, &lt;a href=&quot;http://hornetq.org&quot;&gt;HornetQ&lt;/a&gt; for messaging,
      &lt;a href=&quot;http://infinispan.org&quot;&gt;Infinispan&lt;/a&gt; for caching, &lt;a href=&quot;http://quartz-scheduler.org/&quot;&gt;Quartz&lt;/a&gt; for scheduling, and &lt;a href=&quot;http://www.jboss.org/narayana&quot;&gt;Narayana&lt;/a&gt; for
      transactions. Applications built with Immutant can optionally be
      deployed to a &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; cluster for enhanced features. Its fundamental
      goal is to reduce the inherent
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Accidental_complexity&quot;&gt;incidental complexity&lt;/a&gt;
      in real world applications.&lt;/p&gt;
      
      &lt;h2&gt;lein-immutant/boot-immutant Releases&lt;/h2&gt;
      
      &lt;p&gt;We've also released new versions of &lt;a href=&quot;https://github.com/immutant/lein-immutant/&quot;&gt;lein-immutant&lt;/a&gt; and
      &lt;a href=&quot;https://github.com/immutant/boot-immutant/&quot;&gt;boot-immutant&lt;/a&gt; (2.1.0 and 0.5.0, respectively). You'll need to
      update the appropriate plugin if you use Immutant with WildFly - we
      rearranged some of our upstream dependencies in 2.1.1 that are used
      in-container, and the new plugins recognize that structure.&lt;/p&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;If you have any questions, issues, or other feedback about Immutant,
      you can always find us on &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/mailing_lists&quot;&gt;our mailing lists&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Issues resolved in 2.1.1&lt;/h2&gt;
      
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-576&quot;&gt;IMMUTANT-576&lt;/a&gt;] -         WebSockets can't be used from a user-provided servlet&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-578&quot;&gt;IMMUTANT-578&lt;/a&gt;] -         Singleton daemons don't get started on another node if the thread dies&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-579&quot;&gt;IMMUTANT-579&lt;/a&gt;] -         Luminus now has :main&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-580&quot;&gt;IMMUTANT-580&lt;/a&gt;] -         Support for setting HTTP response headers in the WebSocket handshake&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-581&quot;&gt;IMMUTANT-581&lt;/a&gt;] -         Pedestal servlet handler overrides handlers specified using :path&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-583&quot;&gt;IMMUTANT-583&lt;/a&gt;] -         Registered closeables aren't closed when a destination is stopped (regression from 2.0.0)&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-585&quot;&gt;IMMUTANT-585&lt;/a&gt;] -         Fix infinispan section in EAP guide&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-586&quot;&gt;IMMUTANT-586&lt;/a&gt;] -         Expose :filter-map option to web/run for deploying Servlet Filters&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-587&quot;&gt;IMMUTANT-587&lt;/a&gt;] -         Immutant seems to be sending &quot;&quot; for query string when it should be sending nil&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-588&quot;&gt;IMMUTANT-588&lt;/a&gt;] -         Improve docs for listen to explain the explicit transaction&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-589&quot;&gt;IMMUTANT-589&lt;/a&gt;] -         Only reuse the context given to request for the response listener if it is remote&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-590&quot;&gt;IMMUTANT-590&lt;/a&gt;] -         Implement all methods on reified JDBC interfaces we return from our factory&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-591&quot;&gt;IMMUTANT-591&lt;/a&gt;] -         Immutant doesn't work with clojure 1.8.0-beta2&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-592&quot;&gt;IMMUTANT-592&lt;/a&gt;] -         Don't fail a WildFly deployment if the repl fails to start&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-593&quot;&gt;IMMUTANT-593&lt;/a&gt;] -         See if we need to use the default listener concurrency for response listeners&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-594&quot;&gt;IMMUTANT-594&lt;/a&gt;] -         scheduling docs point to caching/stop instead of scheduling/stop&lt;/li&gt;
      &lt;/ul&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2015/10/01/lein-immutant-2-0-1/</id>
    <title>New versions of Leiningen and Boot plugins</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2015-10-01T00:00:00+00:00</published>
    <link href="/news/2015/10/01/lein-immutant-2-0-1/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="lein"></category>
    <category term="lein-immutant"></category>
    <category term="boot"></category>
    <category term="boot-immutant"></category>
    <category term="installation"></category>
    <summary>
      This announcement only pertains to those who deploy their applications
      to WildFly or EAP.
      
      We just released version 2.0.1 of lein-immutant and version
      0.4.0 of boot-immutant. Both releases fix an issue where &quot;dev&quot;
      wars were no longer deployable if they used Immutant 2.1.0.
      
      lein-immutant and boot-immutant are plugins, for Leiningen and
      Boot respectively, that are required for your application to run on
      WildFly or EAP. Specifically, they provide tasks for packaging
      your app as a WAR file and testing it &quot;inside&quot; the container.
      
      If you have any questions, issues, or other feedback, you can always
      find us on #immutant on freenode or our mailing list or
      you can file an issue...
    </summary>
    <content type="html">
      &lt;p&gt;This announcement only pertains to those who deploy their applications
      to &lt;a href=&quot;/documentation/2.1.0/apidoc/guide-wildfly.html&quot;&gt;WildFly&lt;/a&gt; or &lt;a href=&quot;http://immutant.org/documentation/2.1.0/apidoc/guide-EAP.html&quot;&gt;EAP&lt;/a&gt;.&lt;/p&gt;
      
      &lt;p&gt;We just released version &lt;a href=&quot;https://clojars.org/lein-immutant&quot;&gt;2.0.1&lt;/a&gt; of &lt;a href=&quot;https://github.com/immutant/lein-immutant/&quot;&gt;lein-immutant&lt;/a&gt; and version
      &lt;a href=&quot;https://clojars.org/boot-immutant&quot;&gt;0.4.0&lt;/a&gt; of &lt;a href=&quot;https://github.com/immutant/boot-immutant/&quot;&gt;boot-immutant&lt;/a&gt;. Both releases fix an &lt;a href=&quot;https://github.com/immutant/lein-immutant/issues/111&quot;&gt;issue&lt;/a&gt; where &quot;dev&quot;
      wars were no longer deployable if they used &lt;a href=&quot;../announcing-2-1-0/&quot;&gt;Immutant 2.1.0&lt;/a&gt;.&lt;/p&gt;
      
      &lt;p&gt;&lt;code&gt;lein-immutant&lt;/code&gt; and &lt;code&gt;boot-immutant&lt;/code&gt; are plugins, for &lt;a href=&quot;http://leiningen.org/&quot;&gt;Leiningen&lt;/a&gt; and
      &lt;a href=&quot;http://boot-clj.com/&quot;&gt;Boot&lt;/a&gt; respectively, that are required for your application to run on
      &lt;a href=&quot;/documentation/2.1.0/apidoc/guide-wildfly.html&quot;&gt;WildFly&lt;/a&gt; or &lt;a href=&quot;http://immutant.org/documentation/2.1.0/apidoc/guide-EAP.html&quot;&gt;EAP&lt;/a&gt;. Specifically, they provide tasks for packaging
      your app as a WAR file and testing it &quot;inside&quot; the container.&lt;/p&gt;
      
      &lt;p&gt;If you have any questions, issues, or other feedback, you can always
      find us on &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode or our mailing list&lt;/a&gt; or
      you can file an issue on the appropriate project.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2015/09/09/datomic-redux/</id>
    <title>Using Datomic With Immutant Redux</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2015-09-09T00:00:00+00:00</published>
    <link href="/news/2015/09/09/datomic-redux/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="datomic"></category>
    <category term="messaging"></category>
    <summary>
      A month ago, we covered how to use Datomic with Immutant. Now that
      Immutant 2.1.0 has been released, the process of using Immutant
      messaging and Datomic in the same application is a bit simpler, so
      we&#39;re covering just that here.
      
      With Immutant 2.1.0, org.immutant/messaging can now work with the
      HornetQ 2.3.x brought in by Datomic, you just have to have the proper
      dependency inclusions/exclusions for it to work. The minimum to get
      this working is:
      
      
      :dependencies [[org.immutant/immutant "2.1.0"]
                     ;; Datomic transitively brings in HornetQ 2.3.17.Final, which
              ...
    </summary>
    <content type="html">
      &lt;p&gt;A month ago, we &lt;a href=&quot;/news/2015/08/03/datomic/&quot;&gt;covered&lt;/a&gt; how to use &lt;a href=&quot;http://www.datomic.com/&quot;&gt;Datomic&lt;/a&gt; with Immutant. Now that
      Immutant 2.1.0 has been &lt;a href=&quot;/news/2015/09/01/announcing-2-1-0/&quot;&gt;released&lt;/a&gt;, the process of using Immutant
      messaging and Datomic in the same application is a bit simpler, so
      we're covering just that here.&lt;/p&gt;
      
      &lt;p&gt;With Immutant 2.1.0, &lt;code&gt;org.immutant/messaging&lt;/code&gt; can now work with the
      HornetQ 2.3.x brought in by Datomic, you just have to have the proper
      dependency inclusions/exclusions for it to work. The minimum to get
      this working is:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;
      :dependencies [[org.immutant/immutant &quot;2.1.0&quot;]
                     ;; Datomic transitively brings in HornetQ 2.3.17.Final, which
                     ;; overrides the HornetQ 2.4.5.Final from org.immutant/messaging
                     [com.datomic/datomic-pro &quot;0.9.5206&quot;]
                     ;; org.immutant/messaging requires this, but Datomic doesn't
                     ;; bring it in, so we have to depend on it explicitly
                     [org.hornetq/hornetq-jms-server &quot;2.3.17.Final&quot;
                      :exclusions [org.jboss.jbossts.jts/jbossjts-jacorb]]]&lt;/pre&gt;
      
      &lt;p&gt;But doing just that leads to lots of warnings in Leiningen's pedantic
      report. Both Datomic and Immutant have large dependency trees, so
      conflicts are inevitable. If you want to get rid of those warnings,
      we've figured that out for you as well:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;
      :dependencies [[org.immutant/immutant &quot;2.1.0&quot;
                      :exclusions [org.hornetq/hornetq-server
                                   org.hornetq/hornetq-jms-server
                                   org.hornetq/hornetq-journal
                                   org.hornetq/hornetq-commons]]
                     [com.datomic/datomic-pro &quot;0.9.5206&quot;
                      :exclusions [org.slf4j/slf4j-nop
                                   joda-time
                                   commons-codec
                                   org.jboss.logging/jboss-logging]]
                     [org.hornetq/hornetq-jms-server &quot;2.3.17.Final&quot;
                      :exclusions [org.jboss.spec.javax.transaction/jboss-transaction-api_1.1_spec
                                   org.jboss.logging/jboss-logging
                                   org.jboss/jboss-transaction-spi
                                   org.jgroups/jgroups
                                   org.jboss.jbossts.jts/jbossjts-jacorb]]]&lt;/pre&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;If you have any questions, issues, or other feedback about Datomic
      with Immutant, you can always find us on
      &lt;a href=&quot;/community/#irc&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/#mailing-lists&quot;&gt;our mailing list&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2015/09/08/mailing-list/</id>
    <title>Mailing List Moved To Google Groups</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2015-09-08T00:00:00+00:00</published>
    <link href="/news/2015/09/08/mailing-list/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <summary>
      Due to issues with hosting our own mailing lists, we&#39;ve decided to let
      someone else manage them so we can spend more time doing things that
      actually matter. Therefore, effective today,
      immutant-user@immutant.org is now immutant@groups.google.com, and
      we&#39;re retiring immutant-dev@immutant.org, since it was rarely used.
      
      If you were subscribed to immutant-user@immutant.org, you should
      have received an invite to join the new list already. If you didn&#39;t
      receive it, or weren&#39;t on the old list,
      please join.
      
      The archives of the old lists will continue to be available at
      http://immutant.markmail.org/.
      
      Why Google Groups?
      
      We wanted something that was simple to manage (or at least simpler
      than our existing, broken, ezmlm/qmail setup). We also had requests
      from...
    </summary>
    <content type="html">
      &lt;p&gt;Due to issues with hosting our own mailing lists, we've decided to let
      someone else manage them so we can spend more time doing things that
      actually matter. Therefore, effective today,
      &lt;code&gt;immutant-user@immutant.org&lt;/code&gt; is now &lt;code&gt;immutant@groups.google.com&lt;/code&gt;, and
      we're retiring &lt;code&gt;immutant-dev@immutant.org&lt;/code&gt;, since it was rarely used.&lt;/p&gt;
      
      &lt;p&gt;If you were subscribed to &lt;code&gt;immutant-user@immutant.org&lt;/code&gt;, you should
      have received an invite to join the new list already. If you didn't
      receive it, or weren't on the old list,
      &lt;a href=&quot;https://groups.google.com/forum/#!forum/immutant&quot;&gt;please join&lt;/a&gt;.&lt;/p&gt;
      
      &lt;p&gt;The archives of the old lists will continue to be available at
      &lt;a href=&quot;http://immutant.markmail.org/&quot;&gt;http://immutant.markmail.org/&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Why Google Groups?&lt;/h2&gt;
      
      &lt;p&gt;We wanted something that was simple to manage (or at least simpler
      than our existing, broken, ezmlm/qmail setup). We also had requests
      from a few of you for something more forum-like, that didn't require
      email. Google Groups gives us both of those.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2015/09/01/announcing-2-1-0/</id>
    <title>Immutant 2.1.0 Release</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2015-09-01T00:00:00+00:00</published>
    <link href="/news/2015/09/01/announcing-2-1-0/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="releases"></category>
    <summary>
      We just released Immutant 2.1.0! New features include support for
      EAP and the latest WildFly pre-release, as well as experimental
      support for
      HTTP/2,
      and better compatibility with Datomic. Plus a few bug fixes, doc
      improvements, and small API tweaks. Details below.
      
      What is Immutant?
      
      Immutant is an integrated suite of Clojure
      libraries backed by Undertow for web, HornetQ for messaging,
      Infinispan for caching, Quartz for scheduling, and Narayana for
      transactions. Applications built with Immutant can optionally be
      deployed to a WildFly cluster for enhanced features. Its fundamental
      goal is to reduce the inherent
      incidental complexity
      in real world applications.
      
      What&#39;s in this release?
      
      
      Immutant&#39;s messaging library can now be used with Datomic either
      in or out of...
    </summary>
    <content type="html">
      &lt;p&gt;We just released Immutant 2.1.0! New features include support for
      &lt;a href=&quot;https://www.jboss.org/products/eap&quot;&gt;EAP&lt;/a&gt; and the latest &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; pre-release, as well as experimental
      support for
      &lt;a href=&quot;http://undertow.io/blog/2015/04/27/An-in-depth-overview-of-HTTP2.html&quot;&gt;HTTP/2&lt;/a&gt;,
      and better compatibility with &lt;a href=&quot;http://www.datomic.com/&quot;&gt;Datomic&lt;/a&gt;. Plus a few bug fixes, doc
      improvements, and small API tweaks. Details below.&lt;/p&gt;
      
      &lt;h2&gt;What is Immutant?&lt;/h2&gt;
      
      &lt;p&gt;Immutant is an integrated suite of &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;
      libraries backed by &lt;a href=&quot;http://undertow.io&quot;&gt;Undertow&lt;/a&gt; for web, &lt;a href=&quot;http://hornetq.org&quot;&gt;HornetQ&lt;/a&gt; for messaging,
      &lt;a href=&quot;http://infinispan.org&quot;&gt;Infinispan&lt;/a&gt; for caching, &lt;a href=&quot;http://quartz-scheduler.org/&quot;&gt;Quartz&lt;/a&gt; for scheduling, and &lt;a href=&quot;http://www.jboss.org/narayana&quot;&gt;Narayana&lt;/a&gt; for
      transactions. Applications built with Immutant can optionally be
      deployed to a &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; cluster for enhanced features. Its fundamental
      goal is to reduce the inherent
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Accidental_complexity&quot;&gt;incidental complexity&lt;/a&gt;
      in real world applications.&lt;/p&gt;
      
      &lt;h2&gt;What's in this release?&lt;/h2&gt;
      
      &lt;ul&gt;
      &lt;li&gt;Immutant's messaging library can now be used with &lt;a href=&quot;http://www.datomic.com/&quot;&gt;Datomic&lt;/a&gt; either
      in or out of container, as explained more fully in this
      &lt;a href=&quot;/news/2015/08/03/datomic/&quot;&gt;post&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;We had always planned for Immutant to work with Red Hat's
      commercially-supported &lt;a href=&quot;https://www.jboss.org/products/eap&quot;&gt;EAP&lt;/a&gt; product by making it work with WildFly,
      which will form the foundation for EAP 7, expected to be released
      next year. But we had enough EAP 6 subscribers asking to run
      Immutant that it made sense to try and backport it. So we did!
      See our &lt;a href=&quot;/documentation/2.1.0/apidoc/guide-EAP.html&quot;&gt;EAP guide&lt;/a&gt; for more details.&lt;/li&gt;
      &lt;li&gt;We upgraded our &lt;a href=&quot;http://undertow.io&quot;&gt;Undertow&lt;/a&gt; dependency to its latest official
      release, which gives us experimental support for HTTP/2.&lt;/li&gt;
      &lt;li&gt;You can now set a timeout for a WebSocket or HTTP stream. See the
      &lt;a href=&quot;/documentation/2.1.0/apidoc/immutant.web.async.html&quot;&gt;async docs&lt;/a&gt; for more details.&lt;/li&gt;
      &lt;li&gt;We now support 4 -- count 'em, FOUR!!! -- major versions of
      Infinispan for &lt;code&gt;immutant.caching&lt;/code&gt;. Out of container, we bumped
      Immutant's dependency to Infinispan 7, but when run in EAP, version
      5 is used. And inside WildFly 8.2, version 6 is used, and inside
      Wildfly 10, version 8 is used. Crazy, right? :) We're not yet using
      Infinispan 8 out of container, since it requires Java 8.&lt;/li&gt;
      &lt;li&gt;One potentially breaking change is that we switched the default
      value of the &lt;code&gt;:singleton&lt;/code&gt; option for &lt;code&gt;immutant.scheduling/schedule&lt;/code&gt;
      from &lt;code&gt;true&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;, because although singleton jobs need a
      unique identifier, we weren't requiring the &lt;code&gt;:id&lt;/code&gt; option, so our
      previous default behavior was to fail with a warning. As a
      convenience, you may now pass in the id as the value of
      &lt;code&gt;:singleton&lt;/code&gt;, thereby collapsing two arguments into one.&lt;/li&gt;
      &lt;li&gt;By default, if the action of a scheduled job is running when the
      same job fires again, the two executions happen in parallel. Thanks
      to &lt;a href=&quot;https://github.com/instilled&quot;&gt;Fabio Bernasconi&lt;/a&gt;, you can now &lt;a href=&quot;/documentation/2.1.0/apidoc/immutant.scheduling.html#var-allow-concurrent-exec.3F&quot;&gt;disable this&lt;/a&gt; on a per-job basis,
      causing subsequent executions to wait for prior executions to
      finish.&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;All of these issues and more are linked below.&lt;/p&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;If you have any questions, issues, or other feedback about Immutant,
      you can always find us on &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/mailing_lists&quot;&gt;our mailing lists&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Issues resolved in 2.1.0&lt;/h2&gt;
      
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-454&quot;&gt;IMMUTANT-454&lt;/a&gt;] -         Recreating a persistent cache fails with a NullPointerException&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-497&quot;&gt;IMMUTANT-497&lt;/a&gt;] -         Immutant messaging and datomic can't be used together outside of WildFly&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-523&quot;&gt;IMMUTANT-523&lt;/a&gt;] -         support timeouts for asnyc channels&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-567&quot;&gt;IMMUTANT-567&lt;/a&gt;] -         transactions and messaging bring in two different versions of HornetQ&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-568&quot;&gt;IMMUTANT-568&lt;/a&gt;] -         Allow disabling concurrent job execution&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-569&quot;&gt;IMMUTANT-569&lt;/a&gt;] -         Support deploying to EAP 6&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-570&quot;&gt;IMMUTANT-570&lt;/a&gt;] -         Expose Undertow's new support for HTTP/2 &lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-571&quot;&gt;IMMUTANT-571&lt;/a&gt;] -         Reconcile default values of :singleton and :id for jobs&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-572&quot;&gt;IMMUTANT-572&lt;/a&gt;] -         HTTP streams leak connections when closed from the client&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-573&quot;&gt;IMMUTANT-573&lt;/a&gt;] -         onClose for HTTP channel doesn't get called when channel is closed inside undertow&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-574&quot;&gt;IMMUTANT-574&lt;/a&gt;] -         Support WildFly 10&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-575&quot;&gt;IMMUTANT-575&lt;/a&gt;] -         Make public immutant.wildfly fns safe to call out of container&lt;/li&gt;
      &lt;/ul&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2015/08/03/datomic/</id>
    <title>Using Datomic With Immutant</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2015-08-03T00:00:00+00:00</published>
    <link href="/news/2015/08/03/datomic/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="datomic"></category>
    <category term="messaging"></category>
    <summary>
       Note: now that Immutant 2.1.0 is out,
      we've published another Datomic post covering using
      it with 2.1.0 specifically.
      
      
      Immutant 2.x is just a set of libraries, usable from a standard
      Clojure application. The Datomic peer client is also a library, so
      in theory we can use Immutant and Datomic together in the same
      application. But in pratice, it&#39;s not that simple.
      
      The sticking point is HornetQ - Datomic uses HornetQ to connect
      peers to the transactor and depends on HornetQ 2.3.x, while Immutant
      depends on 2.4.x. We should be able to resolve this with the proper
      dependency exclusions - the API that Datomic uses in 2.3.x is
      available in 2.4.x,...
    </summary>
    <content type="html">
      &lt;div class=&quot;notice big&quot;&gt; Note: now that &lt;a href=&quot;/news/2015/09/01/announcing-2-1-0/&quot;&gt;Immutant 2.1.0 is out&lt;/a&gt;,
      we've published another &lt;a href=&quot;/news/2015/09/09/datomic-redux/&quot;&gt;Datomic post&lt;/a&gt; covering using
      it with 2.1.0 specifically.
      &lt;/div&gt;
      
      &lt;p&gt;Immutant 2.x is just a set of libraries, usable from a standard
      Clojure application. The &lt;a href=&quot;http://www.datomic.com/&quot;&gt;Datomic&lt;/a&gt; peer client is also a library, so
      in theory we can use Immutant and Datomic together in the same
      application. But in pratice, it's not that simple.&lt;/p&gt;
      
      &lt;p&gt;The sticking point is &lt;a href=&quot;http://hornetq.org&quot;&gt;HornetQ&lt;/a&gt; - Datomic uses HornetQ to connect
      peers to the transactor and depends on HornetQ 2.3.x, while Immutant
      depends on 2.4.x. We should be able to resolve this with the proper
      dependency exclusions - the API that Datomic uses in 2.3.x is
      available in 2.4.x, but there are two issues that prevent that from
      working with the current stable release of Immutant (&lt;a href=&quot;/news/2015/06/22/announcing-2-0-2/&quot;&gt;2.0.2&lt;/a&gt;):&lt;/p&gt;
      
      &lt;ol&gt;
      &lt;li&gt;Immutant 2.0.x uses the &lt;a href=&quot;http://www.oracle.com/technetwork/articles/java/jms20-1947669.html&quot;&gt;JMS 2.0&lt;/a&gt; API, which didn't appear in
      HornetQ until 2.4.0, so 2.4.x is required.&lt;/li&gt;
      &lt;li&gt;The Datomic transactor is running HornetQ 2.3.x, and a 2.4.x client
      can't connect to a 2.3.x server, so 2.3.x is required.&lt;/li&gt;
      &lt;/ol&gt;&lt;p&gt;Hence our pickle.&lt;/p&gt;
      
      &lt;p&gt;But, all is not lost - with Immutant 2.0.x, you have two (non-awesome)
      options for using Datomic, and if you are willing to use recent
      Immutant &lt;a href=&quot;/builds/2x/&quot;&gt;incremental builds&lt;/a&gt; (and are willing to upgrade to
      Immutant 2.1.0 when it is released in a few weeks), you have a third,
      more palatable option.&lt;/p&gt;
      
      &lt;h2&gt;Option 1 - No Immutant Messaging&lt;/h2&gt;
      
      &lt;p&gt;The first option for using Datomic with Immutant 2.0.x is to not use
      Immutant messaging. This requires either depending individually on the
      Immutant libraries you are using:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;
        :dependencies [[com.datomic/datomic-pro &quot;0.9.5206&quot;]
                       [org.immutant/web &quot;2.0.2&quot;]
                       [org.immutant/scheduling &quot;2.0.2&quot;]
                       ...]&lt;/pre&gt;
      
      &lt;p&gt;or using the catch-all artifact, and excluding messaging:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;
        :dependencies [[com.datomic/datomic-pro &quot;0.9.5206&quot;]
                       [org.immutant/immutant &quot;2.0.2&quot;
                        :exclusions [org.immutant/messaging]]
                       ...]&lt;/pre&gt;
      
      &lt;p&gt;But this means you can't use any of the Immutant &lt;a href=&quot;/documentation/current/apidoc/immutant.messaging.html&quot;&gt;messaging features&lt;/a&gt;,
      which isn't great.&lt;/p&gt;
      
      &lt;h2&gt;Option 2 - In WildFly Only&lt;/h2&gt;
      
      &lt;p&gt;An Immutant application &lt;a href=&quot;/documentation/current/apidoc/guide-wildfly.html&quot;&gt;deployed&lt;/a&gt; to a &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; application server
      doesn't directly use any on the HornetQ APIs, and instead uses the JMS
      API to communicate with the HornetQ provided by WildFly. That HornetQ
      is ClassLoader-isolated, which means your application can bring in its
      own version of HornetQ (in this case, 2.3.x via Datomic), which can be
      used without issue.&lt;/p&gt;
      
      &lt;p&gt;But this means you have to do all of your development against an
      application running inside WildFly, which isn't a great development
      experience. With our &lt;a href=&quot;https://github.com/immutant/lein-immutant/blob/master/docs/deployment.md&quot;&gt;&quot;dev&quot; war&lt;/a&gt;, you can still have a REPL-driven
      process, but it is definitely more painful than out-of-container
      development.&lt;/p&gt;
      
      &lt;h2&gt;Option 3 - Use Recent Incrementals, i.e. 2.1.0&lt;/h2&gt;
      
      &lt;p&gt;For the soon-to-be-released Immutant 2.1.0, we're working on
      supporting &lt;a href=&quot;https://www.redhat.com/en/technologies/jboss-middleware/application-platform&quot;&gt;Red Hat JBoss Enterprise Application Platform&lt;/a&gt; (which is
      a mouthful, so we'll just call it EAP). EAP is the commercialized
      version of Red Hat's open source JBoss Application Server (now known
      as WildFly), and the current version (6.4.0) is based off an older
      WildFly that uses HornetQ 2.3.x. We'll cover what EAP support really
      means in a future blog post - what matters today is that changes we've
      made in Immutant to support EAP allow you to use Immutant messaging
      with Datomic both in and out of WildFly (and soon EAP).&lt;/p&gt;
      
      &lt;p&gt;The only issues with this option is you have to use a recent
      incremental build of Immutant until we release 2.1.0, and do a few
      dependency exclusions/inclusions to make Immutant messaging and
      Datomic play nicely. Luckily, we've figured that out for you! The bare
      minimum to get things working is:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;
      :dependencies [[org.immutant/immutant &quot;2.x.incremental.602&quot;]
                     ;; Datomic transitively brings in HornetQ 2.3.17.Final, which
                     ;; overrides the HornetQ 2.4.5.Final from org.immutant/messaging
                     [com.datomic/datomic-pro &quot;0.9.5206&quot;]
                     ;; org.immutant/messaging requires this, but Datomic doesn't
                     ;; bring it in, so we have to depend on it explicitly
                     [org.hornetq/hornetq-jms-server &quot;2.3.17.Final&quot;
                      :exclusions [org.jboss.jbossts.jts/jbossjts-jacorb]]]&lt;/pre&gt;
      
      &lt;p&gt;Now that you have it working, you'll probably notice that Leiningen's
      pedantic report is chock full of warnings. Both Datomic and Immutant
      have large dependency trees, so conflicts are inevitable. If you want
      to get rid of those warnings, we've figured that out for you as well:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;
      :dependencies [[org.immutant/immutant &quot;2.x.incremental.602&quot;
                      :exclusions [org.hornetq/hornetq-server
                                   org.hornetq/hornetq-jms-server
                                   org.hornetq/hornetq-journal
                                   org.hornetq/hornetq-commons]]
                     [com.datomic/datomic-pro &quot;0.9.5206&quot;
                      :exclusions [org.slf4j/slf4j-nop
                                   joda-time
                                   commons-codec
                                   org.jboss.logging/jboss-logging]]
                     [org.hornetq/hornetq-jms-server &quot;2.3.17.Final&quot;
                      :exclusions [org.jboss.spec.javax.transaction/jboss-transaction-api_1.1_spec
                                   org.jboss.logging/jboss-logging
                                   org.jboss/jboss-transaction-spi
                                   org.jgroups/jgroups
                                   org.jboss.jbossts.jts/jbossjts-jacorb]]]&lt;/pre&gt;
      
      &lt;p&gt;Note again that this option currently requires you to run a recent
      &lt;a href=&quot;/builds/2x/&quot;&gt;incremental build&lt;/a&gt; (#602 or newer), which requires
      relying on our incremental repo:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;
      :repositories [[&quot;Immutant incremental builds&quot; &quot;http://downloads.immutant.org/incremental/&quot;]]&lt;/pre&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;If you have any questions, issues, or other feedback about Datomic
      with Immutant, you can always find us on
      &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/mailing_lists&quot;&gt;our mailing lists&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2015/06/22/announcing-2-0-2/</id>
    <title>Immutant 2.0.2 Patch Release</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2015-06-22T00:00:00+00:00</published>
    <link href="/news/2015/06/22/announcing-2-0-2/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="releases"></category>
    <summary>
      This patch release resolves issues with Websocket on-close handlers not
      being fired when close frames aren&#39;t actually sent.
      
      What is Immutant?
      
      Immutant is an integrated suite of Clojure
      libraries backed by Undertow for web, HornetQ for messaging,
      Infinispan for caching, Quartz for scheduling, and Narayana for
      transactions. Applications built with Immutant can optionally be
      deployed to a WildFly cluster for enhanced features. Its fundamental
      goal is to reduce the inherent
      incidental complexity
      in real world applications.
      
      Get In Touch
      
      If you have any questions, issues, or other feedback about Immutant,
      you can always find us on #immutant on freenode or
      our mailing lists.
      
      Issues resolved in 2.0.2
      
      
      [IMMUTANT-563] -       ...
    </summary>
    <content type="html">
      &lt;p&gt;This patch release resolves issues with Websocket &lt;code&gt;on-close&lt;/code&gt; handlers not
      being fired when close frames aren't actually sent.&lt;/p&gt;
      
      &lt;h2&gt;What is Immutant?&lt;/h2&gt;
      
      &lt;p&gt;Immutant is an integrated suite of &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;
      libraries backed by &lt;a href=&quot;http://undertow.io&quot;&gt;Undertow&lt;/a&gt; for web, &lt;a href=&quot;http://hornetq.org&quot;&gt;HornetQ&lt;/a&gt; for messaging,
      &lt;a href=&quot;http://infinispan.org&quot;&gt;Infinispan&lt;/a&gt; for caching, &lt;a href=&quot;http://quartz-scheduler.org/&quot;&gt;Quartz&lt;/a&gt; for scheduling, and &lt;a href=&quot;http://www.jboss.org/narayana&quot;&gt;Narayana&lt;/a&gt; for
      transactions. Applications built with Immutant can optionally be
      deployed to a &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; cluster for enhanced features. Its fundamental
      goal is to reduce the inherent
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Accidental_complexity&quot;&gt;incidental complexity&lt;/a&gt;
      in real world applications.&lt;/p&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;If you have any questions, issues, or other feedback about Immutant,
      you can always find us on &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/mailing_lists&quot;&gt;our mailing lists&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Issues resolved in 2.0.2&lt;/h2&gt;
      
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-563&quot;&gt;IMMUTANT-563&lt;/a&gt;] -         on-close handler for async channels doesn't fire if server is stopped
      &lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-564&quot;&gt;IMMUTANT-564&lt;/a&gt;] -         Websocket on-close handlers not being called when Safari client goes away
      &lt;/li&gt;
      &lt;/ul&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2015/06/04/activemq-artemis/</id>
    <title>Using ActiveMQ Artemis With Immutant</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2015-06-04T00:00:00+00:00</published>
    <link href="/news/2015/06/04/activemq-artemis/" rel="alternate" type="text/html" />
    <author>
      <name>Toby Crawley</name>
    </author>
    <category term="messaging"></category>
    <summary>
      Artemis is a &quot;new&quot; JMS2-compatible message broker based on a merging
      of the ActiveMQ and HornetQ codebases, and represents the future
      of both projects.
      
      Immutant is built on an abstraction layer called WunderBoss in order
      to share much of the implementation with our sibling project,
      TorqueBox. An additional advantage of this layer is it allows us (in
      theory) to easily switch out the underlying messaging implementation
      while keeping the same Clojure API. With the release of Artemis 1.0.0,
      we&#39;ve now taken the opportunity to test that theory.
      
      wunderboss-artemis
      
      With only a couple of changes to WunderBoss that allow us to share the
      bulk of the existing JMS2 implementation between the HornetQ...
    </summary>
    <content type="html">
      &lt;p&gt;&lt;a href=&quot;http://activemq.apache.org/artemis/&quot;&gt;Artemis&lt;/a&gt; is a &quot;new&quot; JMS2-compatible message broker based on a merging
      of the &lt;a href=&quot;http://activemq.apache.org/&quot;&gt;ActiveMQ&lt;/a&gt; and &lt;a href=&quot;http://hornetq.org/&quot;&gt;HornetQ&lt;/a&gt; codebases, and represents the future
      of both projects.&lt;/p&gt;
      
      &lt;p&gt;Immutant is built on an abstraction layer called &lt;a href=&quot;https://github.com/projectodd/wunderboss/&quot;&gt;WunderBoss&lt;/a&gt; in order
      to share much of the implementation with our sibling project,
      &lt;a href=&quot;/&quot;&gt;TorqueBox&lt;/a&gt;. An additional advantage of this layer is it allows us (in
      theory) to easily switch out the underlying messaging implementation
      while keeping the same Clojure API. With the release of Artemis 1.0.0,
      we've now taken the opportunity to test that theory.&lt;/p&gt;
      
      &lt;h2&gt;wunderboss-artemis&lt;/h2&gt;
      
      &lt;p&gt;With only a couple of changes to WunderBoss that allow us to share the
      bulk of the existing JMS2 implementation between the HornetQ and
      Artemis adapters and make it easier to exclude the HornetQ
      dependencies, we're now able to provide &lt;a href=&quot;https://github.com/projectodd/wunderboss-artemis/&quot;&gt;wunderboss-artemis&lt;/a&gt;. It
      allows you to use Artemis instead of HornetQ as the message broker in
      an embedded application (it doesn't yet support Artemis if you are
      deploying to WildFly).&lt;/p&gt;
      
      &lt;p&gt;If you want to give it a try, you just need to depend on a recent
      &lt;a href=&quot;/builds/2x/&quot;&gt;incremental build&lt;/a&gt; (#585 or newer)
      and make a few adjustments to your &lt;code&gt;:dependencies&lt;/code&gt;:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;:dependencies [[org.immutant/messaging &quot;2.x.incremental.585&quot;
                      :exclusions [org.projectodd.wunderboss/wunderboss-messaging-hornetq]]
                     [org.projectodd.wunderboss/wunderboss-artemis &quot;0.1.0&quot;]]
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;If you then use messaging and see something like the following in your
      log output, you're all set!&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;14:12:44.471 INFO  [org.apache.activemq.artemis.core.server] (main) AMQ221020: Started Acceptor at localhost:5445 for protocols [CORE]
      14:12:44.471 INFO  [org.apache.activemq.artemis.core.server] (main) AMQ221007: Server is now live
      14:12:44.471 INFO  [org.apache.activemq.artemis.core.server] (main) AMQ221001: Apache ActiveMQ Artemis Message Broker version 1.0.0 [nodeID=2107a7c3-0a1c-11e5-955d-71ef037c4451]
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;Artemis is brand new - once it matures a bit, we may provide an
      immutant-artemis lib that would bring in wunderboss-artemis and
      provide an Artemis management namespace similar to the
      &lt;a href=&quot;/documentation/current/apidoc/immutant.messaging.hornetq.html&quot;&gt;immutant.messaging.hornetq&lt;/a&gt; we currently provide.&lt;/p&gt;
      
      &lt;p&gt;As always, if you have any issues or feedback, feel free to
      &lt;a href=&quot;/community/&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2015/05/20/boot-immutant/</id>
    <title>An Immutant Plugin For Boot</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2015-05-20T00:00:00+00:00</published>
    <link href="/news/2015/05/20/boot-immutant/" rel="alternate" type="text/html" />
    <author>
      <name>Toby Crawley</name>
    </author>
    <category term="boot"></category>
    <category term="wildfly"></category>
    <summary>
      Boot is an interesting new build tool for Clojure from Alan Dipert
      and Micha Niskin (if you&#39;re not familiar with it, Alan &amp; Micha gave
      a great intro at Clojure/West).
      
      To support the (probably enormous) set of Immutant 2.x users that use
      Boot and deploy to WildFly, we&#39;ve ported the functionality of our
      lein-immutant plugin to Boot, and have released the cleverly-named
      boot-immutant.
      
      boot-immutant provides two tasks: immutant-war and immutant-test,
      which are analogous to the immutant war and immutant test tasks
      from lein-immutant, respectively.
      
      We consider the current release (0.3.0) beta quality. If you&#39;re in
      the set of users that would find this plugin useful, give it a try
      and let us...
    </summary>
    <content type="html">
      &lt;p&gt;&lt;a href=&quot;http://boot-clj.com/&quot;&gt;Boot&lt;/a&gt; is an interesting new build tool for Clojure from &lt;a href=&quot;https://github.com/alandipert&quot;&gt;Alan Dipert&lt;/a&gt;
      and &lt;a href=&quot;https://github.com/micha&quot;&gt;Micha Niskin&lt;/a&gt; (if you're not familiar with it, Alan &amp;amp; Micha gave
      a great &lt;a href=&quot;https://www.youtube.com/watch?v=TcnzB2tB-8Q&quot;&gt;intro at Clojure/West&lt;/a&gt;).&lt;/p&gt;
      
      &lt;p&gt;To support the (probably enormous) set of Immutant 2.x users that use
      Boot &lt;em&gt;and&lt;/em&gt; &lt;a href=&quot;/documentation/current/apidoc/guide-wildfly.html&quot;&gt;deploy to WildFly&lt;/a&gt;, we've ported the functionality of our
      &lt;a href=&quot;https://github.com/immutant/lein-immutant/&quot;&gt;lein-immutant&lt;/a&gt; plugin to Boot, and have released the cleverly-named
      &lt;a href=&quot;https://github.com/immutant/boot-immutant/&quot;&gt;boot-immutant&lt;/a&gt;.&lt;/p&gt;
      
      &lt;p&gt;boot-immutant provides two tasks: &lt;code&gt;immutant-war&lt;/code&gt; and &lt;code&gt;immutant-test&lt;/code&gt;,
      which are analogous to the &lt;code&gt;immutant war&lt;/code&gt; and &lt;code&gt;immutant test&lt;/code&gt; tasks
      from lein-immutant, respectively.&lt;/p&gt;
      
      &lt;p&gt;We consider the current release (&lt;a href=&quot;https://clojars.org/boot-immutant/versions/0.3.0&quot;&gt;0.3.0&lt;/a&gt;) beta quality. If you're in
      the set of users that would find this plugin useful, give it a try
      and let us know if you run in to any issues, either through the
      &lt;a href=&quot;/community/&quot;&gt;usual channels&lt;/a&gt; or by filing an &lt;a href=&quot;https://github.com/immutant/boot-immutant/&quot;&gt;issue&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2015/05/18/announcing-2-0-1/</id>
    <title>Immutant 2.0.1 Patch Release</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2015-05-18T00:00:00+00:00</published>
    <link href="/news/2015/05/18/announcing-2-0-1/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="releases"></category>
    <summary>
      Despite our best efforts, the 2.0.0 release wasn&#39;t perfect. This
      release fixes the imperfections we&#39;re currently aware of.
      
      What is Immutant?
      
      Immutant is an integrated suite of Clojure
      libraries backed by Undertow for web, HornetQ for messaging,
      Infinispan for caching, Quartz for scheduling, and Narayana for
      transactions. Applications built with Immutant can optionally be
      deployed to a WildFly cluster for enhanced features. Its fundamental
      goal is to reduce the inherent
      incidental complexity
      in real world applications.
      
      What&#39;s changed in this release?
      
      Mainly the following:
      
      
      Subscribing to remote topics now actually works
      When running inside WildFly, if your :main doesn&#39;t return, we
      abort the deployment instead of letting it hang the deployer. See
      the WildFly guide for...
    </summary>
    <content type="html">
      &lt;p&gt;Despite our best efforts, the 2.0.0 release wasn't perfect. This
      release fixes the imperfections we're currently aware of.&lt;/p&gt;
      
      &lt;h2&gt;What is Immutant?&lt;/h2&gt;
      
      &lt;p&gt;Immutant is an integrated suite of &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;
      libraries backed by &lt;a href=&quot;http://undertow.io&quot;&gt;Undertow&lt;/a&gt; for web, &lt;a href=&quot;http://hornetq.org&quot;&gt;HornetQ&lt;/a&gt; for messaging,
      &lt;a href=&quot;http://infinispan.org&quot;&gt;Infinispan&lt;/a&gt; for caching, &lt;a href=&quot;http://quartz-scheduler.org/&quot;&gt;Quartz&lt;/a&gt; for scheduling, and &lt;a href=&quot;http://www.jboss.org/narayana&quot;&gt;Narayana&lt;/a&gt; for
      transactions. Applications built with Immutant can optionally be
      deployed to a &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; cluster for enhanced features. Its fundamental
      goal is to reduce the inherent
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Accidental_complexity&quot;&gt;incidental complexity&lt;/a&gt;
      in real world applications.&lt;/p&gt;
      
      &lt;h2&gt;What's changed in this release?&lt;/h2&gt;
      
      &lt;p&gt;Mainly the following:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;Subscribing to remote topics now actually works&lt;/li&gt;
      &lt;li&gt;When running inside &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt;, if your &lt;code&gt;:main&lt;/code&gt; doesn't return, we
      abort the deployment instead of letting it hang the deployer. See
      the &lt;a href=&quot;/documentation/2.0.1/apidoc/guide-wildfly.html&quot;&gt;WildFly guide&lt;/a&gt; for details.&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;See below for a full list of changes.&lt;/p&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;If you have any questions, issues, or other feedback about Immutant,
      you can always find us on &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/mailing_lists&quot;&gt;our mailing lists&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Issues resolved in 2.0.1&lt;/h2&gt;
      
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-558&quot;&gt;IMMUTANT-558&lt;/a&gt;] -         Clarify that the :main fn must return for deployment to succeed in WildFly&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-559&quot;&gt;IMMUTANT-559&lt;/a&gt;] -         Time out the :main calls that block&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-560&quot;&gt;IMMUTANT-560&lt;/a&gt;] -         Subscribing to pre-existing topic on remote context throws NPE&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-561&quot;&gt;IMMUTANT-561&lt;/a&gt;] -         Concurrent websocket requests can fail under load in-container on slow hardware&lt;/li&gt;
      &lt;/ul&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2015/04/17/announcing-2-final/</id>
    <title>Immutant 2.0.0 Released (FINALLY!)</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2015-04-17T00:00:00+00:00</published>
    <link href="/news/2015/04/17/announcing-2-final/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="releases"></category>
    <summary>
      It was just last April that
      we announced our plans for the second
      major release of Immutant, code-named The Deuce. And today, a year
      later, we&#39;re happy to announce the end of our beta cycle and the first
      official release of Immutant 2.0.0.
      
      We&#39;d like to send out a big, fat THANK YOU! to all our early
      adopters who provided invaluable feedback on the alpha, beta, and
      incremental releases. It was a total community effort.
      
      From this point forward, we&#39;re going to stick to the 3-digit release
      naming convention, so no more -alphaX or -betaX suffixes, just
      {major}.{minor}.{patch} numbers.
      
      What is Immutant?
      
      In case you didn&#39;t know...
      
      Immutant is an integrated suite of...
    </summary>
    <content type="html">
      &lt;p&gt;It was just last April that
      &lt;a href=&quot;/news/2014/04/02/the-deuce/&quot;&gt;we announced our plans&lt;/a&gt; for the second
      major release of Immutant, code-named &lt;em&gt;The Deuce&lt;/em&gt;. And today, a year
      later, we're happy to announce the end of our beta cycle and the first
      official release of &lt;a href=&quot;/documentation/2.0.0/apidoc/&quot;&gt;Immutant 2.0.0&lt;/a&gt;.&lt;/p&gt;
      
      &lt;p&gt;We'd like to send out a big, fat &lt;strong&gt;THANK YOU!&lt;/strong&gt; to all our early
      adopters who provided invaluable feedback on the alpha, beta, and
      incremental releases. It was a total community effort.&lt;/p&gt;
      
      &lt;p&gt;From this point forward, we're going to stick to the 3-digit release
      naming convention, so no more &lt;code&gt;-alphaX&lt;/code&gt; or &lt;code&gt;-betaX&lt;/code&gt; suffixes, just
      &lt;code&gt;{major}.{minor}.{patch}&lt;/code&gt; numbers.&lt;/p&gt;
      
      &lt;h2&gt;What is Immutant?&lt;/h2&gt;
      
      &lt;p&gt;In case you didn't know...&lt;/p&gt;
      
      &lt;p&gt;Immutant is an integrated suite of &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;
      libraries backed by &lt;a href=&quot;http://undertow.io&quot;&gt;Undertow&lt;/a&gt; for web, &lt;a href=&quot;http://hornetq.org&quot;&gt;HornetQ&lt;/a&gt; for messaging,
      &lt;a href=&quot;http://infinispan.org&quot;&gt;Infinispan&lt;/a&gt; for caching, &lt;a href=&quot;http://quartz-scheduler.org/&quot;&gt;Quartz&lt;/a&gt; for scheduling, and &lt;a href=&quot;http://www.jboss.org/narayana&quot;&gt;Narayana&lt;/a&gt; for
      transactions. Applications built with Immutant can optionally be
      deployed to a &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; cluster for enhanced features. Its fundamental
      goal is to reduce the inherent
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Accidental_complexity&quot;&gt;incidental complexity&lt;/a&gt;
      in real world applications.&lt;/p&gt;
      
      &lt;h2&gt;What's changed in this release?&lt;/h2&gt;
      
      &lt;p&gt;The only change in this release since &lt;a href=&quot;/news/2015/04/13/announcing-2-beta3/&quot;&gt;beta3&lt;/a&gt; is a fix for a &lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-557&quot;&gt;race
      condition&lt;/a&gt; in scheduling that generally only manifests on slow
      systems.&lt;/p&gt;
      
      &lt;h2&gt;How to try it&lt;/h2&gt;
      
      &lt;p&gt;There is no longer any &quot;installation&quot; step as there was in 1.x. Simply
      add the relevant dependency to your project as shown on &lt;a href=&quot;https://clojars.org/org.immutant/immutant&quot;&gt;Clojars&lt;/a&gt;. See
      the &lt;a href=&quot;/documentation/2.0.0/apidoc/guide-installation.html&quot;&gt;installation guide&lt;/a&gt; for more details.&lt;/p&gt;
      
      &lt;p&gt;The guides included in the &lt;a href=&quot;/documentation/2.0.0/apidoc/&quot;&gt;apidoc&lt;/a&gt; are the best source of
      information, and our &lt;a href=&quot;https://github.com/immutant/feature-demo&quot;&gt;Feature Demo&lt;/a&gt; application provides working code
      samples demonstrating all the Immutant namespaces. Its &lt;code&gt;README&lt;/code&gt;
      includes simple instructions for getting started at a REPL or command
      line, packaging and various deployment options, e.g. a standalone
      &quot;uberjar&quot;, a &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; cluster, Heroku and OpenShift.&lt;/p&gt;
      
      &lt;p&gt;If you're already familiar with Immutant 1.x, you should probably take
      a look at our &lt;a href=&quot;/documentation/2.0.0/apidoc/guide-migration.html&quot;&gt;migration guide&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;If you have any questions, issues, or other feedback about Immutant,
      you can always find us on &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/mailing_lists&quot;&gt;our mailing lists&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2015/04/13/announcing-2-beta3/</id>
    <title>Immutant 2 (The Deuce) Beta3 Released</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2015-04-13T00:00:00+00:00</published>
    <link href="/news/2015/04/13/announcing-2-beta3/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="releases"></category>
    <summary>
      We&#39;re
      as excited as this puppy
      to announce The Deuce&#39;s very last (we hope!) beta release: Immutant
      2.0.0-beta3! We intend to release our final 2.0.0 next Monday
      during Clojure/West.
      
      We would appreciate all interested parties to try out this release and
      submit whatever issues you find ASAP. And, as always, big thanks to
      all our early adopters who provided invaluable feedback on the alpha,
      beta, and incremental releases.
      
      What is Immutant?
      
      Immutant is an integrated suite of Clojure
      libraries backed by Undertow for web, HornetQ for messaging,
      Infinispan for caching, Quartz for scheduling, and Narayana for
      transactions. Applications built with Immutant can optionally be
      deployed to a WildFly cluster for enhanced features. Its fundamental
      goal...
    </summary>
    <content type="html">
      &lt;p&gt;We're
      &lt;a href=&quot;https://www.youtube.com/watch?v=rncPvrUCvBE&quot;&gt;as excited as this puppy&lt;/a&gt;
      to announce &lt;em&gt;The Deuce's&lt;/em&gt; very last (we hope!) beta release: Immutant
      &lt;strong&gt;2.0.0-beta3&lt;/strong&gt;! We intend to release our final &lt;strong&gt;2.0.0&lt;/strong&gt; next Monday
      during &lt;a href=&quot;http://clojurewest.org/&quot;&gt;Clojure/West&lt;/a&gt;.&lt;/p&gt;
      
      &lt;p&gt;We would appreciate all interested parties to try out this release and
      submit whatever issues you find ASAP. And, as always, big thanks to
      all our early adopters who provided invaluable feedback on the alpha,
      beta, and incremental releases.&lt;/p&gt;
      
      &lt;h2&gt;What is Immutant?&lt;/h2&gt;
      
      &lt;p&gt;Immutant is an integrated suite of &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;
      libraries backed by &lt;a href=&quot;http://undertow.io&quot;&gt;Undertow&lt;/a&gt; for web, &lt;a href=&quot;http://hornetq.org&quot;&gt;HornetQ&lt;/a&gt; for messaging,
      &lt;a href=&quot;http://infinispan.org&quot;&gt;Infinispan&lt;/a&gt; for caching, &lt;a href=&quot;http://quartz-scheduler.org/&quot;&gt;Quartz&lt;/a&gt; for scheduling, and &lt;a href=&quot;http://www.jboss.org/narayana&quot;&gt;Narayana&lt;/a&gt; for
      transactions. Applications built with Immutant can optionally be
      deployed to a &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; cluster for enhanced features. Its fundamental
      goal is to reduce the inherent
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Accidental_complexity&quot;&gt;incidental complexity&lt;/a&gt;
      in real world applications.&lt;/p&gt;
      
      &lt;h2&gt;What's changed in this release?&lt;/h2&gt;
      
      &lt;p&gt;We have quite a few fixes in this release, as well as changes to a few
      things in the API that we wanted to get right before 2.0.0. The
      notable API changes are:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;The concurrency for queue &lt;a href=&quot;/documentation/2.0.0-beta3/apidoc/immutant.messaging.html#var-listen&quot;&gt;listeners&lt;/a&gt; now defaults to the number of
      cores to provide better messaging throughput out of the box (it was
      1). The default for topic listeners remains at 1.&lt;/li&gt;
      &lt;li&gt;The &lt;code&gt;:subscription-name&lt;/code&gt; option to &lt;a href=&quot;/documentation/2.0.0-beta3/apidoc/immutant.messaging.html#var-context&quot;&gt;immutant.messaging/context&lt;/a&gt; has
      been renamed to &lt;code&gt;:client-id&lt;/code&gt; to remove confusion with the
      &lt;code&gt;:subscription-name&lt;/code&gt; option to &lt;a href=&quot;/documentation/2.0.0-beta3/apidoc/immutant.messaging.html#var-subscribe&quot;&gt;immutant.messaging/subscribe&lt;/a&gt;. Both
      are only used for durable topic subscribers.&lt;/li&gt;
      &lt;li&gt;
      &lt;a href=&quot;/documentation/2.0.0-beta3/apidoc/immutant.messaging.pipeline.html#var-pipeline&quot;&gt;immutant.messaging.pipeline/pipeline&lt;/a&gt; error handlers now get passed
      the decoded message instead of the &lt;code&gt;Message&lt;/code&gt; object, and there is
      now a &lt;a href=&quot;/documentation/2.0.0-beta3/apidoc/immutant.messaging.pipeline.html#var-retry&quot;&gt;immutant.messaging.pipeline/retry&lt;/a&gt; function to ease
      retrying messages from the error handler.&lt;/li&gt;
      &lt;li&gt;You can now set the headers and status of an async HTTP channel
      response when calling &lt;a href=&quot;/documentation/2.0.0-beta3/apidoc/immutant.web.async.html#var-send.21&quot;&gt;immutant.web.async/send!&lt;/a&gt;. You can also now
      provide any valid Ring body type in addition to &lt;code&gt;String&lt;/code&gt; and
      &lt;code&gt;byte[]&lt;/code&gt; to &lt;code&gt;send!&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;The &lt;code&gt;:on-complete&lt;/code&gt; option to &lt;code&gt;immutant.web.async/send!&lt;/code&gt; has been
      replaced with two separate callback options: &lt;code&gt;:on-success&lt;/code&gt; and
      &lt;code&gt;:on-error&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;
      &lt;a href=&quot;/documentation/2.0.0-beta3/apidoc/immutant.transactions.html#var-manager&quot;&gt;immutant.transactions/manager&lt;/a&gt; is now a function instead of a
      value. If you were using the manager directly, you'll now need to
      invoke it.&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;For a full list of changes, see the issue list below.&lt;/p&gt;
      
      &lt;h2&gt;lein-immutant 2.0.0&lt;/h2&gt;
      
      &lt;p&gt;We've moved &lt;a href=&quot;https://github.com/immutant/lein-immutant/&quot;&gt;lein-immutant&lt;/a&gt; out of beta. The only changes in 2.0.0
      over 2.0.0-beta1 are:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;
      &lt;code&gt;lein immutant war&lt;/code&gt; now properly honors a &lt;code&gt;:main&lt;/code&gt; that points to a
      fully-qualified function in addition to a namespace&lt;/li&gt;
      &lt;li&gt;The &lt;code&gt;test&lt;/code&gt; profile is now active when running &lt;code&gt;lein immutant test&lt;/code&gt;
      &lt;/li&gt;
      &lt;/ul&gt;&lt;h2&gt;How to try it&lt;/h2&gt;
      
      &lt;p&gt;If you're already familiar with Immutant 1.x, you should take a look
      at our &lt;a href=&quot;/documentation/2.0.0-beta3/apidoc/guide-migration.html&quot;&gt;migration guide&lt;/a&gt;. It's our attempt at keeping track of what we
      changed in the Clojure namespaces.&lt;/p&gt;
      
      &lt;p&gt;The guides are another good source of information, along with the
      rest of the &lt;a href=&quot;/documentation/2.0.0-beta3/apidoc/&quot;&gt;apidoc&lt;/a&gt;.&lt;/p&gt;
      
      &lt;p&gt;For a working example, check out our &lt;a href=&quot;https://github.com/immutant/feature-demo&quot;&gt;Feature Demo&lt;/a&gt; application!&lt;/p&gt;
      
      &lt;h2&gt;Get It&lt;/h2&gt;
      
      &lt;p&gt;There is no longer any &quot;installation&quot; step as there was in 1.x. Simply
      add the relevant dependency to your project as shown on &lt;a href=&quot;https://clojars.org/org.immutant/immutant&quot;&gt;Clojars&lt;/a&gt;. See
      the &lt;a href=&quot;/documentation/2.0.0-beta3/apidoc/guide-installation.html&quot;&gt;installation guide&lt;/a&gt; for more details.&lt;/p&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;If you have any questions, issues, or other feedback about Immutant,
      you can always find us on &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/mailing_lists&quot;&gt;our mailing lists&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Issues resolved in 2.0.0-beta3&lt;/h2&gt;
      
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-261&quot;&gt;IMMUTANT-261&lt;/a&gt;] -         add cluster tests&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-360&quot;&gt;IMMUTANT-360&lt;/a&gt;] -         Consider defaulting listener :concurrency based on the number of cores&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-514&quot;&gt;IMMUTANT-514&lt;/a&gt;] -         Notes for improving the migration guide&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-525&quot;&gt;IMMUTANT-525&lt;/a&gt;] -         wrap-resource from ring 1.3.2 breaks requests to / in WildFly&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-527&quot;&gt;IMMUTANT-527&lt;/a&gt;] -         Session cookie attributes ignored in-container&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-528&quot;&gt;IMMUTANT-528&lt;/a&gt;] -         Update docs to cover the whys and hows of destination creation in WF&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-529&quot;&gt;IMMUTANT-529&lt;/a&gt;] -         Websocket On-Close is Not Called in All Cases&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-531&quot;&gt;IMMUTANT-531&lt;/a&gt;] -         Expose Undertow's AJP listener&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-532&quot;&gt;IMMUTANT-532&lt;/a&gt;] -         HTTP streams close after 30 seconds inside WildFly&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-533&quot;&gt;IMMUTANT-533&lt;/a&gt;] -         ring request maps fail when used with clojure.core/find&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-534&quot;&gt;IMMUTANT-534&lt;/a&gt;] -         Fix web/run options when they are passed as strings (ala lein run)&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-535&quot;&gt;IMMUTANT-535&lt;/a&gt;] -         Completed scheduled jobs never go away&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-536&quot;&gt;IMMUTANT-536&lt;/a&gt;] -         WildFly module should transitively depend on tools.nrepl&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-537&quot;&gt;IMMUTANT-537&lt;/a&gt;] -         request/response times out when used against multiple remote servers with the same queue name&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-538&quot;&gt;IMMUTANT-538&lt;/a&gt;] -         Review guides before release&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-539&quot;&gt;IMMUTANT-539&lt;/a&gt;] -         Multiple schedulers with different options cannot be created&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-540&quot;&gt;IMMUTANT-540&lt;/a&gt;] -         Expose internal quartz scheduler&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-543&quot;&gt;IMMUTANT-543&lt;/a&gt;] -         :on-close callback for web.async channel not firing when client disappears&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-544&quot;&gt;IMMUTANT-544&lt;/a&gt;] -         Throw when immutant.messaging.hornetq/set-address-settings is called in-container&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-545&quot;&gt;IMMUTANT-545&lt;/a&gt;] -         Rename msg/context's :subscription-name back to :client-id&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-546&quot;&gt;IMMUTANT-546&lt;/a&gt;] -         Calling immutant.scheduling/stop with no args throws NPE&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-547&quot;&gt;IMMUTANT-547&lt;/a&gt;] -         Allow setting status and headers from async/send!&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-548&quot;&gt;IMMUTANT-548&lt;/a&gt;] -         Transactions don't work from an uberjar&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-549&quot;&gt;IMMUTANT-549&lt;/a&gt;] -         Allow sending ring bodies to channels&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-550&quot;&gt;IMMUTANT-550&lt;/a&gt;] -         Replace :on-complete with :on-success &amp;amp; :on-error for async/send!&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-553&quot;&gt;IMMUTANT-553&lt;/a&gt;] -         Don't create a transaction manager at compile time&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-554&quot;&gt;IMMUTANT-554&lt;/a&gt;] -         Concurrent ws requests can cause a channel to be used for multiple clients in-container&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-555&quot;&gt;IMMUTANT-555&lt;/a&gt;] -         pipeline error-handlers should be passed the decoded mesage&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-556&quot;&gt;IMMUTANT-556&lt;/a&gt;] -         pipeline error-handlers should be able to retry a message and still deliver to the caller's future&lt;/li&gt;
      &lt;/ul&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2015/04/02/survey-results/</id>
    <title>Survey Results</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2015-04-02T00:00:00+00:00</published>
    <link href="/news/2015/04/02/survey-results/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="web"></category>
    <category term="survey"></category>
    <summary>
      A few weeks ago, we put out a short survey to gather information about
      how the community is actually using Immutant. We&#39;d like to share our
      take on the
      results.
      
      But first things first: THANK YOU! Time is currency in open-source,
      and we appreciate the 62 of you who spent a little of it feeding back
      your Immutant experience to us.
      
      Given the small sample size and the non-rigorous approach we took to
      developing the questions, we can&#39;t really draw any statistically
      significant conclusions, but we can possibly get a general feel of the
      community.
      
      Noteworthy items include:
      
      
      It appears we need to do a bit better job of communicating the
      improvements of...
    </summary>
    <content type="html">
      &lt;p&gt;A few weeks ago, we put out a short survey to gather information about
      how the community is actually using Immutant. We'd like to share our
      take on the
      &lt;a href=&quot;https://docs.google.com/forms/d/1oDC6dOeNnpBWV2RCYkfporz0-KAYRNpYyCFu3wCsk2s/viewanalytics&quot;&gt;results&lt;/a&gt;.&lt;/p&gt;
      
      &lt;p&gt;But first things first: &lt;strong&gt;THANK YOU!&lt;/strong&gt; Time is currency in open-source,
      and we appreciate the 62 of you who spent a little of it feeding back
      your Immutant experience to us.&lt;/p&gt;
      
      &lt;p&gt;Given the small sample size and the non-rigorous approach we took to
      developing the questions, we can't really draw any statistically
      significant conclusions, but we can possibly get a general feel of the
      community.&lt;/p&gt;
      
      &lt;p&gt;Noteworthy items include:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;&lt;p&gt;It appears we need to do a bit better job of communicating the
      improvements of 2.x over 1.x. Of the minority of folks who evaluated
      Immutant and decided to use something else, most of them either
      hadn't actually used it or had only used 1.x. So we mayhap have some
      opportunity there.&lt;/p&gt;&lt;/li&gt;
      &lt;li&gt;&lt;p&gt;There is a good bit of interest in clustering and a fairly high
      number of deployments to internal data centers. Those two are likely
      related. Immutant 2 is far more &quot;cloud friendly&quot; than its
      predecessor since it contains no app server, only libraries, so we
      may see more publicly-hosted deployments in the future.&lt;/p&gt;&lt;/li&gt;
      &lt;li&gt;&lt;p&gt;Almost as many 2.x deployments in production as 1.x, even though 2.x
      is still in beta. We're going to chalk this up to the fact that
      1) 2.x has been pretty stable over the course of its &lt;em&gt;VERY&lt;/em&gt; long
      beta cycle, and b) 2.x is simpler than 1.x.&lt;/p&gt;&lt;/li&gt;
      &lt;li&gt;&lt;p&gt;Of the folks that have used 2.x, almost as many have used it in
      WildFly as have embedded, which surprised us. We expected a larger
      percentage to be embedded users. It may be that some of the WildFly
      users came from 1.x, and appreciate the value of the container and
      clustering.&lt;/p&gt;&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;Take a gander at the
      &lt;a href=&quot;https://docs.google.com/forms/d/1oDC6dOeNnpBWV2RCYkfporz0-KAYRNpYyCFu3wCsk2s/viewanalytics&quot;&gt;the full results of the survey&lt;/a&gt;
      if you are so inclined.&lt;/p&gt;
      
      &lt;h2&gt;Final Finally&lt;/h2&gt;
      
      &lt;p&gt;2.0.0.Final is &lt;em&gt;imminent&lt;/em&gt;! We're pretty excited about that! :)&lt;/p&gt;
      
      &lt;p&gt;As always, if you have any questions, comments, or issues with regards
      to Immutant, &lt;a href=&quot;/community&quot;&gt;let us know&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2015/03/06/survey-etc/</id>
    <title>Survey, etc</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2015-03-06T00:00:00+00:00</published>
    <link href="/news/2015/03/06/survey-etc/" rel="alternate" type="text/html" />
    <author>
      <name>Jim Crossley</name>
    </author>
    <category term="web"></category>
    <category term="survey"></category>
    <category term="luminus"></category>
    <summary>
      Just a few quick notes on recent Immutant happenings...
      
      Survey
      
      Yesterday we published a short survey to
      help us gauge how folks have been using Immutant. Please take a few
      moments to complete it if you haven&#39;t already.
      
      Luminus
      
      The Luminus web toolkit now includes an
      Immutant profile in its
      Leiningen project template, so you can now do this:
      
      $ lein new luminus yourapp +immutant
      $ cd yourapp
      $ lein run -dev
      
      
      That -dev option is triggering the use of
      immutant.web/run-dmc
      instead of
      immutant.web/run
      so it should plop you in your browser with code-reloading enabled. You
      can pass most of the other run options on the command line as well,
      e.g.
      
      $ lein run port 3000
      
      
      Beta2 bugs
      
      In our last...
    </summary>
    <content type="html">
      &lt;p&gt;Just a few quick notes on recent Immutant happenings...&lt;/p&gt;
      
      &lt;h3&gt;Survey&lt;/h3&gt;
      
      &lt;p&gt;Yesterday we published a &lt;a href=&quot;http://t.co/EmWguwQvXh&quot;&gt;short survey&lt;/a&gt; to
      help us gauge how folks have been using Immutant. Please take a few
      moments to complete it if you haven't already.&lt;/p&gt;
      
      &lt;h3&gt;Luminus&lt;/h3&gt;
      
      &lt;p&gt;The &lt;a href=&quot;http://www.luminusweb.net/&quot;&gt;Luminus&lt;/a&gt; web toolkit now includes an
      Immutant &lt;a href=&quot;http://www.luminusweb.net/docs/profiles.md&quot;&gt;profile&lt;/a&gt; in its
      Leiningen project template, so you can now do this:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;$ lein new luminus yourapp +immutant
      $ cd yourapp
      $ lein run -dev
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;That &lt;code&gt;-dev&lt;/code&gt; option is triggering the use of
      &lt;a href=&quot;/documentation/current/apidoc/immutant.web.html#var-run-dmc&quot;&gt;immutant.web/run-dmc&lt;/a&gt;
      instead of
      &lt;a href=&quot;/documentation/current/apidoc/immutant.web.html#var-run&quot;&gt;immutant.web/run&lt;/a&gt;
      so it should plop you in your browser with code-reloading enabled. You
      can pass most of the other &lt;code&gt;run&lt;/code&gt; options on the command line as well,
      e.g.&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;$ lein run port 3000
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;h3&gt;Beta2 bugs&lt;/h3&gt;
      
      &lt;p&gt;In our last release,
      &lt;a href=&quot;/news/2015/02/09/announcing-2-beta2/&quot;&gt;2.0.0-beta2&lt;/a&gt;, we updated our
      dependency on the excellent
      &lt;a href=&quot;https://github.com/ztellman/potemkin&quot;&gt;potemkin&lt;/a&gt; library to
      version 0.3.11. Unfortunately, that exposed
      &lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-533&quot;&gt;a bug&lt;/a&gt; whenever
      &lt;code&gt;clojure.core/find&lt;/code&gt; was used on our Ring request map. Fortunately, it
      was already fixed in potemkin's HEAD, and Zach was kind enough to
      release 0.3.12. We've bumped up to that in our
      &lt;a href=&quot;/builds/2x/&quot;&gt;incrementals&lt;/a&gt; and hence our next
      release.&lt;/p&gt;
      
      &lt;p&gt;We've also fixed a
      &lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-532&quot;&gt;thing&lt;/a&gt; or
      &lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-529&quot;&gt;two&lt;/a&gt; to improve async
      support when running inside WildFly.&lt;/p&gt;
      
      &lt;h3&gt;Plans&lt;/h3&gt;
      
      &lt;p&gt;We're still hoping to release 2.0.0-Final within a month or so. Now
      would be a great time to kick the tires on beta2 or the latest
      incremental to ensure it's solid when we do!&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2015/02/09/announcing-2-beta2/</id>
    <title>Immutant 2 (The Deuce) Beta2 Released</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2015-02-09T00:00:00+00:00</published>
    <link href="/news/2015/02/09/announcing-2-beta2/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="releases"></category>
    <summary>
      We&#39;re just bananas to
      announce The Deuce&#39;s second beta: Immutant 2.0.0-beta2. At this
      point, we feel pretty good about the stability of the API, the
      performance, and the compatibility with both WildFly 8 and the
      forthcoming WildFly 9.
      
      We expect a final release before spring (in the Northern
      Hemisphere). We would appreciate all interested parties to try out
      this release and submit whatever issues you find. And again, big
      thanks to all our early adopters who provided invaluable feedback on
      the alpha, beta, and incremental releases.
      
      What is Immutant?
      
      Immutant is an integrated suite of Clojure
      libraries backed by Undertow for web, HornetQ for messaging,
      Infinispan for caching, Quartz for scheduling, and Narayana...
    </summary>
    <content type="html">
      &lt;p&gt;We're &lt;a href=&quot;https://www.youtube.com/watch?v=nTqn72B2Ajk&quot;&gt;just bananas&lt;/a&gt; to
      announce &lt;em&gt;The Deuce's&lt;/em&gt; second beta: Immutant &lt;strong&gt;2.0.0-beta2&lt;/strong&gt;. At this
      point, we feel pretty good about the stability of the API, the
      performance, and the compatibility with both WildFly 8 and the
      forthcoming WildFly 9.&lt;/p&gt;
      
      &lt;p&gt;We expect a final release before spring (in the Northern
      Hemisphere). We would appreciate all interested parties to try out
      this release and submit whatever issues you find. And again, big
      thanks to all our early adopters who provided invaluable feedback on
      the alpha, beta, and incremental releases.&lt;/p&gt;
      
      &lt;h2&gt;What is Immutant?&lt;/h2&gt;
      
      &lt;p&gt;Immutant is an integrated suite of &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;
      libraries backed by &lt;a href=&quot;http://undertow.io&quot;&gt;Undertow&lt;/a&gt; for web, &lt;a href=&quot;http://hornetq.org&quot;&gt;HornetQ&lt;/a&gt; for messaging,
      &lt;a href=&quot;http://infinispan.org&quot;&gt;Infinispan&lt;/a&gt; for caching, &lt;a href=&quot;http://quartz-scheduler.org/&quot;&gt;Quartz&lt;/a&gt; for scheduling, and &lt;a href=&quot;http://www.jboss.org/narayana&quot;&gt;Narayana&lt;/a&gt; for
      transactions. Applications built with Immutant can optionally be
      deployed to a &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; cluster for enhanced features. Its fundamental
      goal is to reduce the inherent
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Accidental_complexity&quot;&gt;incidental complexity&lt;/a&gt;
      in real world applications.&lt;/p&gt;
      
      &lt;h2&gt;What's changed in this release?&lt;/h2&gt;
      
      &lt;p&gt;The biggest change in this release is a &lt;a href=&quot;/documentation/2.0.0-beta2/apidoc/immutant.web.async.html&quot;&gt;new API&lt;/a&gt; for communicating
      with web clients asynchronously, either via an &lt;a href=&quot;http://en.wikipedia.org/wiki/Chunked_transfer_encoding&quot;&gt;HTTP stream&lt;/a&gt;, over a
      &lt;a href=&quot;http://en.wikipedia.org/wiki/WebSocket&quot;&gt;WebSocket&lt;/a&gt;, or using &lt;a href=&quot;http://www.w3.org/TR/eventsource/&quot;&gt;Server-Sent Events&lt;/a&gt;. As part of this change,
      the &lt;code&gt;immutant.web.websocket&lt;/code&gt; namespace has been removed, but
      &lt;code&gt;wrap-websocket&lt;/code&gt; still exists, and has been moved to
      &lt;a href=&quot;/documentation/2.0.0-beta2/apidoc/immutant.web.middleware.html&quot;&gt;immutant.web.middleware&lt;/a&gt;. For more details, see the &lt;a href=&quot;http://immutant.org/documentation/2.0.0-beta2/apidoc/guide-web.html&quot;&gt;web guide&lt;/a&gt;.&lt;/p&gt;
      
      &lt;p&gt;In conjunction with this new API, we've submitted changes to &lt;a href=&quot;https://github.com/ptaoussanis/sente&quot;&gt;Sente&lt;/a&gt;
      that will allow you to use its next release with Immutant.&lt;/p&gt;
      
      &lt;p&gt;For a full list of changes, see the issue list below.&lt;/p&gt;
      
      &lt;h2&gt;How to try it&lt;/h2&gt;
      
      &lt;p&gt;If you're already familiar with Immutant 1.x, you should take a look
      at our &lt;a href=&quot;/documentation/2.0.0-beta2/apidoc/guide-migration.html&quot;&gt;migration guide&lt;/a&gt;. It's our attempt at keeping track of what we
      changed in the Clojure namespaces.&lt;/p&gt;
      
      &lt;p&gt;The guides are another good source of information, along with the
      rest of the &lt;a href=&quot;/documentation/2.0.0-beta2/apidoc/&quot;&gt;apidoc&lt;/a&gt;.&lt;/p&gt;
      
      &lt;p&gt;For a working example, check out our &lt;a href=&quot;https://github.com/immutant/feature-demo&quot;&gt;Feature Demo&lt;/a&gt; application!&lt;/p&gt;
      
      &lt;h2&gt;Get It&lt;/h2&gt;
      
      &lt;p&gt;There is no longer any &quot;installation&quot; step as there was in 1.x. Simply
      add the relevant dependency to your project as shown on &lt;a href=&quot;https://clojars.org/org.immutant/immutant&quot;&gt;Clojars&lt;/a&gt;. See
      the &lt;a href=&quot;/documentation/2.0.0-beta2/apidoc/guide-installation.html&quot;&gt;installation guide&lt;/a&gt; for more details.&lt;/p&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;If you have any questions, issues, or other feedback about Immutant,
      you can always find us on &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/mailing_lists&quot;&gt;our mailing lists&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Issues resolved in 2.0.0-beta2&lt;/h2&gt;
      
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-439&quot;&gt;IMMUTANT-439&lt;/a&gt;] -         Provide SSE support in web&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-515&quot;&gt;IMMUTANT-515&lt;/a&gt;] -         Add :servlet-name to the options for run to give the servlet a meaningful name&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-517&quot;&gt;IMMUTANT-517&lt;/a&gt;] -         Allow undertow-specific options to be passed directly to web/run&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-518&quot;&gt;IMMUTANT-518&lt;/a&gt;] -         Error logged for every websocket/send!&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-520&quot;&gt;IMMUTANT-520&lt;/a&gt;] -         WunderBoss Options don't load properly under clojure 1.7.0&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-521&quot;&gt;IMMUTANT-521&lt;/a&gt;] -         Add API for async channels&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-524&quot;&gt;IMMUTANT-524&lt;/a&gt;] -         immutant.web/run no longer accepts a Var as the handler&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-526&quot;&gt;IMMUTANT-526&lt;/a&gt;] -         Improve the docs for messaging/subscribe to clarify subscription-name&lt;/li&gt;
      &lt;/ul&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2014/11/20/announcing-2-beta1/</id>
    <title>Immutant 2 (The Deuce) Beta1 Released</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2014-11-20T00:00:00+00:00</published>
    <link href="/news/2014/11/20/announcing-2-beta1/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="releases"></category>
    <summary>
      We&#39;re as happy as
      two punk accordion clapping nuns
      to announce The Deuce&#39;s transition from &quot;alpha&quot; to &quot;beta&quot;: Immutant
      2.0.0-beta1. At this point, we feel pretty good about the
      stability of the API, the performance, and the compatibility with both
      WildFly 8 and the forthcoming WildFly 9.
      
      We expect a final release shortly after WF 9 is official. We would
      appreciate all interested parties to try out this release and submit
      whatever issues you find. And again, big thanks to all our early
      adopters who provided invaluable feedback on the alpha and incremental
      releases.
      
      What is Immutant?
      
      Immutant is an integrated suite of Clojure
      libraries backed by Undertow for web, HornetQ for messaging,
      Infinispan...
    </summary>
    <content type="html">
      &lt;p&gt;We're as happy as
      &lt;a href=&quot;https://www.youtube.com/watch?v=q0P0EvJOfRQ&quot;&gt;two punk accordion clapping nuns&lt;/a&gt;
      to announce &lt;em&gt;The Deuce's&lt;/em&gt; transition from &quot;alpha&quot; to &quot;beta&quot;: Immutant
      &lt;strong&gt;2.0.0-beta1&lt;/strong&gt;. At this point, we feel pretty good about the
      stability of the API, the performance, and the compatibility with both
      WildFly 8 and the forthcoming WildFly 9.&lt;/p&gt;
      
      &lt;p&gt;We expect a final release shortly after WF 9 is official. We would
      appreciate all interested parties to try out this release and submit
      whatever issues you find. And again, big thanks to all our early
      adopters who provided invaluable feedback on the alpha and incremental
      releases.&lt;/p&gt;
      
      &lt;h2&gt;What is Immutant?&lt;/h2&gt;
      
      &lt;p&gt;Immutant is an integrated suite of &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;
      libraries backed by &lt;a href=&quot;http://undertow.io&quot;&gt;Undertow&lt;/a&gt; for web, &lt;a href=&quot;http://hornetq.org&quot;&gt;HornetQ&lt;/a&gt; for messaging,
      &lt;a href=&quot;http://infinispan.org&quot;&gt;Infinispan&lt;/a&gt; for caching, &lt;a href=&quot;http://quartz-scheduler.org/&quot;&gt;Quartz&lt;/a&gt; for scheduling, and &lt;a href=&quot;http://www.jboss.org/narayana&quot;&gt;Narayana&lt;/a&gt; for
      transactions. Applications built with Immutant can optionally be
      deployed to a &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; cluster for enhanced features. Its fundamental
      goal is to reduce the inherent
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Accidental_complexity&quot;&gt;incidental complexity&lt;/a&gt;
      in real world applications.&lt;/p&gt;
      
      &lt;h2&gt;What's changed in this release?&lt;/h2&gt;
      
      &lt;p&gt;Bug fixes and docs, of course, plus:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;Infinispan provides a robust notifications API, invoking callback
      functions in response to various types of events occurring within a
      cache's lifecycle. Unfortunately, this API is exposed exclusively
      through Java annotations, which can be awkward in more dynamic JVM
      languages like Clojure. So we introduced
      &lt;code&gt;immutant.caching/add-listener!&lt;/code&gt; as a means to engage the
      notifications API using keywords instead of annotations.&lt;/li&gt;
      &lt;li&gt;By default, Immutant's embedded &lt;a href=&quot;http://undertow.io&quot;&gt;Undertow&lt;/a&gt; web server dispatches
      requests across a pool of worker threads, but this can adversely
      impact performance for compute-bound handlers. So we introduced a
      &lt;code&gt;:dispatch?&lt;/code&gt; option for &lt;code&gt;immutant.web/run&lt;/code&gt; that, when false, avoids
      the context switch by invoking the handler on the IO thread
      accepting the request.&lt;/li&gt;
      &lt;li&gt;Configuration of the cookie identifying session data is now
      supported by the &lt;code&gt;immutant.web.middleware/wrap-session&lt;/code&gt; function.&lt;/li&gt;
      &lt;li&gt;Boolean options to all functions should be consistently suffixed
      with &lt;code&gt;?&lt;/code&gt; now.&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;For a full list of changes, see the issue list below.&lt;/p&gt;
      
      &lt;h2&gt;How to try it&lt;/h2&gt;
      
      &lt;p&gt;If you're already familiar with Immutant 1.x, you should take a look
      at our &lt;a href=&quot;/documentation/2.0.0-beta1/apidoc/guide-migration.html&quot;&gt;migration guide&lt;/a&gt;. It's our attempt at keeping track of what we
      changed in the Clojure namespaces.&lt;/p&gt;
      
      &lt;p&gt;The guides are another good source of information, along with the
      rest of the &lt;a href=&quot;/documentation/2.0.0-beta1/apidoc/&quot;&gt;apidoc&lt;/a&gt;.&lt;/p&gt;
      
      &lt;p&gt;For a working example, check out our &lt;a href=&quot;https://github.com/immutant/feature-demo&quot;&gt;Feature Demo&lt;/a&gt; application!&lt;/p&gt;
      
      &lt;h2&gt;Get It&lt;/h2&gt;
      
      &lt;p&gt;There is no longer any &quot;installation&quot; step as there was in 1.x. Simply
      add the relevant dependency to your project as shown on &lt;a href=&quot;https://clojars.org/org.immutant/immutant&quot;&gt;Clojars&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;What's next?&lt;/h2&gt;
      
      &lt;p&gt;We expect to have a fairly short beta cycle, with a final release once
      we ensure that everything works well with the upcoming WildFly 9
      release.&lt;/p&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;If you have any questions, issues, or other feedback about Immutant,
      you can always find us on &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/mailing_lists&quot;&gt;our mailing lists&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Issues resolved in 2.0.0-beta1&lt;/h2&gt;
      
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-399&quot;&gt;IMMUTANT-399&lt;/a&gt;] -         Add listeners interface for InfiniSpan caches&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-468&quot;&gt;IMMUTANT-468&lt;/a&gt;] -         Records can't be sent over pipeline when embedded, but work in-container&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-503&quot;&gt;IMMUTANT-503&lt;/a&gt;] -         Figure out what we're missing from our poms that clojars promotion expects&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-504&quot;&gt;IMMUTANT-504&lt;/a&gt;] -         :context passed to msg/topic is ignored&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-505&quot;&gt;IMMUTANT-505&lt;/a&gt;] -         immutant.wildfly causes wildlfly deploy to fail&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-506&quot;&gt;IMMUTANT-506&lt;/a&gt;] -         Set the character encoding correctly for response content&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-507&quot;&gt;IMMUTANT-507&lt;/a&gt;] -         Add option to run compute-bound handlers on IO thread&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-508&quot;&gt;IMMUTANT-508&lt;/a&gt;] -         immutant.web.middleware/wrap-session misbehaves outside of server context&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-510&quot;&gt;IMMUTANT-510&lt;/a&gt;] -         Consider adding more options to immutant.web.middleware/wrap-session&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-511&quot;&gt;IMMUTANT-511&lt;/a&gt;] -         Catch errors from browse-url in run-dmc&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-512&quot;&gt;IMMUTANT-512&lt;/a&gt;] -         Make the usage of ?-suffixed keywords for boolean options consistent&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-513&quot;&gt;IMMUTANT-513&lt;/a&gt;] -         add section about context modes to messaging guide&lt;/li&gt;
      &lt;/ul&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2014/10/23/announcing-2-alpha2/</id>
    <title>Immutant 2 (The Deuce) Alpha2 Released</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2014-10-23T00:00:00+00:00</published>
    <link href="/news/2014/10/23/announcing-2-alpha2/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="releases"></category>
    <summary>
      We&#39;re as happy as
      a cat getting vacuumed
      to announce our second alpha release of The Deuce, Immutant
      2.0.0-alpha2.
      
      Big, special thanks to all our early adopters who provided invaluable
      feedback on alpha1 and our incremental releases.
      
      What is Immutant?
      
      Immutant is an integrated suite of Clojure
      libraries backed by Undertow for web, HornetQ for messaging,
      Infinispan for caching, Quartz for scheduling, and Narayana for
      transactions. Applications built with Immutant can optionally be
      deployed to a WildFly cluster for enhanced features. Its fundamental
      goal is to reduce the inherent
      incidental complexity
      in real world applications.
      
      A few highlights of The Deuce compared to the previous 1.x series:
      
      
      It uses the Undertow web server -- it&#39;s much...
    </summary>
    <content type="html">
      &lt;p&gt;We're as happy as
      &lt;a href=&quot;https://www.youtube.com/watch?v=mrlkXEDGpIc&quot;&gt;a cat getting vacuumed&lt;/a&gt;
      to announce our second alpha release of &lt;em&gt;The Deuce&lt;/em&gt;, Immutant
      &lt;strong&gt;2.0.0-alpha2&lt;/strong&gt;.&lt;/p&gt;
      
      &lt;p&gt;Big, special thanks to all our early adopters who provided invaluable
      feedback on alpha1 and our incremental releases.&lt;/p&gt;
      
      &lt;h2&gt;What is Immutant?&lt;/h2&gt;
      
      &lt;p&gt;Immutant is an integrated suite of &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;
      libraries backed by &lt;a href=&quot;http://undertow.io&quot;&gt;Undertow&lt;/a&gt; for web, &lt;a href=&quot;http://hornetq.org&quot;&gt;HornetQ&lt;/a&gt; for messaging,
      &lt;a href=&quot;http://infinispan.org&quot;&gt;Infinispan&lt;/a&gt; for caching, &lt;a href=&quot;http://quartz-scheduler.org/&quot;&gt;Quartz&lt;/a&gt; for scheduling, and &lt;a href=&quot;http://www.jboss.org/narayana&quot;&gt;Narayana&lt;/a&gt; for
      transactions. Applications built with Immutant can optionally be
      deployed to a &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; cluster for enhanced features. Its fundamental
      goal is to reduce the inherent
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Accidental_complexity&quot;&gt;incidental complexity&lt;/a&gt;
      in real world applications.&lt;/p&gt;
      
      &lt;p&gt;A few highlights of &lt;em&gt;The Deuce&lt;/em&gt; compared to the previous 1.x series:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;It uses the &lt;a href=&quot;http://undertow.io&quot;&gt;Undertow&lt;/a&gt; web server -- it's much faster, with WebSocket support&lt;/li&gt;
      &lt;li&gt;The source is licensed under the Apache Software License rather than LPGL&lt;/li&gt;
      &lt;li&gt;It's completely functional &quot;embedded&quot; in your app, i.e. no app server required&lt;/li&gt;
      &lt;li&gt;It may be deployed to latest &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; for extra clustering features&lt;/li&gt;
      &lt;/ul&gt;&lt;h2&gt;What's changed in this release?&lt;/h2&gt;
      
      &lt;ul&gt;
      &lt;li&gt;Though not strictly part of the release, we've significantly
      rearranged our documentation. The &quot;tutorials&quot; are now called
      &quot;guides&quot;, and we publish them right along with the &lt;a href=&quot;/documentation/2.0.0-alpha2/apidoc/&quot;&gt;apidoc&lt;/a&gt;. This
      gives us a &quot;one-stop doc shop&quot; with better, cross-referenced
      content.&lt;/li&gt;
      &lt;li&gt;We've introduced an &lt;code&gt;org.immutant/transactions&lt;/code&gt; library to provide
      support for XA distributed transactions, a feature we had in
      Immutant 1.x, but only recently made available in The Deuce, both
      within WildFly and out of the container as well. The API is similar,
      with a few minor namespace changes, and all Immutant caches and
      messaging destinations are XA capable.&lt;/li&gt;
      &lt;li&gt;We're now exposing flexible SSL configuration options through our
      &lt;code&gt;immutant.web.undertow&lt;/code&gt; namespace, allowing you to set up an HTTPS
      listener with some valid combination of SSLContext, KeyStore,
      TrustStore, KeyManagers, or TrustManagers.&lt;/li&gt;
      &lt;li&gt;We've made a large, breaking change to our messaging API. Namely,
      we've removed the &lt;code&gt;connection&lt;/code&gt; and &lt;code&gt;session&lt;/code&gt; abstractions, and
      replaced them with a single one: &lt;code&gt;context&lt;/code&gt;. This is somewhat
      motivated by our implementation using the new JMS 2.0 api's.&lt;/li&gt;
      &lt;li&gt;
      &lt;a href=&quot;http://www.datomic.com/&quot;&gt;Datomic&lt;/a&gt; can now be used with an Immutant application when inside
      of WildFly without having to modify the WildFly configuration or add
      any exclusions. Unfortunately, you still cannot use Datomic with an
      application that uses &lt;code&gt;org.immutant/messaging&lt;/code&gt; &lt;em&gt;outside&lt;/em&gt; of WildFly,
      due to conflicts between the HornetQ version we depend on and the
      version Datomic depends on. See &lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-497&quot;&gt;IMMUTANT-497&lt;/a&gt; for more details.&lt;/li&gt;
      &lt;li&gt;HornetQ is now configured via standard configuration files instead
      of via static Java code, allowing you to alter that configuration if
      need be. See the &lt;a href=&quot;/documentation/2.0.0-alpha2/apidoc/guide-messaging.html&quot;&gt;messaging guide&lt;/a&gt; for details.&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;We've also released a new version of the &lt;a href=&quot;https://github.com/immutant/lein-immutant/&quot;&gt;lein-immutant&lt;/a&gt; plugin
      (2.0.0-alpha2). You'll need to upgrade to that release if you will use
      alpha2 of Immutant with WildFly.&lt;/p&gt;
      
      &lt;p&gt;For a full list of changes, see the issue list below.&lt;/p&gt;
      
      &lt;h2&gt;How to try it&lt;/h2&gt;
      
      &lt;p&gt;If you're already familiar with Immutant 1.x, you should take a look
      at our &lt;a href=&quot;/documentation/2.0.0-alpha2/apidoc/guide-migration.html&quot;&gt;migration guide&lt;/a&gt;. It's our attempt at keeping track of what we
      changed in the Clojure namespaces.&lt;/p&gt;
      
      &lt;p&gt;The guides are another good source of information, along with the
      rest of the &lt;a href=&quot;/documentation/2.0.0-alpha2/apidoc/&quot;&gt;apidoc&lt;/a&gt;.&lt;/p&gt;
      
      &lt;p&gt;For a working example, check out our &lt;a href=&quot;https://github.com/immutant/feature-demo&quot;&gt;Feature Demo&lt;/a&gt; application!&lt;/p&gt;
      
      &lt;h2&gt;Get It&lt;/h2&gt;
      
      &lt;p&gt;There is no longer any &quot;installation&quot; step as there was in 1.x. Simply
      add the relevant dependency to your project as shown on &lt;a href=&quot;https://clojars.org/org.immutant/immutant&quot;&gt;Clojars&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;What's next?&lt;/h2&gt;
      
      &lt;p&gt;We expect to release a beta fairly soon, once we ensure that
      everything works well with the upcoming WildFly 9 release.&lt;/p&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;If you have any questions, issues, or other feedback about Immutant,
      you can always find us on &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/mailing_lists&quot;&gt;our mailing lists&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Issues resolved in 2.0.0-alpha2&lt;/h2&gt;
      
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-466&quot;&gt;IMMUTANT-466&lt;/a&gt;] -         App using datomic can't find javax.net.ssl.SSLException class in WildFly&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-467&quot;&gt;IMMUTANT-467&lt;/a&gt;] -         Datomic HornetQ Conflicts with WildFly&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-473&quot;&gt;IMMUTANT-473&lt;/a&gt;] -         web/run only works at deployment inside wildfly&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-474&quot;&gt;IMMUTANT-474&lt;/a&gt;] -         See if we need to bring over any of the shutdown code from 1.x to use inside the container&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-475&quot;&gt;IMMUTANT-475&lt;/a&gt;] -         Write tutorial on overriding logging settings in-container&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-477&quot;&gt;IMMUTANT-477&lt;/a&gt;] -         Figure out how to get the web-context inside WildFly&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-478&quot;&gt;IMMUTANT-478&lt;/a&gt;] -         Consider wrapping scheduled jobs in bound-fn&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-479&quot;&gt;IMMUTANT-479&lt;/a&gt;] -         Get XA working in (and possibly out of) container&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-480&quot;&gt;IMMUTANT-480&lt;/a&gt;] -         Immutant running out of a container does not handle laptop suspend gracefully&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-481&quot;&gt;IMMUTANT-481&lt;/a&gt;] -         Expose way to set the global log level&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-482&quot;&gt;IMMUTANT-482&lt;/a&gt;] -         Destinations with leading slashes fail to deploy in WildFly&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-483&quot;&gt;IMMUTANT-483&lt;/a&gt;] -         Allow nil :body in ring response&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-484&quot;&gt;IMMUTANT-484&lt;/a&gt;] -         app-uri has a trailing slash&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-485&quot;&gt;IMMUTANT-485&lt;/a&gt;] -         The wunderboss-core jar file has a logback.xml file packaged inside of it which competes with a locally configured logback.xml&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-487&quot;&gt;IMMUTANT-487&lt;/a&gt;] -         Enable explicit control of an embedded web server&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-488&quot;&gt;IMMUTANT-488&lt;/a&gt;] -         Provide better SSL support than just through the Undertow.Builder&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-489&quot;&gt;IMMUTANT-489&lt;/a&gt;] -         Re-running servlets yields IllegalStateException&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-490&quot;&gt;IMMUTANT-490&lt;/a&gt;] -         Don't register fressian codec by default&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-491&quot;&gt;IMMUTANT-491&lt;/a&gt;] -         at-exit handlers can fail if they refer to any wboss components&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-492&quot;&gt;IMMUTANT-492&lt;/a&gt;] -         Expose HornetQ broker configuration options&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-493&quot;&gt;IMMUTANT-493&lt;/a&gt;] -         Revert back to :host instead of :interface for nrepl options&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-494&quot;&gt;IMMUTANT-494&lt;/a&gt;] -         Expose controlling the context mode to listen&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-496&quot;&gt;IMMUTANT-496&lt;/a&gt;] -         Expose way to override HornetQ data directories&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-498&quot;&gt;IMMUTANT-498&lt;/a&gt;] -         Replace connection and session with a single context abstraction&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-499&quot;&gt;IMMUTANT-499&lt;/a&gt;] -         Consider renaming :client-id on context to :subscription-name&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-500&quot;&gt;IMMUTANT-500&lt;/a&gt;] -         Throw if listen, queue, or topic is given a non-remote context&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-501&quot;&gt;IMMUTANT-501&lt;/a&gt;] -         Running the standalone JAR with default &quot;/&quot; context path requires extra slash for inner routes&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-502&quot;&gt;IMMUTANT-502&lt;/a&gt;] -         Rename caching/compare-and-swap! to swap-in!&lt;/li&gt;
      &lt;/ul&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2014/09/22/transit-and-immutant/</id>
    <title>Using Transit with Immutant 2</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2014-09-22T00:00:00+00:00</published>
    <link href="/news/2014/09/22/transit-and-immutant/" rel="alternate" type="text/html" />
    <author>
      <name>Toby Crawley</name>
    </author>
    <category term="caching"></category>
    <category term="messaging"></category>
    <category term="transit"></category>
    <summary>
      Out of the box, Immutant 2 has support for several data serialization
      strategies for use with messaging and caching, namely: EDN,
      Fressian, JSON, and none (which falls back to Java
      serialization). But what if you want to use another strategy? Luckily,
      this isn&#39;t a closed set - Immutant allows us to add new
      strategies. We took advantage of that and have created a separate
      project that brings Transit support to Immutant -
      immutant-transit.
      
      What is Transit?
      
      From the Transit format page:
      
      
      Transit is a format and set of libraries for conveying values
      between applications written in different programming languages.
      
      
      It&#39;s similar in purpose to EDN, but leverages the speed of the
      optimized JSON...
    </summary>
    <content type="html">
      &lt;p&gt;Out of the box, Immutant 2 has support for several data serialization
      strategies for use with messaging and caching, namely: &lt;a href=&quot;https://github.com/edn-format/edn&quot;&gt;EDN&lt;/a&gt;,
      &lt;a href=&quot;https://github.com/clojure/data.fressian&quot;&gt;Fressian&lt;/a&gt;, &lt;a href=&quot;http://json.org/&quot;&gt;JSON&lt;/a&gt;, and none (which falls back to Java
      serialization). But what if you want to use another strategy? Luckily,
      this isn't a closed set - Immutant allows us to add new
      strategies. We took advantage of that and have created a separate
      project that brings &lt;a href=&quot;https://github.com/cognitect/transit-clj&quot;&gt;Transit&lt;/a&gt; support to Immutant -
      &lt;a href=&quot;https://github.com/immutant/immutant-transit&quot;&gt;immutant-transit&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;What is Transit?&lt;/h2&gt;
      
      &lt;p&gt;From the &lt;a href=&quot;https://github.com/cognitect/transit-format&quot;&gt;Transit format&lt;/a&gt; page:&lt;/p&gt;
      
      &lt;blockquote&gt;
      &lt;p&gt;Transit is a format and set of libraries for conveying values
      between applications written in different programming languages.&lt;/p&gt;
      &lt;/blockquote&gt;
      
      &lt;p&gt;It's similar in purpose to EDN, but leverages the speed of the
      optimized JSON readers that most platforms provide.&lt;/p&gt;
      
      &lt;h2&gt;What does immutant-transit offer over using Transit directly?&lt;/h2&gt;
      
      &lt;p&gt;immutant-transit provides an Immutant &lt;a href=&quot;https://projectodd.ci.cloudbees.com/job/immutant2-incremental/lastSuccessfulBuild/artifact/target/apidocs/immutant.codecs.html&quot;&gt;codec&lt;/a&gt; for Transit that allows
      for transparent encoding and decoding of Transit data when using
      Immutant's &lt;a href=&quot;/tutorials/messaging/&quot;&gt;messaging&lt;/a&gt; and &lt;a href=&quot;http://immutant.org/tutorials/caching/&quot;&gt;caching&lt;/a&gt; functionality. Without it, you would
      need to set up the encode/decode logic yourself.&lt;/p&gt;
      
      &lt;h2&gt;Usage&lt;/h2&gt;
      
      &lt;p&gt;&lt;strong&gt;Note: immutant-transit won't work with Immutant 2.0.0-alpha1 -
       you'll need to use an &lt;a href=&quot;/builds/2x/&quot;&gt;incremental build&lt;/a&gt; (#298 or newer).&lt;/strong&gt;&lt;/p&gt;
      
      &lt;p&gt;First, we need to add &lt;code&gt;org.immutant/immutant-transit&lt;/code&gt; to our
      application's dependencies:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;
        :dependencies [[org.clojure/clojure &quot;1.6.0&quot;]
                       [org.immutant/immutant &quot;2.x.incremental.298&quot;]
                       [org.immutant/immutant-transit &quot;0.2.2&quot;]]&lt;/pre&gt;
      
      &lt;p&gt;If you don't have &lt;code&gt;com.cognitect/transit-clj&lt;/code&gt; in your dependencies,
      immutant-transit will transitively bring in version 0.8.259. We've
      tested against 0.8.255 and 0.8.259, so if you're running another
      version and are seeing issues, &lt;a href=&quot;https://github.com/immutant/immutant-transit/issues&quot;&gt;let us know&lt;/a&gt;.&lt;/p&gt;
      
      &lt;p&gt;Now, we need to register the Transit codec with Immutant:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;
        (ns your.app
          (:require [immutant.codecs.transit :as it]))
      
        (it/register-transit-codec)&lt;/pre&gt;
      
      &lt;p&gt;This will register a vanilla JSON Transit codec that encodes to a
      &lt;code&gt;byte[]&lt;/code&gt; under the name &lt;code&gt;:transit&lt;/code&gt; with the content-type
      &lt;code&gt;application/transit+json&lt;/code&gt; (Immutant uses the content-type to identify
      the encoding for messages sent via HornetQ).&lt;/p&gt;
      
      &lt;p&gt;To use the codec, provide it as the &lt;code&gt;:encoding&lt;/code&gt; option wherever an
      encoding is used:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;
        (immutant.messaging/publish some-queue {:a :message} :encoding :transit)
      
        (def transit-cache (immutant.caching/with-codec some-cache :transit))
        (immutant.caching/compare-and-swap! transit-cache a-key a-function)&lt;/pre&gt;
      
      &lt;p&gt;If you need to change the underlying format that Transit uses, or need
      to provide custom read/write handlers, you can pass them as options to
      &lt;a href=&quot;https://github.com/immutant/immutant-transit/blob/0.2.2/src/immutant/codecs/transit.clj#L55&quot;&gt;register-transit-codec&lt;/a&gt;:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;
        (it/register-transit-codec
          :type :json-verbose
          :read-handlers my-read-handlers
          :write-handlers my-write-handlers)&lt;/pre&gt;
      
      &lt;p&gt;The content-type will automatically be generated based on the &lt;code&gt;:type&lt;/code&gt;,
      and will be of the form &lt;code&gt;application/transit+&amp;lt;:type&amp;gt;&lt;/code&gt;.&lt;/p&gt;
      
      &lt;p&gt;You can also override the name and content-type:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;
        (it/register-transit-codec
          :name :transit-with-my-handlers
          :content-type &quot;application/transit+json+my-stuff&quot;
          :read-handlers my-read-handlers
          :write-handlers my-write-handlers)&lt;/pre&gt;
      
      &lt;p&gt;For more examples, see the &lt;a href=&quot;https://github.com/immutant/immutant-transit/tree/master/example-app&quot;&gt;example project&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Why is this a separate project from Immutant?&lt;/h2&gt;
      
      &lt;p&gt;Transit's format and implementation are young, and are still in
      flux. We're currently developing this as a separate project so we can
      make releases independent of Immutant proper that track changes to
      Transit. Once Transit matures a bit, we'll likely roll this in to
      Immutant itself.&lt;/p&gt;
      
      &lt;p&gt;If you are interested in adding a codec of your own, take a look at
      the &lt;a href=&quot;https://github.com/immutant/immutant-transit/blob/0.2.2/src/immutant/codecs/transit.clj&quot;&gt;immutant-transit source&lt;/a&gt; and at the
      &lt;a href=&quot;https://projectodd.ci.cloudbees.com/job/immutant2-incremental/lastSuccessfulBuild/artifact/target/apidocs/immutant.codecs.html&quot;&gt;immutant.codecs namespace&lt;/a&gt; to see how it's done.&lt;/p&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;If you have any questions, issues, or other feedback about mmutant-transit,
      you can always find us on &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/mailing_lists&quot;&gt;our mailing lists&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2014/08/27/announcing-2-alpha1/</id>
    <title>Immutant 2 (The Deuce) Alpha Released</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2014-08-27T00:00:00+00:00</published>
    <link href="/news/2014/08/27/announcing-2-alpha1/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="releases"></category>
    <summary>
      We&#39;re as excited as
      this little girl to
      announce our first alpha release of The Deuce, Immutant
      2.0.0-alpha1.
      
      This represents a significant milestone for us, as we&#39;ve completely
      removed the app server from Immutant. It&#39;s just jars now. We&#39;ve put a
      lot of thought into the API and performed enough integration testing
      to feel confident putting an alpha out at this time.
      
      Big, special thanks to all our early adopters who provided invaluable
      feedback on our incremental releases these past few months.
      
      What is Immutant?
      
      Immutant is an integrated suite of Clojure
      libraries backed by Undertow for web, HornetQ for messaging,
      Infinispan for caching, and Quartz for scheduling. Applications
      built with Immutant can optionally...
    </summary>
    <content type="html">
      &lt;p&gt;We're as excited as
      &lt;a href=&quot;https://www.youtube.com/watch?v=cAltWGojKS0&quot;&gt;this little girl&lt;/a&gt; to
      announce our first alpha release of &lt;em&gt;The Deuce&lt;/em&gt;, Immutant
      &lt;strong&gt;2.0.0-alpha1&lt;/strong&gt;.&lt;/p&gt;
      
      &lt;p&gt;This represents a significant milestone for us, as we've completely
      removed the app server from Immutant. It's just jars now. We've put a
      lot of thought into the API and performed enough integration testing
      to feel confident putting an alpha out at this time.&lt;/p&gt;
      
      &lt;p&gt;Big, special thanks to all our early adopters who provided invaluable
      feedback on our incremental releases these past few months.&lt;/p&gt;
      
      &lt;h2&gt;What is Immutant?&lt;/h2&gt;
      
      &lt;p&gt;Immutant is an integrated suite of &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;
      libraries backed by &lt;a href=&quot;http://undertow.io&quot;&gt;Undertow&lt;/a&gt; for web, &lt;a href=&quot;http://hornetq.org&quot;&gt;HornetQ&lt;/a&gt; for messaging,
      &lt;a href=&quot;http://infinispan.org&quot;&gt;Infinispan&lt;/a&gt; for caching, and &lt;a href=&quot;http://quartz-scheduler.org/&quot;&gt;Quartz&lt;/a&gt; for scheduling. Applications
      built with Immutant can optionally be deployed to a &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; cluster
      for enhanced features. Its fundamental goal is to reduce the inherent
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Accidental_complexity&quot;&gt;incidental complexity&lt;/a&gt;
      in real world applications.&lt;/p&gt;
      
      &lt;p&gt;A few highlights of &lt;em&gt;The Deuce&lt;/em&gt; compared to the previous 1.x series:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;It uses the &lt;a href=&quot;http://undertow.io&quot;&gt;Undertow&lt;/a&gt; web server -- it's much faster, with WebSocket support&lt;/li&gt;
      &lt;li&gt;The source is licensed under the Apache Software License rather than LPGL&lt;/li&gt;
      &lt;li&gt;It's completely functional &quot;embedded&quot; in your app, i.e. no app server required&lt;/li&gt;
      &lt;li&gt;It may be deployed to latest &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; for extra clustering features&lt;/li&gt;
      &lt;/ul&gt;&lt;h2&gt;How to try it&lt;/h2&gt;
      
      &lt;p&gt;If you're already familiar with Immutant 1.x, you should take a look
      at our &lt;a href=&quot;https://github.com/immutant/immutant/blob/thedeuce/docs/migration-guide.md&quot;&gt;migration guide&lt;/a&gt;. It's our attempt at keeping track of what we
      changed in the Clojure namespaces.&lt;/p&gt;
      
      &lt;p&gt;The &lt;a href=&quot;/tutorials/&quot;&gt;tutorials&lt;/a&gt; are another good source of information, along with the
      &lt;a href=&quot;/documentation/current/apidoc/&quot;&gt;apidoc&lt;/a&gt;.&lt;/p&gt;
      
      &lt;p&gt;For a working example, check out our &lt;a href=&quot;https://github.com/immutant/feature-demo&quot;&gt;Feature Demo&lt;/a&gt; application!&lt;/p&gt;
      
      &lt;h2&gt;Get It&lt;/h2&gt;
      
      &lt;p&gt;There is no longer any &quot;installation&quot; step as there was in 1.x. Simply
      add the relevant dependency to your project as shown on &lt;a href=&quot;https://clojars.org/org.immutant/immutant&quot;&gt;Clojars&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;What's next?&lt;/h2&gt;
      
      &lt;p&gt;For the first release, we focused on the API and on usage outside of a
      container. For the next alpha, we plan on focusing on making
      in-container behavior more robust. Take a look at our &lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT&quot;&gt;current issues&lt;/a&gt;
      if you want to follow along.&lt;/p&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;If you have any questions, issues, or other feedback about Immutant,
      you can always find us on &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/mailing_lists&quot;&gt;our mailing lists&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2014/08/01/announcing-1-1-4/</id>
    <title>Immutant 1.1.4 Released</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2014-08-01T00:00:00+00:00</published>
    <link href="/news/2014/08/01/announcing-1-1-4/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="releases"></category>
    <summary>
      We&#39;re as happy as
      a kid at a basketball game
      to announce Immutant 1.1.4 - &quot;OneFourMoreTheRoad&quot;.
      
      This is strictly a bug fix release and, unless any new bugs are
      reported against it, possibly our last 1.x release. We are now
      focusing our efforts on The Deuce. We will
      make every reasonable effort to fix any bugs reported against 1.x, but
      we will only be adding features to 2.x. As always, view our road map
      here.
      
      What is Immutant?
      
      Immutant is an application server for
      Clojure. It&#39;s an integrated platform built on
      JBoss AS7 that aims to reduce the inherent
      incidental complexity
      in real world applications.
      
      What&#39;s in this release?
      
      The notable changes in this release are:
      
      
      META-INF/...
    </summary>
    <content type="html">
      &lt;p&gt;We're as happy as
      &lt;a href=&quot;https://www.youtube.com/watch?v=1uFU4D1pQqo&quot;&gt;a kid at a basketball game&lt;/a&gt;
      to announce Immutant &lt;strong&gt;1.1.4 - &quot;OneFourMoreTheRoad&quot;&lt;/strong&gt;.&lt;/p&gt;
      
      &lt;p&gt;This is strictly a bug fix release and, unless any new bugs are
      reported against it, possibly our last 1.x release. We are now
      focusing our efforts on &lt;a href=&quot;/news/2014/04/02/the-deuce/&quot;&gt;The Deuce&lt;/a&gt;. We will
      make every reasonable effort to fix any bugs reported against 1.x, but
      we will only be adding features to 2.x. As always, view our road map
      &lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;What is Immutant?&lt;/h2&gt;
      
      &lt;p&gt;Immutant is an application server for
      &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;. It's an integrated platform built on
      &lt;a href=&quot;http://www.jboss.org/as7&quot;&gt;JBoss AS7&lt;/a&gt; that aims to reduce the inherent
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Accidental_complexity&quot;&gt;incidental complexity&lt;/a&gt;
      in real world applications.&lt;/p&gt;
      
      &lt;h2&gt;What's in this release?&lt;/h2&gt;
      
      &lt;p&gt;The notable changes in this release are:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;
      &lt;code&gt;META-INF/&lt;/code&gt; and &lt;code&gt;WEB-INF/&lt;/code&gt; directories on your resource path are now
      honored.&lt;/li&gt;
      &lt;li&gt;We've restored the needed bits to allow remote jmx connections.&lt;/li&gt;
      &lt;li&gt;Recent &lt;a href=&quot;https://github.com/clojure-emacs/cider-nrepl&quot;&gt;cider-nrepl&lt;/a&gt;
      snapshots require &lt;code&gt;tools.nrepl&lt;/code&gt; to be on the classpath at the time
      the &lt;code&gt;project.clj&lt;/code&gt; is resolved, so it's now available.&lt;/li&gt;
      &lt;li&gt;We no longer force &lt;code&gt;tools.logging&lt;/code&gt; to use log4j. &lt;strong&gt;Note:&lt;/strong&gt; If you were
      relying on that behavior, see
      &lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-464&quot;&gt;IMMUTANT-464&lt;/a&gt;.&lt;/li&gt;
      &lt;/ul&gt;&lt;h2&gt;Get It&lt;/h2&gt;
      
      &lt;p&gt;The simplest way to install or upgrade to 1.1.4 is via our
      &lt;a href=&quot;https://clojars.org/lein-immutant&quot;&gt;Leiningen plugin&lt;/a&gt;:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;$ lein immutant install 1.1.4
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;See our &lt;a href=&quot;/install/&quot;&gt;install page&lt;/a&gt; for more details. Once you have it
      installed, take a look at our &lt;a href=&quot;/tutorials/&quot;&gt;tutorials&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;What's next?&lt;/h2&gt;
      
      &lt;p&gt;As we said above, we'll be focusing on
      &lt;a href=&quot;/news/2014/04/02/the-deuce/&quot;&gt;Immutant 2&lt;/a&gt;, with a tentative alpha
      release in the next few weeks.&lt;/p&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;If you have any questions, issues, or other feedback about Immutant,
      you can always find us on &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/mailing_lists&quot;&gt;our mailing lists&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Issues resolved in 1.1.4&lt;/h2&gt;
      
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-452&quot;&gt;IMMUTANT-452&lt;/a&gt;] -         Remote jmx not supported by default distribution&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-453&quot;&gt;IMMUTANT-453&lt;/a&gt;] -         Immutant ignores logback config&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-455&quot;&gt;IMMUTANT-455&lt;/a&gt;] -         META-INF and WEB-INF in a resource dir should be honored&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-457&quot;&gt;IMMUTANT-457&lt;/a&gt;] -         Yet more com.sun packages need to be exposed in the sun.jdk module. This time, it's sound packages.&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-459&quot;&gt;IMMUTANT-459&lt;/a&gt;] -         Recent cider-nrepl snapshots cause deployment to fail because it can't find tools.nrepl&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-464&quot;&gt;IMMUTANT-464&lt;/a&gt;] -         Don't force tools.logging to use a particular provider&lt;/li&gt;
      &lt;/ul&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2014/07/31/lein-immutant-1-2-2/</id>
    <title>lein-immutant Plugin 1.2.2 Released</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2014-07-31T00:00:00+00:00</published>
    <link href="/news/2014/07/31/lein-immutant-1-2-2/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="lein"></category>
    <category term="lein-immutant"></category>
    <category term="installation"></category>
    <summary>
      We just released version 1.2.2 of
      our Leiningen plugin. This release contains the following changes:
      
      
      Active profiles are now honored for the immutant test task.
      The immutant run and immutant server tasks no longer give
      spurious profile warnings under lein 2.4.2.
      
      
      For the full list of changes, see
      the milestone.
      
      Get it
      
      If you&#39;re already using lein-immutant you probably already know how
      to do this, but just in case - to install it, add it to the :plugins
      list in your :user profile in ~/.lein/profiles.clj:
      
      {:user {:plugins [[lein-immutant &quot;1.2.2&quot;]]}}
      
      
      Get in touch
      
      If you have any questions, issues, or other feedback, you can always
      find us on #immutant on freenode or you can file...
    </summary>
    <content type="html">
      &lt;p&gt;We just released version &lt;a href=&quot;https://clojars.org/lein-immutant&quot;&gt;1.2.2&lt;/a&gt; of
      our Leiningen plugin. This release contains the following changes:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;Active profiles are now honored for the &lt;code&gt;immutant test&lt;/code&gt; task.&lt;/li&gt;
      &lt;li&gt;The &lt;code&gt;immutant run&lt;/code&gt; and &lt;code&gt;immutant server&lt;/code&gt; tasks no longer give
      spurious profile warnings under lein 2.4.2.&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;For the full list of changes, see
      &lt;a href=&quot;https://github.com/immutant/lein-immutant/issues?q=milestone%3A1.2.2+is%3Aclosed&quot;&gt;the milestone&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Get it&lt;/h2&gt;
      
      &lt;p&gt;If you're already using &lt;code&gt;lein-immutant&lt;/code&gt; you probably already know how
      to do this, but just in case - to install it, add it to the &lt;code&gt;:plugins&lt;/code&gt;
      list in your &lt;code&gt;:user&lt;/code&gt; profile in &lt;code&gt;~/.lein/profiles.clj&lt;/code&gt;:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;{:user {:plugins [[lein-immutant &quot;1.2.2&quot;]]}}
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;h2&gt;Get in touch&lt;/h2&gt;
      
      &lt;p&gt;If you have any questions, issues, or other feedback, you can always
      find us on &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or you can file an
      issue on
      &lt;a href=&quot;https://github.com/immutant/lein-immutant/issues&quot;&gt;lein-immutant&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2014/06/17/announcing-1-1-3/</id>
    <title>Immutant 1.1.3 Released</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2014-06-17T00:00:00+00:00</published>
    <link href="/news/2014/06/17/announcing-1-1-3/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="releases"></category>
    <summary>
      We&#39;re as happy as a kid with a banana to announce
      Immutant 1.1.3 - &quot;Already?&quot;.
      
      This is strictly a bug fix release and, unless any new bugs are
      reported against it, possibly our last 1.x release. We are now
      focusing our efforts on The Deuce. We will
      make every reasonable effort to fix any bugs reported against 1.x, but
      we will only be adding features to 2.x. As always, view our road map
      here.
      
      What is Immutant?
      
      Immutant is an application server for
      Clojure. It&#39;s an integrated platform built on
      JBoss AS7 that aims to reduce the inherent
      incidental complexity
      in real world applications.
      
      What&#39;s in this release?
      
      There are only three changes in this...
    </summary>
    <content type="html">
      &lt;p&gt;We're as happy as &lt;a href=&quot;https://www.youtube.com/watch?v=nTqn72B2Ajk&quot;&gt;a kid with a banana&lt;/a&gt; to announce
      Immutant &lt;strong&gt;1.1.3 - &quot;Already?&quot;&lt;/strong&gt;.&lt;/p&gt;
      
      &lt;p&gt;This is strictly a bug fix release and, unless any new bugs are
      reported against it, possibly our last 1.x release. We are now
      focusing our efforts on &lt;a href=&quot;/news/2014/04/02/the-deuce/&quot;&gt;The Deuce&lt;/a&gt;. We will
      make every reasonable effort to fix any bugs reported against 1.x, but
      we will only be adding features to 2.x. As always, view our road map
      &lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;What is Immutant?&lt;/h2&gt;
      
      &lt;p&gt;Immutant is an application server for
      &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;. It's an integrated platform built on
      &lt;a href=&quot;http://www.jboss.org/as7&quot;&gt;JBoss AS7&lt;/a&gt; that aims to reduce the inherent
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Accidental_complexity&quot;&gt;incidental complexity&lt;/a&gt;
      in real world applications.&lt;/p&gt;
      
      &lt;h2&gt;What's in this release?&lt;/h2&gt;
      
      &lt;p&gt;There are only three changes in this release:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;Files in directories that are created after deployment under
      `resources/' are now visible on the classpath.&lt;/li&gt;
      &lt;li&gt;The helper classes needed for
      &lt;a href=&quot;https://github.com/clojure-emacs/cider-nrepl&quot;&gt;cider-nrepl&lt;/a&gt; to load
      are now exposed by the appropriate classloader.&lt;/li&gt;
      &lt;li&gt;Applications that depend on &lt;code&gt;org.clojure/tools.logging&lt;/code&gt; and any
      Immutant namespace will now work properly when used outside of the
      container.&lt;/li&gt;
      &lt;/ul&gt;&lt;h2&gt;Get It&lt;/h2&gt;
      
      &lt;p&gt;The simplest way to install or upgrade to 1.1.3 is via our
      &lt;a href=&quot;https://clojars.org/lein-immutant&quot;&gt;Leiningen plugin&lt;/a&gt;:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;$ lein immutant install 1.1.3
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;See our &lt;a href=&quot;/install/&quot;&gt;install page&lt;/a&gt; for more details. Once you have it
      installed, take a look at our &lt;a href=&quot;/tutorials/&quot;&gt;tutorials&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;What's next?&lt;/h2&gt;
      
      &lt;p&gt;As we said above, we'll be focusing on
      &lt;a href=&quot;/news/2014/04/02/the-deuce/&quot;&gt;Immutant 2&lt;/a&gt;, with a tentative release season
      beginning this summer.&lt;/p&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;If you have any questions, issues, or other feedback about Immutant,
      you can always find us on &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/mailing_lists&quot;&gt;our mailing lists&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Issues resolved in 1.1.3&lt;/h2&gt;
      
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-446&quot;&gt;IMMUTANT-446&lt;/a&gt;] -         newly-generated cljs files don't get served without a server restart
      &lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-447&quot;&gt;IMMUTANT-447&lt;/a&gt;] -         Fix classpath issues with cider-nrepl middleware
      &lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-449&quot;&gt;IMMUTANT-449&lt;/a&gt;] -         immutant.logging fails outside of the container if tools.logging is loaded
      &lt;/li&gt;
      &lt;/ul&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2014/06/09/immutant-messaging-2x/</id>
    <title>Messaging with The Deuce</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2014-06-09T00:00:00+00:00</published>
    <link href="/news/2014/06/09/immutant-messaging-2x/" rel="alternate" type="text/html" />
    <author>
      <name>Toby Crawley</name>
    </author>
    <category term="thedeuce"></category>
    <category term="getting-started"></category>
    <category term="tutorial"></category>
    <category term="messaging"></category>
    <summary>
      
      
      In this installment of our series on
      getting started with Immutant 2, we&#39;ll take a
      detailed look at the API of our library for messaging, and show
      a few examples of usage.
      
      If you&#39;re coming from Immutant 1.x, you may notice that the artifact
      has been renamed (org.immutant/immutant-messaging is now
      org.immutant/messaging), and the API has changed a bit. We&#39;ll point
      out the notable API changes as we go.
      
      The API
      
      The messaging API
       is backed by HornetQ, which is an implementation
      of JMS. JMS provides two primary destination types: queues and
      topics. Queues represent point-to-point destinations, and topics
      publish/subscribe.
      
      To use a destination, we need to get a reference to one via the
      queue...
    </summary>
    <content type="html">
      &lt;p&gt;&lt;a href=&quot;https://flic.kr/p/6ZpegH&quot;&gt;&lt;img src=&quot;/images/news/mailboxes.jpg&quot; alt=&quot;[mailboxes]&quot; class=&quot;alignleft bordered&quot;&gt;&lt;/a&gt;&lt;/p&gt;
      
      &lt;p&gt;In this installment of our series on
      &lt;a href=&quot;/news/tags/thedeuce/&quot;&gt;getting started with Immutant 2&lt;/a&gt;, we'll take a
      detailed look at the API of our library for messaging, and show
      a few examples of usage.&lt;/p&gt;
      
      &lt;p&gt;If you're coming from Immutant 1.x, you may notice that the artifact
      has been renamed (&lt;code&gt;org.immutant/immutant-messaging&lt;/code&gt; is now
      &lt;code&gt;org.immutant/messaging&lt;/code&gt;), and the API has changed a bit. We'll point
      out the notable API changes as we go.&lt;/p&gt;
      
      &lt;h2&gt;The API&lt;/h2&gt;
      
      &lt;p&gt;The messaging &lt;a href=&quot;/builds/2x/LATEST/target/apidocs/index.html&quot;&gt;API&lt;/a&gt;
       is backed by &lt;a href=&quot;http://hornetq.jboss.org/&quot;&gt;HornetQ&lt;/a&gt;, which is an implementation
      of &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_Message_Service&quot;&gt;JMS&lt;/a&gt;. JMS provides two primary destination types: &lt;em&gt;queues&lt;/em&gt; and
      &lt;em&gt;topics&lt;/em&gt;. Queues represent point-to-point destinations, and topics
      publish/subscribe.&lt;/p&gt;
      
      &lt;p&gt;To use a destination, we need to get a reference to one via the
      &lt;a href=&quot;/builds/2x/LATEST/target/apidocs/immutant.messaging.html#var-queue&quot;&gt;queue&lt;/a&gt; or
      &lt;a href=&quot;/builds/2x/LATEST/target/apidocs/immutant.messaging.html#var-topic&quot;&gt;topic&lt;/a&gt;
      functions, depending on the type required. This will create the
      destination if it does not already exist. This is a bit different than
      the 1.x API, which provided a single &lt;code&gt;start&lt;/code&gt; function for this, and
      determined the type of destination based on conventions around the
      provided name. In 2.x, we've removed those naming conventions.&lt;/p&gt;
      
      &lt;p&gt;Once we have a reference to a destination, we can operate on it with
      the following functions:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;
      &lt;a href=&quot;/builds/2x/LATEST/target/apidocs/immutant.messaging.html#var-publish&quot;&gt;publish&lt;/a&gt; -
      sends a message to the destination&lt;/li&gt;
      &lt;li&gt;
      &lt;a href=&quot;/builds/2x/LATEST/target/apidocs/immutant.messaging.html#var-receive&quot;&gt;receive&lt;/a&gt; -
      receives a single message from the destination&lt;/li&gt;
      &lt;li&gt;
      &lt;a href=&quot;/builds/2x/LATEST/target/apidocs/immutant.messaging.html#var-listen&quot;&gt;listen&lt;/a&gt; -
      registers a function to be called each time a message
      arrives at the destination&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;If the destination is a queue, we can do synchronous messaging
      (&lt;a href=&quot;https://en.wikipedia.org/wiki/Request-response&quot;&gt;request-response&lt;/a&gt;):&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;
      &lt;a href=&quot;/builds/2x/LATEST/target/apidocs/immutant.messaging.html#var-respond&quot;&gt;respond&lt;/a&gt; -
      registers a function that receives each request, and the
      returned value will be sent back to the requester&lt;/li&gt;
      &lt;li&gt;
      &lt;a href=&quot;/builds/2x/LATEST/target/apidocs/immutant.messaging.html#var-request&quot;&gt;request&lt;/a&gt; -
      sends a message to the responder&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;Finally, to deregister listeners, responders, and destinations, we
      provide a single
      &lt;a href=&quot;/builds/2x/LATEST/target/apidocs/immutant.messaging.html#var-stop&quot;&gt;stop&lt;/a&gt;
      function. This is another difference from 1.x -
      the &lt;code&gt;unlisten&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; functions have been collapsed to &lt;code&gt;stop&lt;/code&gt;.&lt;/p&gt;
      
      &lt;h3&gt;Some Examples&lt;/h3&gt;
      
      &lt;p&gt;The following code fragments were tested against
      &lt;a href=&quot;/builds/2x/&quot;&gt;2.x.incremental.133&lt;/a&gt;. You should
      follow the instructions in the &lt;a href=&quot;/news/2014/04/28/getting-started-with-2x/&quot;&gt;getting started&lt;/a&gt; post to set up a
      project using Immutant 2.x, and add
      &lt;code&gt;[org.immutant/messaging &quot;2.x.incremental.133&quot;]&lt;/code&gt; and
      &lt;code&gt;[cheshire &quot;5.3.1&quot;]&lt;/code&gt; to the project dependencies (we'll be encoding
      some messages as JSON in our examples below, so we'll go ahead and add
      &lt;a href=&quot;https://github.com/dakrone/cheshire&quot;&gt;cheshire&lt;/a&gt; while we're at
      it). Then, fire up a REPL, and require the &lt;code&gt;immutant.messaging&lt;/code&gt;
      namespace to follow along:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(require '[immutant.messaging :refer :all])&lt;/pre&gt;
      
      &lt;p&gt;First, let's create a queue:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(queue &quot;my-queue&quot;)&lt;/pre&gt;
      
      &lt;p&gt;That will create the queue in the HornetQ broker for us. We'll need a
      reference to that queue to operate on it. Let's go ahead and store
      that reference in a var:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(def q (queue &quot;my-queue&quot;))&lt;/pre&gt;
      
      &lt;p&gt;We can call &lt;code&gt;queue&lt;/code&gt; any number of times - if the queue already exists,
      we're just grabbing a reference to it.&lt;/p&gt;
      
      &lt;p&gt;Now, let's register a listener on our queue. Let's just print every
      message we get:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(def listener (listen q println))&lt;/pre&gt;
      
      &lt;p&gt;We can publish to that queue, and see that the listener gets called:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(publish q {:hi :there})&lt;/pre&gt;
      
      &lt;p&gt;You'll notice that we're publishing a map there - we can publish
      pretty much any data structure as a message. By default, that message
      will be encoded using &lt;a href=&quot;https://github.com/edn-format/edn&quot;&gt;edn&lt;/a&gt;. We also support other encodings, namely:
      &lt;code&gt;:clojure&lt;/code&gt;, &lt;code&gt;:fressian&lt;/code&gt;, &lt;code&gt;:json&lt;/code&gt;, and &lt;code&gt;:text&lt;/code&gt;. We can choose a
      different encoding by passing an :encoding option to &lt;code&gt;publish&lt;/code&gt;:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(publish q {:hi :there} :encoding :json)&lt;/pre&gt;
      
      &lt;p&gt;Out of the box, we provide full support for the &lt;code&gt;:clojure&lt;/code&gt;, &lt;code&gt;:edn&lt;/code&gt;,
      and &lt;code&gt;:text&lt;/code&gt; encodings. If you want to use &lt;code&gt;:fressian&lt;/code&gt; or &lt;code&gt;:json&lt;/code&gt;,
      you'll need to add &lt;code&gt;org.clojure/data.fressian&lt;/code&gt; or &lt;code&gt;cheshire&lt;/code&gt; to your
      dependencies to enable them, respectively.&lt;/p&gt;
      
      &lt;p&gt;We passed our options to &lt;code&gt;publish&lt;/code&gt; as keyword arguments, but they can
      also be passed as a map:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(publish q {:hi :there} {:encoding :json})&lt;/pre&gt;
      
      &lt;p&gt;This holds true for any of the messaging functions that take options.&lt;/p&gt;
      
      &lt;p&gt;We're also passing the destination reference to &lt;code&gt;publish&lt;/code&gt; instead of the
      destination name. That's a departure from 1.x, where you could just pass the
      destination name. Since we no longer have conventions about how queues and
      topics should be named, we can no longer determine the type of the
      destination from the name alone.&lt;/p&gt;
      
      &lt;p&gt;We can deregister the listener by either passing it to &lt;code&gt;stop&lt;/code&gt; or
      calling &lt;code&gt;.close&lt;/code&gt; on it:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(stop listener)
      ;; identical to
      (.close listener)&lt;/pre&gt;
      
      &lt;p&gt;Now let's take a look at synchronous messaging. Let's create a new
      queue for this (you'll want to use a dedicated queue for each
      responder) and register a responder that just increments the request:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(def sync-q (queue &quot;sync&quot;))
      
      (def responder (respond sync-q inc))&lt;/pre&gt;
      
      &lt;p&gt;Then, we make a request, which returns a &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Future.html&quot;&gt;Future&lt;/a&gt; that we can
      dereference:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;@(request sync-q 1)&lt;/pre&gt;
      
      &lt;p&gt;The responder is just a fancy listener, and can be deregistered the
      same way as a listener.&lt;/p&gt;
      
      &lt;h2&gt;That's not all...&lt;/h2&gt;
      
      &lt;p&gt;That was just a brief introduction to the messaging API. There are
      features we've yet to cover (durable topic subscriptions,
      connection/session sharing, transactional sessions, remote
      connections), but it's getting late, so we'll save those for another
      time.&lt;/p&gt;
      
      &lt;h2&gt;Try it out!&lt;/h2&gt;
      
      &lt;p&gt;As always, we'd love to incorporate your feedback. Find us via our
      &lt;a href=&quot;/community/&quot;&gt;community&lt;/a&gt; page and join the fun!&lt;/p&gt;
      
      &lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;https://flic.kr/p/6ZpegH&quot;&gt;John Lillis&lt;/a&gt; for the image, used under &lt;a href=&quot;https://creativecommons.org/licenses/by-nc-nd/2.0/&quot;&gt;CC BY-NC-ND&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2014/06/05/announcing-1-1-2/</id>
    <title>Immutant 1.1.2 Released</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2014-06-05T00:00:00+00:00</published>
    <link href="/news/2014/06/05/announcing-1-1-2/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="releases"></category>
    <summary>
      We&#39;re as happy as
      these birds to announce
      Immutant 1.1.2 - &quot;CodeName&quot;.
      
      This is primarily a bug fix release and, unless any new bugs are
      reported against it, possibly our last 1.x release. We are now
      focusing our efforts on The Deuce. We will
      make every reasonable effort to fix any bugs reported against 1.x, but
      we will only be adding features to 2.x. As always, view our road map
      here.
      
      What is Immutant?
      
      Immutant is an application server for
      Clojure. It&#39;s an integrated platform built on
      JBoss AS7 that aims to reduce the inherent
      incidental complexity
      in real world applications.
      
      What&#39;s in this release?
      
      There are only a handful of changes in this release. The...
    </summary>
    <content type="html">
      &lt;p&gt;We're as happy as
      &lt;a href=&quot;http://www.youtube.com/watch?v=iY3tEioB4BI&quot;&gt;these birds&lt;/a&gt; to announce
      Immutant &lt;strong&gt;1.1.2 - &quot;CodeName&quot;&lt;/strong&gt;.&lt;/p&gt;
      
      &lt;p&gt;This is primarily a bug fix release and, unless any new bugs are
      reported against it, possibly our last 1.x release. We are now
      focusing our efforts on &lt;a href=&quot;/news/2014/04/02/the-deuce/&quot;&gt;The Deuce&lt;/a&gt;. We will
      make every reasonable effort to fix any bugs reported against 1.x, but
      we will only be adding features to 2.x. As always, view our road map
      &lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;What is Immutant?&lt;/h2&gt;
      
      &lt;p&gt;Immutant is an application server for
      &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;. It's an integrated platform built on
      &lt;a href=&quot;http://www.jboss.org/as7&quot;&gt;JBoss AS7&lt;/a&gt; that aims to reduce the inherent
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Accidental_complexity&quot;&gt;incidental complexity&lt;/a&gt;
      in real world applications.&lt;/p&gt;
      
      &lt;h2&gt;What's in this release?&lt;/h2&gt;
      
      &lt;p&gt;There are only a handful of changes in this release. The highlights are:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;Immutant now properly starts when installed on a non-primary drive
      on Windows systems.&lt;/li&gt;
      &lt;li&gt;
      &lt;code&gt;log4j.(properties|xml)&lt;/code&gt; and &lt;code&gt;logging.properties&lt;/code&gt; files are now
      loaded from any classpath elements within the root of your
      application (&lt;code&gt;resources/&lt;/code&gt;, &lt;code&gt;src/&lt;/code&gt;, &lt;code&gt;target/classes/&lt;/code&gt;, etc). This
      allows you to override logging settings on a per-application basis,
      including logging to a separate file. See
      &lt;a href=&quot;/documentation/1.1.2/jboss.html#sec-5-2&quot;&gt;the docs&lt;/a&gt; for more details.&lt;/li&gt;
      &lt;/ul&gt;&lt;h2&gt;Get It&lt;/h2&gt;
      
      &lt;p&gt;The simplest way to install or upgrade to 1.1.2 is via our
      &lt;a href=&quot;https://clojars.org/lein-immutant&quot;&gt;Leiningen plugin&lt;/a&gt;:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;$ lein immutant install 1.1.2
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;See our &lt;a href=&quot;/install/&quot;&gt;install page&lt;/a&gt; for more details. Once you have it
      installed, take a look at our &lt;a href=&quot;/tutorials/&quot;&gt;tutorials&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;What's next?&lt;/h2&gt;
      
      &lt;p&gt;As we said above, we'll be focusing on
      &lt;a href=&quot;/news/2014/04/02/the-deuce/&quot;&gt;Immutant 2&lt;/a&gt;, with a tentative release season
      beginning this summer.&lt;/p&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;If you have any questions, issues, or other feedback about Immutant,
      you can always find us on &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/mailing_lists&quot;&gt;our mailing lists&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Issues resolved in 1.1.2&lt;/h2&gt;
      
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-434&quot;&gt;IMMUTANT-434&lt;/a&gt;] -         Metadata set on the project via lein-modules causes the project to be unreadable in the app runtime&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-435&quot;&gt;IMMUTANT-435&lt;/a&gt;] -         util/classpath barfs when an older dynapath is on the app ECP&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-437&quot;&gt;IMMUTANT-437&lt;/a&gt;] -         Load log4j.xml (and friends) from anywhere on the ECP&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-438&quot;&gt;IMMUTANT-438&lt;/a&gt;] -         shimdandy jars can fail to be found when Immutant is installed on non-primary drive on windows&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-443&quot;&gt;IMMUTANT-443&lt;/a&gt;] -         immutant.logging should use clojure.tools.logging if available&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-444&quot;&gt;IMMUTANT-444&lt;/a&gt;] -         Force clojure.tools.logging to use the log4j-factory&lt;/li&gt;
      &lt;/ul&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2014/05/16/immutant-scheduling-2x/</id>
    <title>Schedule Some Time with The Deuce</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2014-05-16T00:00:00+00:00</published>
    <link href="/news/2014/05/16/immutant-scheduling-2x/" rel="alternate" type="text/html" />
    <author>
      <name>Jim Crossley</name>
    </author>
    <category term="thedeuce"></category>
    <category term="getting-started"></category>
    <category term="tutorial"></category>
    <category term="scheduling"></category>
    <summary>
      
      
      In this installment of our series on
      getting started with Immutant 2, we&#39;ll take a
      detailed look at the API of our library for scheduling jobs, and show
      a few examples of usage.
      
      If you&#39;re coming from Immutant 1.x, you&#39;ll notice that the namespace
      and artifact have been renamed (what used to be immutant.jobs and
      org.immutant/immutant-jobs is now immutant.scheduling and
      org.immutant/scheduling), and the API has changed a bit.  It&#39;s still
      based on Quartz 2.2, though.
      
      The API
      
      At first glance, the API for immutant.scheduling appears bigger than
      it really is, but there are only two essential functions:
      
      
      schedule - for scheduling your jobs
      stop - for canceling them
      
      
      The remainder of the namespace...
    </summary>
    <content type="html">
      &lt;p&gt;&lt;a href=&quot;https://flic.kr/p/Ea16j&quot;&gt;&lt;img src=&quot;/images/news/timeclock.jpg&quot; alt=&quot;[timeclock]&quot; class=&quot;alignright&quot;&gt;&lt;/a&gt;&lt;/p&gt;
      
      &lt;p&gt;In this installment of our series on
      &lt;a href=&quot;/news/tags/thedeuce/&quot;&gt;getting started with Immutant 2&lt;/a&gt;, we'll take a
      detailed look at the API of our library for scheduling jobs, and show
      a few examples of usage.&lt;/p&gt;
      
      &lt;p&gt;If you're coming from Immutant 1.x, you'll notice that the namespace
      and artifact have been renamed (what used to be &lt;code&gt;immutant.jobs&lt;/code&gt; and
      &lt;code&gt;org.immutant/immutant-jobs&lt;/code&gt; is now &lt;code&gt;immutant.scheduling&lt;/code&gt; and
      &lt;code&gt;org.immutant/scheduling&lt;/code&gt;), and the API has changed a bit.  It's still
      based on Quartz 2.2, though.&lt;/p&gt;
      
      &lt;h2&gt;The API&lt;/h2&gt;
      
      &lt;p&gt;At first glance, the API for &lt;a href=&quot;https://projectodd.ci.cloudbees.com/job/immutant2-incremental/lastSuccessfulBuild/artifact/target/apidocs/immutant.scheduling.html&quot;&gt;immutant.scheduling&lt;/a&gt; appears bigger than
      it really is, but there are only two essential functions:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;
      &lt;code&gt;schedule&lt;/code&gt; - for scheduling your jobs&lt;/li&gt;
      &lt;li&gt;
      &lt;code&gt;stop&lt;/code&gt; - for canceling them&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;The remainder of the namespace is syntactic sugar: functions that can
      be composed to create the specification for when your job should run.&lt;/p&gt;
      
      &lt;p&gt;Your &quot;job&quot; will take the form of a plain ol' Clojure function taking
      no arguments. The &lt;code&gt;schedule&lt;/code&gt; function takes your job and a
      &lt;em&gt;specification map&lt;/em&gt; as arguments. The map determines when your
      function gets called. It may contain any of the following keys:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;
      &lt;code&gt;:in&lt;/code&gt; - a period after which your function will be called&lt;/li&gt;
      &lt;li&gt;
      &lt;code&gt;:at&lt;/code&gt; - an instant in time after which your function will be called&lt;/li&gt;
      &lt;li&gt;
      &lt;code&gt;:every&lt;/code&gt; - the period between calls&lt;/li&gt;
      &lt;li&gt;
      &lt;code&gt;:until&lt;/code&gt; - stops the calls at a specific time&lt;/li&gt;
      &lt;li&gt;
      &lt;code&gt;:limit&lt;/code&gt; - limits the calls to a specific count&lt;/li&gt;
      &lt;li&gt;
      &lt;code&gt;:cron&lt;/code&gt; - calls your function according to a &lt;a href=&quot;http://quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06&quot;&gt;Quartz-style&lt;/a&gt; cron spec&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;For each key there is a corresponding &quot;sugar function&quot;. We'll see
      those in the examples below.&lt;/p&gt;
      
      &lt;p&gt;Units for periods (&lt;code&gt;:in&lt;/code&gt; and &lt;code&gt;:every&lt;/code&gt;) are milliseconds, but can also
      be represented as a keyword or a vector of multiplier/keyword pairs,
      e.g. &lt;code&gt;[1 :week, 4 :days, 2 :hours, 30 :minutes, 59 :seconds]&lt;/code&gt;. Both
      singular and plural keywords are valid.&lt;/p&gt;
      
      &lt;p&gt;Time values (&lt;code&gt;:at&lt;/code&gt; and &lt;code&gt;:until&lt;/code&gt;) can be a &lt;code&gt;java.util.Date&lt;/code&gt;, a long
      representing milliseconds-since-epoch, or a String in &lt;code&gt;HH:mm&lt;/code&gt; format.
      The latter will be interpreted as the next occurence of &lt;code&gt;HH:mm:00&lt;/code&gt; in
      the currently active timezone.&lt;/p&gt;
      
      &lt;p&gt;Two additional options may be passed in the spec map:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;
      &lt;code&gt;:id&lt;/code&gt; - a unique identifier for the scheduled job&lt;/li&gt;
      &lt;li&gt;
      &lt;code&gt;:singleton&lt;/code&gt; - a boolean denoting the job's behavior in a cluster [true]&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;In Immutant 1.x, a name for the job was required. In Immutant 2, the
      &lt;code&gt;:id&lt;/code&gt; is optional, and if not provided, a UUID will be generated. If
      &lt;code&gt;schedule&lt;/code&gt; is called with an &lt;code&gt;:id&lt;/code&gt; for a job that has already been
      scheduled, the prior job will be replaced.&lt;/p&gt;
      
      &lt;p&gt;The return value from &lt;code&gt;schedule&lt;/code&gt; is a map of the options with any
      missing defaults filled in, including a generated id if necessary.
      This result can be passed to &lt;code&gt;stop&lt;/code&gt; to cancel the job.&lt;/p&gt;
      
      &lt;h3&gt;Some Examples&lt;/h3&gt;
      
      &lt;p&gt;The following code fragments were tested against
      &lt;a href=&quot;/builds/2x/&quot;&gt;2.x.incremental.119&lt;/a&gt;. You should read
      through the &lt;a href=&quot;/news/2014/04/28/getting-started-with-2x/&quot;&gt;getting started&lt;/a&gt; post and require the &lt;code&gt;immutant.scheduling&lt;/code&gt;
      namespace at a REPL to follow along:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(require '[immutant.scheduling :refer :all])&lt;/pre&gt;
      
      &lt;p&gt;We'll need a job to schedule. Here's one!&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(defn job []
        (prn 'fire!))&lt;/pre&gt;
      
      &lt;p&gt;Let's schedule it:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(schedule job)&lt;/pre&gt;
      
      &lt;p&gt;That was pretty useless. Without a spec, the job will be immediately
      called asynchronously on one of the Quartz scheduler's threads.
      Instead, let's have it run in 5 minutes:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(schedule job (in 5 :minutes))&lt;/pre&gt;
      
      &lt;p&gt;And maybe run again every second after that:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(schedule job
        (-&amp;gt; (in 5 :minutes)
          (every :second)))&lt;/pre&gt;
      
      &lt;p&gt;But no more than 60 times:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(schedule job
        (-&amp;gt; (in 5 :minutes)
          (every :second)
          (limit 60)))&lt;/pre&gt;
      
      &lt;p&gt;We could also anticipate getting stupid bored about halfway through,
      and schedule another job to cancel the first one:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(let [it (schedule job
                 (-&amp;gt; (in 5 :minutes)
                   (every :second)
                   (limit 60)))]
        (schedule #(stop it) (in 5 :minutes, 30 :seconds)))&lt;/pre&gt;
      
      &lt;p&gt;Of course, you can bring your own job id's if you like:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(schedule job (-&amp;gt; (id :purge) (every 30 :minutes)))
      (schedule job (-&amp;gt; (id :purge) (every :hour)))  ; reschedule
      (stop (id :purge))&lt;/pre&gt;
      
      &lt;p&gt;If a job is successfully canceled, &lt;code&gt;stop&lt;/code&gt; returns true.&lt;/p&gt;
      
      &lt;h3&gt;It's Just Maps&lt;/h3&gt;
      
      &lt;p&gt;Ultimately, the spec passed to &lt;code&gt;schedule&lt;/code&gt; is just a map, and the sugar
      functions are just assoc'ing keys corresponding to their names. The
      map can be passed either explicitly or via keyword arguments, so all
      of the following are equivalent:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(schedule job (-&amp;gt; (in 5 :minutes) (every :day)))
      (schedule job {:in [5 :minutes], :every :day})
      (schedule job :in [5 :minutes], :every :day)&lt;/pre&gt;
      
      &lt;h3&gt;Supports Joda clj-time&lt;/h3&gt;
      
      &lt;p&gt;If you're using the &lt;a href=&quot;https://github.com/clj-time/clj-time&quot;&gt;clj-time&lt;/a&gt; library in your project, you can load
      the &lt;a href=&quot;https://projectodd.ci.cloudbees.com/job/immutant2-incremental/lastSuccessfulBuild/artifact/target/apidocs/immutant.scheduling.joda.html&quot;&gt;immutant.scheduling.joda&lt;/a&gt; namespace. This will extend
      &lt;code&gt;org.joda.time.DateTime&lt;/code&gt; instances to the &lt;a href=&quot;https://projectodd.ci.cloudbees.com/job/immutant2-incremental/lastSuccessfulBuild/artifact/target/apidocs/immutant.scheduling.coercions.html&quot;&gt;AsTime&lt;/a&gt; protocol, enabling
      them to be used as arguments to &lt;code&gt;at&lt;/code&gt; and &lt;code&gt;until&lt;/code&gt;, e.g.&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(require '[clj-time.core :refer [today-at plus hours]])
      
      (let [t (today-at 9 00)]
        (schedule job
          (-&amp;gt; (at t)
            (every 2 :hours)
            (until (plus t (hours 8))))))&lt;/pre&gt;
      
      &lt;p&gt;It also provides the function, &lt;code&gt;schedule-seq&lt;/code&gt;. Inspired by &lt;a href=&quot;https://github.com/james-henderson/chime#chime-at&quot;&gt;chime-at&lt;/a&gt;,
      it takes not a specification map but a sequence of times, as might be
      returned from &lt;code&gt;clj-time.periodic/periodic-seq&lt;/code&gt;, subject to the
      application of any of Clojure's core sequence-manipulating functions.&lt;/p&gt;
      
      &lt;p&gt;When defining complex recurring schedules, this presents an
      interesting alternative to traditional cron specs. For example,
      consider a job that must run at 10am every weekday. Here's how we'd
      schedule that with a &lt;a href=&quot;http://quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06&quot;&gt;Quartz-style&lt;/a&gt; cron spec:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(schedule job (cron &quot;0 0 10 ? * MON-FRI&quot;))&lt;/pre&gt;
      
      &lt;p&gt;And here's the same schedule using a lazy sequence:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(require '[immutant.scheduling.joda :refer [schedule-seq]]
               '[clj-time.core            :refer [today-at days]]
               '[clj-time.periodic        :refer [periodic-seq]]
               '[clj-time.predicates      :refer [weekday?]])
      
      (schedule-seq job
        (-&amp;gt;&amp;gt; (periodic-seq (today-at 10 0) (days 1))
          (filter weekday?)))&lt;/pre&gt;
      
      &lt;p&gt;So each has trade-offs, of course. The cron spec is more concise, but
      also arguably more error-prone, e.g. what is that &lt;code&gt;?&lt;/code&gt; for!?&lt;/p&gt;
      
      &lt;p&gt;One very cool thing about the sequence is that I can test it without
      actually scheduling it. On the other hand, my cron spec test is going
      to take more than a week to run! ;)&lt;/p&gt;
      
      &lt;h2&gt;Try it out!&lt;/h2&gt;
      
      &lt;p&gt;As always, we'd love to incorporate your feedback. Find us via our
      &lt;a href=&quot;/community/&quot;&gt;community&lt;/a&gt; page and join the fun!&lt;/p&gt;
      
      &lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;https://www.flickr.com/photos/radialmonster/431783164&quot;&gt;Phil Hart&lt;/a&gt; for the image, used under &lt;a href=&quot;https://creativecommons.org/licenses/by-nc-sa/2.0/&quot;&gt;CC BY-NC-SA&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2014/05/05/immutant-web-2x/</id>
    <title>Untangling the Web in The Deuce</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2014-05-05T00:00:00+00:00</published>
    <link href="/news/2014/05/05/immutant-web-2x/" rel="alternate" type="text/html" />
    <author>
      <name>Jim Crossley</name>
    </author>
    <category term="thedeuce"></category>
    <category term="getting-started"></category>
    <category term="tutorial"></category>
    <category term="web"></category>
    <summary>
      Our org.immutant/web library has changed quite a bit in Immutant 2,
      both its API and its foundation: the Undertow web server. Among
      other things, this gives us
      much better performance
      (~35% more throughput than v1.1.1) and built-in support for
      websockets.
      
      We&#39;ve given a lot of thought to the API, specifically argument names,
      types, order, and return values. We&#39;re reasonably happy with what we
      have at this point, but still very much open to suggestions for
      improvements.
      
      The Web API
      
      The API for immutant.web is small, just two functions and a
      convenient macro:
      
      
      run - runs your handler in a specific environment, responding to
      web requests matching a given host, port, and path. The handler...
    </summary>
    <content type="html">
      &lt;p&gt;Our &lt;code&gt;org.immutant/web&lt;/code&gt; library has changed quite a bit in Immutant 2,
      both its API and its foundation: the &lt;a href=&quot;http://undertow.io/&quot;&gt;Undertow&lt;/a&gt; web server. Among
      other things, this gives us
      &lt;a href=&quot;https://github.com/ptaoussanis/clojure-web-server-benchmarks&quot;&gt;much better performance&lt;/a&gt;
      (~35% more throughput than v1.1.1) and built-in support for
      websockets.&lt;/p&gt;
      
      &lt;p&gt;We've given a lot of thought to the API, specifically argument names,
      types, order, and return values. We're reasonably happy with what we
      have at this point, but still very much open to suggestions for
      improvements.&lt;/p&gt;
      
      &lt;h2&gt;The Web API&lt;/h2&gt;
      
      &lt;p&gt;The API for &lt;a href=&quot;https://projectodd.ci.cloudbees.com/job/immutant2-incremental/lastSuccessfulBuild/artifact/target/apidocs/immutant.web.html&quot;&gt;immutant.web&lt;/a&gt; is small, just two functions and a
      convenient macro:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;
      &lt;code&gt;run&lt;/code&gt; - runs your handler in a specific environment, responding to
      web requests matching a given host, port, and path. The handler may
      be either a Ring function, Servlet instance, or Undertow
      HttpHandler.&lt;/li&gt;
      &lt;li&gt;
      &lt;code&gt;run-dmc&lt;/code&gt; - runs your handler in &lt;em&gt;Development Mode&lt;/em&gt; (the 'C' is silent)&lt;/li&gt;
      &lt;li&gt;
      &lt;code&gt;stop&lt;/code&gt; - stops your handler[s]&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;The following code fragments were tested against
      &lt;a href=&quot;/builds/2x/&quot;&gt;2.x.incremental.96&lt;/a&gt;. You should read
      through the &lt;a href=&quot;/news/2014/04/28/getting-started-with-2x/&quot;&gt;getting started&lt;/a&gt; post and require the &lt;code&gt;immutant.web&lt;/code&gt;
      namespace at a REPL to follow along:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(require '[immutant.web :refer :all])&lt;/pre&gt;
      
      &lt;h3&gt;Common Usage&lt;/h3&gt;
      
      &lt;p&gt;First, we'll need a &lt;a href=&quot;https://github.com/ring-clojure/ring/wiki&quot;&gt;Ring&lt;/a&gt; handler. Yours is probably fancier, but
      this one will do:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(defn app [request]
        {:status 200
         :body &quot;Hello world!&quot;})&lt;/pre&gt;
      
      &lt;p&gt;To make the app available at &lt;a href=&quot;http://localhost:8080/&quot;&gt;http://localhost:8080/&lt;/a&gt;, do this:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(run app)&lt;/pre&gt;
      
      &lt;p&gt;Which, if we make the default values explicit, is equivalent to this:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(run app {:host &quot;localhost&quot; :port 8080 :path &quot;/&quot;})&lt;/pre&gt;
      
      &lt;p&gt;Or, since &lt;code&gt;run&lt;/code&gt; takes options as either an explicit map or keyword
      arguments (kwargs), this:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(run app :host &quot;localhost&quot; :port 8080 :path &quot;/&quot;)&lt;/pre&gt;
      
      &lt;p&gt;The options passed to &lt;code&gt;run&lt;/code&gt; determine the URL used to invoke your
      handler: &lt;code&gt;http://{host}:{port}{path}&lt;/code&gt;&lt;/p&gt;
      
      &lt;p&gt;To replace your &lt;code&gt;app&lt;/code&gt; handler with another, just call run again with
      the same options, and it'll replace the old handler with the new:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(run (fn [_] {:status 200 :body &quot;hi!&quot;}))&lt;/pre&gt;
      
      &lt;p&gt;To stop the handler, do this:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(stop)&lt;/pre&gt;
      
      &lt;p&gt;Which is equivalent to this:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(stop {:host &quot;localhost&quot; :port 8080 :path &quot;/&quot;})&lt;/pre&gt;
      
      &lt;p&gt;Or, if you prefer kwargs, this:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(stop :host &quot;localhost&quot; :port 8080 :path &quot;/&quot;)&lt;/pre&gt;
      
      &lt;p&gt;Alternatively, you can save run's return value and pass it to stop to
      stop your handler.&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(def server (run app {:port 4242 :path &quot;/hello&quot;}))
      ...
      (stop server)&lt;/pre&gt;
      
      &lt;p&gt;That's pretty much all there is to it.&lt;/p&gt;
      
      &lt;p&gt;You don't even really need to stop your handlers if you're content to
      just let the JVM exit, but it can be handy at a REPL.&lt;/p&gt;
      
      &lt;h3&gt;Advanced Usage&lt;/h3&gt;
      
      &lt;p&gt;The &lt;code&gt;run&lt;/code&gt; function returns a map that includes the options passed to
      it, so you can thread &lt;code&gt;run&lt;/code&gt; calls together, useful when your
      application runs multiple handlers. For example,&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(def everything (-&amp;gt; (run hello)
                        (assoc :path &quot;/howdy&quot;)
                        (-&amp;gt;&amp;gt; (run howdy))
                        (merge {:path &quot;/&quot; :port 8081})
                        (-&amp;gt;&amp;gt; (run ola))))&lt;/pre&gt;
      
      &lt;p&gt;The above actually creates two Undertow web server instances: one
      serving requests for the &lt;code&gt;hello&lt;/code&gt; and &lt;code&gt;howdy&lt;/code&gt; handlers on port 8080,
      and one serving &lt;code&gt;ola&lt;/code&gt; responses on port 8081.&lt;/p&gt;
      
      &lt;p&gt;You can stop all three apps (and shutdown the two web servers) like
      so:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(stop everything)&lt;/pre&gt;
      
      &lt;p&gt;Alternatively, you could stop only the &lt;code&gt;ola&lt;/code&gt; app like so:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(stop {:path &quot;/&quot; :port 8081})&lt;/pre&gt;
      
      &lt;p&gt;You could even omit &lt;code&gt;:path&lt;/code&gt; since &quot;/&quot; is the default. And because ola
      was the only app running on the web server listening on port 8081, it
      will be shutdown automatically.&lt;/p&gt;
      
      &lt;h3&gt;Handler Types&lt;/h3&gt;
      
      &lt;p&gt;Though the handlers you run will typically be Ring functions, you can
      also pass any valid implementation of &lt;code&gt;javax.servlet.Servlet&lt;/code&gt; or
      &lt;code&gt;io.undertow.server.HttpHandler&lt;/code&gt;. For an example of the former, here's
      a very simple &lt;a href=&quot;https://github.com/pedestal/pedestal&quot;&gt;Pedestal&lt;/a&gt; service running on Immutant:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(ns testing.hello.service
        (:require [io.pedestal.service.http :as http]
                  [io.pedestal.service.http.route.definition :refer [defroutes]]
                  [ring.util.response :refer [response]]
                  [immutant.web :refer [run]]))
      
      (defn home-page [request] (response &quot;Hello World!&quot;))
      (defroutes routes [[[&quot;/&quot; {:get home-page}]]])
      (def service {::http/routes routes})
      
      (defn start [options]
        (run (::http/servlet (http/create-servlet service)) options))&lt;/pre&gt;
      
      &lt;h3&gt;Development Mode&lt;/h3&gt;
      
      &lt;p&gt;The &lt;code&gt;run-dmc&lt;/code&gt; macro resulted from a desire to provide a no-fuss way to
      enjoy all the benefits of REPL-based development. Before calling
      &lt;code&gt;run&lt;/code&gt;, &lt;code&gt;run-dmc&lt;/code&gt; will first ensure that your Ring handler is
      var-quoted and wrapped in the &lt;code&gt;reload&lt;/code&gt; and &lt;code&gt;stacktrace&lt;/code&gt; middleware
      from the &lt;code&gt;ring-devel&lt;/code&gt; library (which must be included among your
      &lt;code&gt;[:profiles :dev :dependencies]&lt;/code&gt; in &lt;code&gt;project.clj&lt;/code&gt;). It'll then open
      your app in a browser.&lt;/p&gt;
      
      &lt;p&gt;Both &lt;code&gt;run&lt;/code&gt; and &lt;code&gt;run-dmc&lt;/code&gt; accept the same options. You can even mix
      them within a single threaded call.&lt;/p&gt;
      
      &lt;h2&gt;The Websocket API&lt;/h2&gt;
      
      &lt;p&gt;Also included in the &lt;code&gt;org.immutant/web&lt;/code&gt; library is the
      &lt;a href=&quot;https://projectodd.ci.cloudbees.com/job/immutant2-incremental/lastSuccessfulBuild/artifact/target/apidocs/immutant.websocket.html&quot;&gt;immutant.websocket&lt;/a&gt; namespace, which includes a &lt;code&gt;Channel&lt;/code&gt; protocol
      and the &lt;code&gt;create-handler&lt;/code&gt; function. It accepts a map of callback
      functions, invoked asynchronously during the lifecycle of a websocket.
      The valid websocket event keywords and their corresponding callback
      signatures are as follows:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;  :on-message (fn [channel message])
        :on-open    (fn [channel])
        :on-close   (fn [channel {:keys [code reason]}])
        :on-error   (fn [channel throwable])
        :fallback   (fn [request] (response ...))&lt;/pre&gt;
      
      &lt;p&gt;To create your websocket endpoint, pass the result from
      &lt;code&gt;create-handler&lt;/code&gt; to &lt;code&gt;immutant.web/run&lt;/code&gt;. Here's an example that
      asynchronously returns the upper-cased equivalent of whatever message
      it receives:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(ns whatever
        (:require [immutant.web :as web]
                  [immutant.websocket :as ws]
                  [clojure.string :refer [upper-case]]))
      
      (defn create-websocket []
        (web/run
          (ws/create-handler {:on-message (fn [c m] (ws/send! c (upper-case m)))})
          {:path &quot;/websocket&quot;}))&lt;/pre&gt;
      
      &lt;p&gt;Another function, &lt;code&gt;immutant.websocket/create-servlet&lt;/code&gt;, can be used to
      create a &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=356&quot;&gt;JSR 356&lt;/a&gt; Endpoint. The channel passed to the callbacks is an
      instance of &lt;code&gt;javax.websocket.Session&lt;/code&gt;, extended to the
      &lt;code&gt;immutant.websocket.Channel&lt;/code&gt; protocol.&lt;/p&gt;
      
      &lt;h2&gt;Try it out!&lt;/h2&gt;
      
      &lt;p&gt;We'd love to hear some feedback on this stuff. Find us on our
      &lt;a href=&quot;/community/&quot;&gt;community&lt;/a&gt; page and join the fun!&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2014/04/28/getting-started-with-2x/</id>
    <title>Getting Started With Immutant 2</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2014-04-28T00:00:00+00:00</published>
    <link href="/news/2014/04/28/getting-started-with-2x/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="thedeuce"></category>
    <category term="getting-started"></category>
    <category term="tutorial"></category>
    <summary>
      We&#39;re hard at work on
      Immutant 2.0, and have a ways to go before we reach
      feature parity with 1.x. But if you are interested in playing with
      what we have now, then this article is for you!
      
      Getting Immutant
      
      Our CI server publishes an incremental release for each
      successful build. In order to use an incremental build, you&#39;ll need to
      add a repository and dependencies to your project.clj. Currently,
      only our scheduling and web artifacts contain implementations, so
      let&#39;s add those:
      
      (defproject some-project "1.2.3"
        ...
        :dependencies [...
                       [org.immutant/scheduling "2.x.incremental.BUILD_NUM"]
        ...
    </summary>
    <content type="html">
      &lt;p&gt;We're &lt;a href=&quot;http://i.imgur.com/cSSB8Dx.jpg&quot;&gt;hard at work&lt;/a&gt; on
      &lt;a href=&quot;/news/2014/04/02/the-deuce/&quot;&gt;Immutant 2.0&lt;/a&gt;, and have a ways to go before we reach
      feature parity with 1.x. But if you are interested in playing with
      what we have now, then this article is for you!&lt;/p&gt;
      
      &lt;h2&gt;Getting Immutant&lt;/h2&gt;
      
      &lt;p&gt;Our CI server publishes an &lt;a href=&quot;/builds/2x/&quot;&gt;incremental release&lt;/a&gt; for each
      successful build. In order to use an incremental build, you'll need to
      add a repository and dependencies to your &lt;code&gt;project.clj&lt;/code&gt;. Currently,
      only our &lt;code&gt;scheduling&lt;/code&gt; and &lt;code&gt;web&lt;/code&gt; artifacts contain implementations, so
      let's add those:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(defproject some-project &quot;1.2.3&quot;
        ...
        :dependencies [...
                       [org.immutant/scheduling &quot;2.x.incremental.BUILD_NUM&quot;]
                       [org.immutant/web        &quot;2.x.incremental.BUILD_NUM&quot;]]
        :repositories [[&quot;Immutant 2.x incremental builds&quot;
                        &quot;http://downloads.immutant.org/incremental/&quot;]])&lt;/pre&gt;
      
      &lt;p&gt;replacing &lt;code&gt;BUILD_NUM&lt;/code&gt; with the build number for the version you want
      to use. You can get the build number from our &lt;a href=&quot;/builds/2x/&quot;&gt;builds&lt;/a&gt; page - the
      latest build number is 62 as of this article.&lt;/p&gt;
      
      &lt;p&gt;&lt;strong&gt;Edit: build 62 has been garbage collected - be sure to grab the latest
      build from the &lt;a href=&quot;/builds/2x/&quot;&gt;builds&lt;/a&gt; page.&lt;/strong&gt;&lt;/p&gt;
      
      &lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; We're bringing in the artifacts piecemeal above, but we also provide
      an aggregate artifact that brings in all of the Immutant dependencies
      in one shot if you'd rather use that: &lt;code&gt;org.immutant/immutant&lt;/code&gt;.&lt;/p&gt;
      
      &lt;p&gt;That's it! If you are used to Immutant 1.x, you'll notice that there
      is no download or install step - Immutant 2 is usable as a set of
      libraries that you consume just like any other Clojure library.&lt;/p&gt;
      
      &lt;h2&gt;What's in those artifacts?&lt;/h2&gt;
      
      &lt;p&gt;Along with the artifacts, each CI build publishes the API docs for all
      of the Immutant namespaces. You can see the docs for
      &lt;a href=&quot;https://projectodd.ci.cloudbees.com/job/immutant2-incremental/62/artifact/target/apidocs/index.html&quot;&gt;a specific build&lt;/a&gt; (build #62 in this case), or the
      &lt;a href=&quot;https://projectodd.ci.cloudbees.com/job/immutant2-incremental/lastSuccessfulBuild/artifact/target/apidocs/index.html&quot;&gt;latest build&lt;/a&gt;.&lt;/p&gt;
      
      &lt;p&gt;If you start playing with any of that API, be aware that it is
      currently in a pre-alpha state, and may change dramatically at any
      time.&lt;/p&gt;
      
      &lt;h2&gt;What's next?&lt;/h2&gt;
      
      &lt;p&gt;We plan on publishing articles in the near future focusing on using
      the web and scheduling namespaces, followed by articles on websockets,
      messaging, and caching as soon as we get those implementations off of
      the ground. We'll also cover using those same namespaces within a
      &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; container, taking advantage of the clustering features the
      container provides.&lt;/p&gt;
      
      &lt;p&gt;Once we have most of our namespaces in semi-decent shape, we'll
      release our first alpha, probably in mid to late June.&lt;/p&gt;
      
      &lt;p&gt;As always, if you have any questions, comments, or other feedback, feel
      free to &lt;a href=&quot;/community&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2014/04/08/announcing-1-1-1/</id>
    <title>Immutant 1.1.1 Released</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2014-04-08T00:00:00+00:00</published>
    <link href="/news/2014/04/08/announcing-1-1-1/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="releases"></category>
    <summary>
      We&#39;re as happy as
      these twin girls to
      announce Immutant 1.1.1 - &quot;BlueChicago&quot;.
      
      This is primarily a bug fix release and, unless any new bugs are
      reported against it, possibly our last 1.x release. We are now
      focusing our efforts on The Deuce. We will
      make every reasonable effort to fix any bugs reported against 1.x, but
      we will only be adding features to 2.x. As always, view our road map
      here.
      
      What is Immutant?
      
      Immutant is an application server for
      Clojure. It&#39;s an integrated platform built on
      JBoss AS7 that aims to reduce the inherent
      incidental complexity
      in real world applications.
      
      What&#39;s in this release?
      
      See the details below, but highlights include:
      
      
      Previous versions of Immutant...
    </summary>
    <content type="html">
      &lt;p&gt;We're as happy as
      &lt;a href=&quot;https://www.youtube.com/watch?v=to7uIG8KYhg&quot;&gt;these twin girls&lt;/a&gt; to
      announce Immutant &lt;strong&gt;1.1.1 - &quot;BlueChicago&quot;&lt;/strong&gt;.&lt;/p&gt;
      
      &lt;p&gt;This is primarily a bug fix release and, unless any new bugs are
      reported against it, possibly our last 1.x release. We are now
      focusing our efforts on &lt;a href=&quot;/news/2014/04/02/the-deuce/&quot;&gt;The Deuce&lt;/a&gt;. We will
      make every reasonable effort to fix any bugs reported against 1.x, but
      we will only be adding features to 2.x. As always, view our road map
      &lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;What is Immutant?&lt;/h2&gt;
      
      &lt;p&gt;Immutant is an application server for
      &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;. It's an integrated platform built on
      &lt;a href=&quot;http://www.jboss.org/as7&quot;&gt;JBoss AS7&lt;/a&gt; that aims to reduce the inherent
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Accidental_complexity&quot;&gt;incidental complexity&lt;/a&gt;
      in real world applications.&lt;/p&gt;
      
      &lt;h2&gt;What's in this release?&lt;/h2&gt;
      
      &lt;p&gt;See the details below, but highlights include:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;Previous versions of Immutant hang on boot under Java 8. This is now
      fixed.&lt;/li&gt;
      &lt;li&gt;Clojure 1.6.0 is now the default when not specified, and we dropped
      support for 1.3.1 (you can still use it, we just don't test against
      it).&lt;/li&gt;
      &lt;li&gt;We unregister JDBC drivers at undeployment now, reducing the
      potential for memory leaks.&lt;/li&gt;
      &lt;li&gt;Recreating an Immutant cache with different options wasn't actually
      reconfiguring it. This is now fixed.&lt;/li&gt;
      &lt;li&gt;Any plugins that &quot;hook&quot; &lt;code&gt;leiningen.core.main&lt;/code&gt; tasks in an app's
      &lt;code&gt;project.clj&lt;/code&gt; could fail to deploy, usually with a &lt;code&gt;bultitude&lt;/code&gt;
      error. Now fixed.&lt;/li&gt;
      &lt;/ul&gt;&lt;h2&gt;Get It&lt;/h2&gt;
      
      &lt;p&gt;The simplest way to install or upgrade to 1.1.1 is via our
      &lt;a href=&quot;https://clojars.org/lein-immutant&quot;&gt;Leiningen plugin&lt;/a&gt;:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;$ lein immutant install 1.1.1
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;See our &lt;a href=&quot;/install/&quot;&gt;install page&lt;/a&gt; for more details. Once you have it
      installed, take a look at our &lt;a href=&quot;/tutorials/&quot;&gt;tutorials&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;What's next?&lt;/h2&gt;
      
      &lt;p&gt;As we said above, we'll be focusing on
      &lt;a href=&quot;/news/2014/04/02/the-deuce/&quot;&gt;Immutant 2&lt;/a&gt;, with a tentative release season
      beginning this summer.&lt;/p&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;If you have any questions, issues, or other feedback about Immutant,
      you can always find us on &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/mailing_lists&quot;&gt;our mailing lists&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Issues resolved in 1.1.1&lt;/h2&gt;
      
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-324&quot;&gt;IMMUTANT-324&lt;/a&gt;] -         Cache lookup can return one in a TERMINATED state&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-386&quot;&gt;IMMUTANT-386&lt;/a&gt;] -         Enable messaging to be XA aware outside of container&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-400&quot;&gt;IMMUTANT-400&lt;/a&gt;] -         ring request body can't be read multiple times&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-401&quot;&gt;IMMUTANT-401&lt;/a&gt;] -         errors during loading of ring options (handler/init/destroy) are ignored&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-402&quot;&gt;IMMUTANT-402&lt;/a&gt;] -         Honor nrepl options in the project.clj :ring map&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-403&quot;&gt;IMMUTANT-403&lt;/a&gt;] -         cache/swap! on an inexistent key blocks forever&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-406&quot;&gt;IMMUTANT-406&lt;/a&gt;] -         :last-value-queue fails with default :address-full-message-policy of :page&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-407&quot;&gt;IMMUTANT-407&lt;/a&gt;] -         Plugins in project.clj that hook any leiningen.core.main tasks cause deployment to fail&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-408&quot;&gt;IMMUTANT-408&lt;/a&gt;] -         Pipelines that should return nil instead return the deref timeout value&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-409&quot;&gt;IMMUTANT-409&lt;/a&gt;] -         log message when msg/unlisten is called&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-411&quot;&gt;IMMUTANT-411&lt;/a&gt;] -         Mention in the docs that listening with :concurrency on a topic may be a bad idea&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-412&quot;&gt;IMMUTANT-412&lt;/a&gt;] -         Unable to deploy ima multiple times using deployment descriptors&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-413&quot;&gt;IMMUTANT-413&lt;/a&gt;] -         web/run fails when not passed a Var as the handler&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-415&quot;&gt;IMMUTANT-415&lt;/a&gt;] -         Jobs: allow configuration of thread pool size&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-416&quot;&gt;IMMUTANT-416&lt;/a&gt;] -         auto nrepl starting in dev mode can't be disabled&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-417&quot;&gt;IMMUTANT-417&lt;/a&gt;] -         Permgen leaks due to JDBC&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-418&quot;&gt;IMMUTANT-418&lt;/a&gt;] -         Support Java 8&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-420&quot;&gt;IMMUTANT-420&lt;/a&gt;] -         api doc src links don't work for protocol functions&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-421&quot;&gt;IMMUTANT-421&lt;/a&gt;] -         Update to clojure 1.6.0&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-423&quot;&gt;IMMUTANT-423&lt;/a&gt;] -         cache/create doesn't reconfigure an existing cache&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-425&quot;&gt;IMMUTANT-425&lt;/a&gt;] -         Deploying archives still resolves plugin dependencies&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-426&quot;&gt;IMMUTANT-426&lt;/a&gt;] -         expose :max-redelivery-delay in hornetq/set-address-options&lt;/li&gt;
      &lt;/ul&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2014/04/08/lein-immutant-1-2-1/</id>
    <title>lein-immutant Plugin 1.2.1 Released</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2014-04-08T00:00:00+00:00</published>
    <link href="/news/2014/04/08/lein-immutant-1-2-1/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="lein"></category>
    <category term="lein-immutant"></category>
    <category term="installation"></category>
    <summary>
      We just released version 1.2.1 of
      our Leiningen plugin. This release contains the following changes:
      
      
      Archives that include their dependencies now have deploy-time
      dependency resolution disabled by default.
      Archives that include their dependencies now also include any plugin
      dependencies as well, though they will only be recognized by
      Immutant 1.1.1 or newer.
      The archive subtask now takes a --version flag, which will cause
      the project version to be appended to the artifact name.
      The archive, deploy, server, and test subtasks now trigger
      execution of any :prep-tasks (which are, by default, javac and
      compile).
      
      
      For the full list of changes, see the milestone.
      
      Get it
      
      If you&#39;re already using lein-immutant you probably already know how
      to...
    </summary>
    <content type="html">
      &lt;p&gt;We just released version &lt;a href=&quot;https://clojars.org/lein-immutant&quot;&gt;1.2.1&lt;/a&gt; of
      our Leiningen plugin. This release contains the following changes:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;Archives that include their dependencies now have deploy-time
      dependency resolution disabled by default.&lt;/li&gt;
      &lt;li&gt;Archives that include their dependencies now also include any plugin
      dependencies as well, though they will only be recognized by
      &lt;a href=&quot;../announcing-1-1-1/&quot;&gt;Immutant 1.1.1&lt;/a&gt; or newer.&lt;/li&gt;
      &lt;li&gt;The &lt;code&gt;archive&lt;/code&gt; subtask now takes a &lt;code&gt;--version&lt;/code&gt; flag, which will cause
      the project version to be appended to the artifact name.&lt;/li&gt;
      &lt;li&gt;The &lt;code&gt;archive&lt;/code&gt;, &lt;code&gt;deploy&lt;/code&gt;, &lt;code&gt;server&lt;/code&gt;, and &lt;code&gt;test&lt;/code&gt; subtasks now trigger
      execution of any &lt;code&gt;:prep-tasks&lt;/code&gt; (which are, by default, &lt;code&gt;javac&lt;/code&gt; and
      &lt;code&gt;compile&lt;/code&gt;).&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;For the full list of changes, see &lt;a href=&quot;https://github.com/immutant/lein-immutant/issues?milestone=15&amp;amp;state=closed&quot;&gt;the milestone&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Get it&lt;/h2&gt;
      
      &lt;p&gt;If you're already using &lt;code&gt;lein-immutant&lt;/code&gt; you probably already know how
      to do this, but just in case - to install it, add it to the &lt;code&gt;:plugins&lt;/code&gt;
      list in your &lt;code&gt;:user&lt;/code&gt; profile in &lt;code&gt;~/.lein/profiles.clj&lt;/code&gt;:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;{:user {:plugins [[lein-immutant &quot;1.2.1&quot;]]}}
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;h2&gt;Get in touch&lt;/h2&gt;
      
      &lt;p&gt;If you have any questions, issues, or other feedback, you can always
      find us on &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or you can file an
      issue on
      &lt;a href=&quot;https://github.com/immutant/lein-immutant/issues&quot;&gt;lein-immutant&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2014/04/02/the-deuce/</id>
    <title>The Deuce - Plans for Immutant 2</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2014-04-02T00:00:00+00:00</published>
    <link href="/news/2014/04/02/the-deuce/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="thedeuce"></category>
    <category term="torquebox"></category>
    <summary>
      We haven&#39;t blogged about anything in a few months because we&#39;ve been
      thinking about how we&#39;d like to improve Immutant. We&#39;ve come up with a
      couple of high-level goals:
      
      
      Fully-functional libraries; no container required
      Applications using those libraries should be optionally deployable
      to a stock WildFly or EAP container
      
      
      One goal we don&#39;t have is API compatibility with Immutant 1.x.
      
      Just Libraries
      
      For its second major release, Immutant will simply be a collection of
      libraries, one for each of the commodity services currently available
      to applications using an Immutant 1.x container: web, scheduling,
      messaging, caching, and transactions. These services will be provided
      by the following underlying components: Undertow, Quartz,
      HornetQ, Infinispan, and Narayana,...
    </summary>
    <content type="html">
      &lt;p&gt;We haven't blogged about anything in a few months because we've been
      thinking about how we'd like to improve Immutant. We've come up with a
      couple of high-level goals:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;Fully-functional libraries; no container required&lt;/li&gt;
      &lt;li&gt;Applications using those libraries should be optionally deployable
      to a stock &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; or &lt;a href=&quot;https://www.jboss.org/products/eap&quot;&gt;EAP&lt;/a&gt; container&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;One goal we don't have is API compatibility with Immutant 1.x.&lt;/p&gt;
      
      &lt;h2&gt;Just Libraries&lt;/h2&gt;
      
      &lt;p&gt;For its second major release, Immutant will simply be a collection of
      libraries, one for each of the commodity services currently available
      to applications using an Immutant 1.x container: web, scheduling,
      messaging, caching, and transactions. These services will be provided
      by the following underlying components: &lt;a href=&quot;http://undertow.io/&quot;&gt;Undertow&lt;/a&gt;, &lt;a href=&quot;http://quartz-scheduler.org/&quot;&gt;Quartz&lt;/a&gt;,
      &lt;a href=&quot;http://www.jboss.org/hornetq&quot;&gt;HornetQ&lt;/a&gt;, &lt;a href=&quot;http://infinispan.org/&quot;&gt;Infinispan&lt;/a&gt;, and &lt;a href=&quot;http://www.jboss.org/narayana&quot;&gt;Narayana&lt;/a&gt;, respectively. All but Quartz
      are the same as those used in WildFly 8.&lt;/p&gt;
      
      &lt;p&gt;So when you embed any Immutant 2.x library in your app, it will not
      require a &quot;container&quot; to be fully-functional. There is no required
      &quot;installation&quot; step. There is no required &quot;deployment&quot; step.&lt;/p&gt;
      
      &lt;p&gt;Just libraries.&lt;/p&gt;
      
      &lt;h2&gt;Just WildFly/EAP&lt;/h2&gt;
      
      &lt;p&gt;Fully-functional libraries are great, but there are still good reasons
      to deploy an app to a container, e.g. security, monitoring,
      clustering, etc. We want developers to be able to run the exact same
      application either outside or inside an app server. When outside, all
      functions in the Immutant namespaces will work as expected. But
      inside, you get more, automatically, without any changes to your code:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;Web session replication&lt;/li&gt;
      &lt;li&gt;Load-balanced message distribution&lt;/li&gt;
      &lt;li&gt;Highly-available &quot;singleton&quot; scheduled jobs&lt;/li&gt;
      &lt;li&gt;Flexible Infinispan cache replication&lt;/li&gt;
      &lt;li&gt;Multiple polyglot app deployments&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;Immutant 1.x consists of modules and subsystems repackaged on top of a
      now-quite-old, forked &lt;a href=&quot;http://www.jboss.org/jbossas&quot;&gt;AS7&lt;/a&gt; distribution. AS7 is no longer under
      active development. All of the innovation is occurring in
      &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt;, and it became increasingly difficult to cherry-pick
      relevant changes into our fork.&lt;/p&gt;
      
      &lt;p&gt;So we're going to eliminate that headache in 2.x. Immutant
      applications will be deployable into stock, vanilla WildFly/EAP
      servers. No modules or subsystems or special deployment descriptors
      required. Just a jar file with a little code to setup the classpath
      and engage the container's services.&lt;/p&gt;
      
      &lt;p&gt;This means no more using Leiningen to resolve dependencies at
      deployment, which has been a source of bugs from the more
      &lt;em&gt;adventurous&lt;/em&gt; &lt;code&gt;project.clj&lt;/code&gt; files.&lt;/p&gt;
      
      &lt;p&gt;This also obviates &lt;a href=&quot;https://github.com/immutant/overlay&quot;&gt;overlay&lt;/a&gt;, another source of bugs. &lt;a href=&quot;/&quot;&gt;TorqueBox&lt;/a&gt; 4.x
      apps will work like Immutant 2.x, simple jar files deployed to stock
      WildFly/EAP installations, achieving the same features available from
      &lt;a href=&quot;https://github.com/immutant/overlay&quot;&gt;overlay&lt;/a&gt; today, without the brittle complexity.&lt;/p&gt;
      
      &lt;h2&gt;Same Features, Less Hassle&lt;/h2&gt;
      
      &lt;p&gt;Development is occurring on our &lt;a href=&quot;https://github.com/immutant/immutant/tree/thedeuce&quot;&gt;thedeuce&lt;/a&gt; branch right now, but we'll
      merge it to master once we cut a 1.1.1 release. And we're publishing
      incremental releases
      &lt;a href=&quot;http://repository-projectodd.forge.cloudbees.com/incremental/&quot;&gt;here&lt;/a&gt;.
      We'll include more detailed instructions on how to try them in a
      future post. We currently have basic ring and scheduling support
      implemented, with both working standalone and inside a WildFly
      container. We hope to cut our first 2.x release this summer.&lt;/p&gt;
      
      &lt;p&gt;Immutant was inspired by its sister project, TorqueBox, under active
      development for almost 6 years now. Embracing Clojure's REPL, we
      strove to make Immutant's libraries more dynamic than TorqueBox. This
      caused the API's in each project to diverge somewhat, even though we
      have a number of community members who use both together via
      messaging, caching, etc.&lt;/p&gt;
      
      &lt;p&gt;So Immutant 2.x and TorqueBox 4.x represent an opportunity for both
      teams to work together to realign and harden the service API's, with
      an eye toward supporting other languages and implementations in the
      future. Please join us in either #torquebox or #immutant on
      &lt;a href=&quot;http://freenode.net/&quot;&gt;freenode&lt;/a&gt;, to express your opinions and desires.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2014/02/04/announcing-1-1-0/</id>
    <title>Immutant 1.1.0 Released</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2014-02-04T00:00:00+00:00</published>
    <link href="/news/2014/02/04/announcing-1-1-0/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="releases"></category>
    <summary>
      We&#39;re as happy as
      this penguin to
      announce Immutant 1.1.0 - &quot;CelloPudding&quot;.
      
      This is a feature and bug fix release. As always, view our road map
      here.
      
      What is Immutant?
      
      Immutant is an application server for
      Clojure. It&#39;s an integrated platform built on
      JBoss AS7 that aims to reduce the inherent
      incidental complexity
      in real world applications.
      
      What&#39;s in this release?
      
      
      We&#39;ve upgraded Infinispan to its latest
      version: 6.0.0.Final. This is primarily to support
      using Immutant as a data store for Datomic
      and offers more stability improvements over the previous release.
      We&#39;ve shaved a few seconds off the boot process during application
      deployment. Part of gaining this speedup was no longer loading
      clojure.tools.logging, so if your app relies...
    </summary>
    <content type="html">
      &lt;p&gt;We're as happy as
      &lt;a href=&quot;https://www.youtube.com/watch?v=mYitP5iXVPQ&quot;&gt;this penguin&lt;/a&gt; to
      announce Immutant &lt;strong&gt;1.1.0 - &quot;CelloPudding&quot;&lt;/strong&gt;.&lt;/p&gt;
      
      &lt;p&gt;This is a feature and bug fix release. As always, view our road map
      &lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;What is Immutant?&lt;/h2&gt;
      
      &lt;p&gt;Immutant is an application server for
      &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;. It's an integrated platform built on
      &lt;a href=&quot;http://www.jboss.org/as7&quot;&gt;JBoss AS7&lt;/a&gt; that aims to reduce the inherent
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Accidental_complexity&quot;&gt;incidental complexity&lt;/a&gt;
      in real world applications.&lt;/p&gt;
      
      &lt;h2&gt;What's in this release?&lt;/h2&gt;
      
      &lt;ul&gt;
      &lt;li&gt;We've upgraded &lt;a href=&quot;http://infinispan.org&quot;&gt;Infinispan&lt;/a&gt; to its latest
      version: 6.0.0.Final. This is primarily to support
      &lt;a href=&quot;/news/2013/10/28/hotrod-datomic/&quot;&gt;using Immutant as a data store for Datomic&lt;/a&gt;
      and offers more stability improvements over the previous release.&lt;/li&gt;
      &lt;li&gt;We've shaved a few seconds off the boot process during application
      deployment. Part of gaining this speedup was no longer loading
      &lt;code&gt;clojure.tools.logging&lt;/code&gt;, so if your app relies on it, it needs to be
      listed among your dependencies.&lt;/li&gt;
      &lt;li&gt;We've tried to reduce the &quot;noise&quot; in our log output. This is part of
      an ongoing process to log appropriate information at the right
      severity level. Feedback always appreciated in this regard.&lt;/li&gt;
      &lt;li&gt;You can now alter the logging level for the console output (and
      &lt;code&gt;server.log&lt;/code&gt;) by setting the &lt;code&gt;jboss.logging.level&lt;/code&gt; system property
      or by passing &lt;code&gt;--log-level&lt;/code&gt; to the &lt;code&gt;immutant run&lt;/code&gt; task of our
      &lt;a href=&quot;/install&quot;&gt;plugin&lt;/a&gt; (assuming you are running version
      &lt;a href=&quot;../lein-immutant-1-2-0&quot;&gt;1.2.0&lt;/a&gt; of the plugin or newer).&lt;/li&gt;
      &lt;li&gt;Keyword arguments to our functions are now validated, reducing the
      risk of unexpected behavior due to typos.&lt;/li&gt;
      &lt;li&gt;We've expanded our messaging api to include
      &lt;a href=&quot;/documentation/1.1.0/apidoc/immutant.messaging.hornetq.html#var-set-address-options&quot;&gt;per-queue address settings&lt;/a&gt;,
      inspired by &lt;a href=&quot;https://gist.github.com/cemerick/6115017&quot;&gt;Chas' work&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;
      &lt;a href=&quot;https://github.com/clojure/data.fressian&quot;&gt;Fressian&lt;/a&gt; is now a
      supported codec for messaging and caching, inspired by
      &lt;a href=&quot;https://github.com/vitalreactor/immutant-fressian&quot;&gt;Ian's work&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;Immutant now implements the &lt;code&gt;URLClasspath&lt;/code&gt; protocol introduced in
      version &lt;code&gt;0.2.2&lt;/code&gt; of
      &lt;a href=&quot;https://github.com/clojure/java.classpath&quot;&gt;java.classpath&lt;/a&gt; enabling
      an accurate view of your app's isolated classpath within Immutant
      via a Clojure core library.&lt;/li&gt;
      &lt;li&gt;In the interest of speeding up our incremental builds, we've dropped
      support for apps using Clojure 1.3. They may still work, but that
      version is no longer a part of our integration tests.&lt;/li&gt;
      &lt;li&gt;We've also dropped support for our &lt;em&gt;full&lt;/em&gt; distribution. We only ship
      a &lt;em&gt;slim&lt;/em&gt; distro now, providing only the minimal JBoss services
      required to support our Clojure libraries. Over time, Immutant has
      diverged significantly from the main trunk of JBoss AS development now
      known as &lt;a href=&quot;http://wildfly.org&quot;&gt;WildFly&lt;/a&gt;. For those seeking a full,
      modern JEE stack, WildFly is the best option. We're expecting future
      versions of Immutant to more seamlessly integrate with it.&lt;/li&gt;
      &lt;/ul&gt;&lt;h2&gt;Get It&lt;/h2&gt;
      
      &lt;p&gt;The simplest way to install or upgrade to 1.1.0 is via our
      &lt;a href=&quot;https://clojars.org/lein-immutant&quot;&gt;Leiningen plugin&lt;/a&gt;:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;$ lein immutant install 1.1.0
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;See our &lt;a href=&quot;/install/&quot;&gt;install page&lt;/a&gt; for more details. Once you have it
      installed, take a look at our &lt;a href=&quot;/tutorials/&quot;&gt;tutorials&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;What's next?&lt;/h2&gt;
      
      &lt;p&gt;Our plans are to begin development on version 2.x of Immutant, with a
      specific emphasis on the ability to optionally embed Immutant
      libraries within your app, as opposed to deploying them to a
      container. The latter will continue to be supported, of course, as
      there are applications for which it makes sense, but we want to
      explore the idea of embedding not only web features but messaging,
      caching and scheduling as well. We plan to devote time in the next few
      weeks figuring out what this will look like. Expect a blog post with
      more details soon.&lt;/p&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;If you have any questions, issues, or other feedback about Immutant,
      you can always find us on &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/mailing_lists&quot;&gt;our mailing lists&lt;/a&gt;. &lt;/p&gt;
      
      &lt;h2&gt;Issues resolved in 1.1.0&lt;/h2&gt;
      
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-261&quot;&gt;IMMUTANT-261&lt;/a&gt;] -         add cluster tests&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-320&quot;&gt;IMMUTANT-320&lt;/a&gt;] -         Consider supporting per-queue address-settings&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-338&quot;&gt;IMMUTANT-338&lt;/a&gt;] -         Loading runtime/bootstrap is slower than a turtle drinking molasses on christmas&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-359&quot;&gt;IMMUTANT-359&lt;/a&gt;] -         Remove deprecated functions&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-373&quot;&gt;IMMUTANT-373&lt;/a&gt;] -         Upgrade Infinispan to 6.0.0&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-376&quot;&gt;IMMUTANT-376&lt;/a&gt;] -         Bump up immutant.web's ring dep to 1.2.1&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-379&quot;&gt;IMMUTANT-379&lt;/a&gt;] -         loading immutant.xa before runtime initialization causes immutant.xa.transactions/manager to be nil&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-380&quot;&gt;IMMUTANT-380&lt;/a&gt;] -         Support data.fressian as a codec&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-381&quot;&gt;IMMUTANT-381&lt;/a&gt;] -         Update to leiningen-core 2.3.4&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-382&quot;&gt;IMMUTANT-382&lt;/a&gt;] -         Update HornetQ to 2.3.1.Final&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-383&quot;&gt;IMMUTANT-383&lt;/a&gt;] -         at-exit fn seems to execute at point where clojure runtime not available&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-387&quot;&gt;IMMUTANT-387&lt;/a&gt;] -         Drop support for clojure 1.3.0&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-389&quot;&gt;IMMUTANT-389&lt;/a&gt;] -         AbstractMethodError when using transactions (database)&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-391&quot;&gt;IMMUTANT-391&lt;/a&gt;] -         messaging.core/delayed shouldn't call the given fn on a realized? call&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-392&quot;&gt;IMMUTANT-392&lt;/a&gt;] -         Disable the full build, and adjust for having just a slim build&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-393&quot;&gt;IMMUTANT-393&lt;/a&gt;] -         Spruce up docs around running Immutant&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-394&quot;&gt;IMMUTANT-394&lt;/a&gt;] -         Enable org.clojure/java.classpath to work inside Immutant&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-395&quot;&gt;IMMUTANT-395&lt;/a&gt;] -         Support fn definitions in :nrepl-middleware&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-396&quot;&gt;IMMUTANT-396&lt;/a&gt;] -         msg/start docs should mention that :durable and :selector are only for queues&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-397&quot;&gt;IMMUTANT-397&lt;/a&gt;] -         Consider validating options passed to various fns&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-398&quot;&gt;IMMUTANT-398&lt;/a&gt;] -         Reduce logging noise&lt;/li&gt;
      &lt;/ul&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2014/02/04/lein-immutant-1-2-0/</id>
    <title>lein-immutant Plugin 1.2.0 Released</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2014-02-04T00:00:00+00:00</published>
    <link href="/news/2014/02/04/lein-immutant-1-2-0/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="lein"></category>
    <category term="lein-immutant"></category>
    <category term="installation"></category>
    <summary>
      We just released version 1.2.0 of
      our Leiningen plugin. This release contains the following changes:
      
      
      You can now pass --log-level to the immutant run task to adjust
      the logging level for the console and server.log output. This only works
      with Immutant 1.1.0 or newer.
      The immutant run task also now takes --offset and --node-name
      options as shortcuts for using a
      port offset and for setting the node name
      when in a cluster.
      There is now an immutant server task that is analogous to ring
      server. It will install Immutant (if not already installed), deploy
      the current application, run Immutant, and open the first web
      handler registered by the app in a browser...
    </summary>
    <content type="html">
      &lt;p&gt;We just released version &lt;a href=&quot;https://clojars.org/lein-immutant&quot;&gt;1.2.0&lt;/a&gt; of
      our Leiningen plugin. This release contains the following changes:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;You can now pass &lt;code&gt;--log-level&lt;/code&gt; to the &lt;code&gt;immutant run&lt;/code&gt; task to adjust
      the logging level for the console and &lt;code&gt;server.log&lt;/code&gt; output. This only works
      with &lt;a href=&quot;../announcing-1-1-0/&quot;&gt;Immutant 1.1.0&lt;/a&gt; or newer.&lt;/li&gt;
      &lt;li&gt;The &lt;code&gt;immutant run&lt;/code&gt; task also now takes &lt;code&gt;--offset&lt;/code&gt; and &lt;code&gt;--node-name&lt;/code&gt;
      options as shortcuts for using a
      &lt;a href=&quot;/tutorials/clustering/&quot;&gt;port offset&lt;/a&gt; and for setting the node name
      when &lt;a href=&quot;/tutorials/clustering/&quot;&gt;in a cluster&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;There is now an &lt;code&gt;immutant server&lt;/code&gt; task that is analogous to &lt;code&gt;ring
      server&lt;/code&gt;. It will install Immutant (if not already installed), deploy
      the current application, run Immutant, and open the first web
      handler registered by the app in a browser (this latter step
      requires &lt;a href=&quot;../announcing-1-1-0/&quot;&gt;Immutant 1.1.0&lt;/a&gt;).&lt;/li&gt;
      &lt;li&gt;Tasks that require Immutant to be installed (&lt;code&gt;deploy&lt;/code&gt;, &lt;code&gt;run&lt;/code&gt;,
      &lt;code&gt;server&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt;) will now automatically install the latest
      versioned release if no Immutant is available.&lt;/li&gt;
      &lt;li&gt;A few minor fixes around the overlay task, including preserving
      proper executable permissions on scripts in the overlaid install.&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;For the full list of changes, see &lt;a href=&quot;https://github.com/immutant/lein-immutant/issues?milestone=13&amp;amp;state=closed&quot;&gt;the milestone&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Get it&lt;/h2&gt;
      
      &lt;p&gt;If you're already using &lt;code&gt;lein-immutant&lt;/code&gt; you probably already know how
      to do this, but just in case - to install it, add it to the &lt;code&gt;:plugins&lt;/code&gt;
      list in your &lt;code&gt;:user&lt;/code&gt; profile in &lt;code&gt;~/.lein/profiles.clj&lt;/code&gt;:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;{:user {:plugins [[lein-immutant &quot;1.2.0&quot;]]}}
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;h2&gt;Get in touch&lt;/h2&gt;
      
      &lt;p&gt;If you have any questions, issues, or other feedback, you can always
      find us on &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or you can file an
      issue on
      &lt;a href=&quot;https://github.com/immutant/lein-immutant/issues&quot;&gt;lein-immutant&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2013/10/28/hotrod-datomic/</id>
    <title>Immutant as a Datomic Storage Service</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2013-10-28T00:00:00+00:00</published>
    <link href="/news/2013/10/28/hotrod-datomic/" rel="alternate" type="text/html" />
    <author>
      <name>Jim Crossley</name>
    </author>
    <category term="datomic"></category>
    <category term="hotrod"></category>
    <category term="overlay"></category>
    <category term="infinispan"></category>
    <summary>
      In this post, I&#39;m going to show you how to configure an Immutant
      cluster as a Datomic storage service and test it with an example
      application. 
      
      Datomic prescribes a unique architecture in which database concepts
      -- transactions, queries, and storage -- are separated. It
      treats external storage engines much the same way a traditional
      database treats a file system. And one of its supported engines is
      Infinispan, which just so happens to be included in Immutant!
      
      But there&#39;s a catch. Immutant only provides in-process access to
      Infinispan. And the Datomic transactor is a standalone
      application meant to run in its own process, so it expects to access
      Infinispan via a...
    </summary>
    <content type="html">
      &lt;p&gt;In this post, I'm going to show you how to configure an Immutant
      cluster as a &lt;a href=&quot;http://www.datomic.com/&quot;&gt;Datomic&lt;/a&gt; storage service and test it with an example
      application. &lt;/p&gt;
      
      &lt;p&gt;Datomic prescribes a &lt;a href=&quot;http://docs.datomic.com/architecture.html&quot;&gt;unique architecture&lt;/a&gt; in which database concepts
      -- &lt;a href=&quot;http://www.datomic.com/overview.html&quot;&gt;transactions, queries, and storage&lt;/a&gt; -- are separated. It
      treats external storage engines much the same way a traditional
      database treats a file system. And one of its supported engines is
      &lt;a href=&quot;http://infinispan.org/&quot;&gt;Infinispan&lt;/a&gt;, which just so happens to be included in Immutant!&lt;/p&gt;
      
      &lt;p&gt;But there's a catch. Immutant only provides in-process access to
      Infinispan. And the Datomic &lt;a href=&quot;http://www.datomic.com/overview.html&quot;&gt;transactor&lt;/a&gt; is a standalone
      application meant to run in its own process, so it expects to access
      Infinispan via a &lt;a href=&quot;http://infinispan.org/docs/6.0.x/user_guide/user_guide.html#_server_modules&quot;&gt;HotRod&lt;/a&gt; server, which is not provided by Immutant...&lt;/p&gt;
      
      &lt;h3&gt;&lt;em&gt;...until now!&lt;/em&gt;&lt;/h3&gt;
      
      &lt;p&gt;As of version 1.1.0 of the &lt;a href=&quot;https://github.com/immutant/lein-immutant&quot;&gt;lein-immutant&lt;/a&gt; plugin, it's possible to
      overlay &lt;a href=&quot;https://github.com/immutant/hotrod-overlay&quot;&gt;the HotRod modules and configuration&lt;/a&gt; onto an
      installation of a recent Immutant incremental build.&lt;/p&gt;
      
      &lt;p&gt;I need to stress &lt;strong&gt;&lt;em&gt;incremental build&lt;/em&gt;&lt;/strong&gt; here. This effort exposed a bug
      in Infinispan 5.3.0, the version included in the official Immutant
      1.0.x releases, that prevented the durability of any data written via
      HotRod. So we upgraded to Infinispan 6.0, but that's currently only
      available in our &lt;a href=&quot;/builds/&quot;&gt;incremental builds&lt;/a&gt;.&lt;/p&gt;
      
      &lt;p&gt;Installing an incremental build is easy. Just pass &lt;code&gt;LATEST&lt;/code&gt; (or a
      specific build number) for the version:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;$ lein immutant install LATEST
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;h2&gt;Why?&lt;/h2&gt;
      
      &lt;p&gt;Before we get started, we should have reasons for doing so.&lt;/p&gt;
      
      &lt;p&gt;If you already have some idea of the benefits of either Datomic or
      Immutant or Infinispan, the benefits of combining them may be
      apparent, but let's be specific:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;
      &lt;strong&gt;Simpler deployment&lt;/strong&gt; There is no external storage service process
      to manage: it's contained within Immutant.&lt;/li&gt;
      &lt;li&gt;
      &lt;strong&gt;Simpler configuration&lt;/strong&gt; Because your Datomic peers are colocated
      with their storage service, the connection URI is always the same on
      any node in the cluster: &lt;code&gt;datomic:inf://localhost:11222/&amp;lt;DB_NAME&amp;gt;&lt;/code&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;strong&gt;Robust high availability&lt;/strong&gt; As we'll see below, once a transactor
      connects to a HotRod peer, it becomes &quot;topology-aware&quot; and remains
      connected as long as there is at least one node in the cluster,
      whether the original peer crashes or not.&lt;/li&gt;
      &lt;li&gt;
      &lt;strong&gt;Linear scalability&lt;/strong&gt; Infinispan's &lt;a href=&quot;http://infinispan.org/docs/6.0.x/user_guide/user_guide.html#_distribution_mode&quot;&gt;distributed replication&lt;/a&gt; limits
      copies of writes to a fixed number of nodes (default 2) regardless
      of cluster size, so database capacity is increased by increasing the
      size of your cluster. A consistent hashing algorithm is used to
      determine which nodes will store a given entry, and the HotRod
      client is aware of the hash distribution, enabling it to use the
      most appropriate remote server for each operation.&lt;/li&gt;
      &lt;/ul&gt;&lt;h2&gt;HotRod&lt;/h2&gt;
      
      &lt;p&gt;Using version 1.1.0 (or higher) of the &lt;a href=&quot;https://github.com/immutant/lein-immutant&quot;&gt;lein-immutant&lt;/a&gt; plugin,
      here's how to add HotRod to your Immutant:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;$ lein immutant overlay hotrod
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;That's it! The next time you run Immutant, you'll have a HotRod
      service awaiting connections on port 11222 with a cache named
      &lt;code&gt;datomic&lt;/code&gt; configured for synchronous, distributed replication,
      persisting its contents to
      &lt;code&gt;$IMMUTANT_HOME/jboss/standalone/data/infinispan/polyglot/datomic.dat&lt;/code&gt;&lt;/p&gt;
      
      &lt;h2&gt;Datomic&lt;/h2&gt;
      
      &lt;p&gt;Datomic comes in two flavors: &lt;a href=&quot;http://www.datomic.com/pricing.html&quot;&gt;Free and Pro&lt;/a&gt;. Infinispan storage
      support is only included in Datomic Pro, so you'll need to
      &lt;a href=&quot;http://www.datomic.com/get-datomic.html&quot;&gt;obtain a license&lt;/a&gt;. BTW, much
      thanks to &lt;a href=&quot;https://twitter.com/stuarthalloway&quot;&gt;Stuart Halloway&lt;/a&gt; for hooking me up with one to get this
      stuff working.&lt;/p&gt;
      
      &lt;div class=&quot;notice big&quot;&gt;
      
        &lt;i&gt;&lt;b&gt;UPDATE 11/8/2013&lt;/b&gt;&lt;/i&gt;: Datomic recently &lt;a href=&quot;http://blog.datomic.com/2013/11/datomic-pro-starter-edition.html&quot;&gt;announced&lt;/a&gt;
        a &lt;i&gt;Datomic Pro Starter Edition&lt;/i&gt; featuring support for all
        storages, including Infinispan, and a perpetual license.
      
      &lt;/div&gt;
      
      &lt;p&gt;I've been testing successfully with version &lt;code&gt;0.8.4218&lt;/code&gt;, available
      &lt;a href=&quot;http://downloads.datomic.com/pro.html&quot;&gt;here&lt;/a&gt;. Once you download and
      unzip it, cd to its directory and install the peer library to your
      local Maven repo:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;$ bin/maven-install
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;This isn't required for Immutant itself, but we'll need it for our
      example app described below. Finally, install your license key. Use
      the provided sample template for Infinispan:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;$ cp config/samples/inf-transactor-template.properties config/immutant.properties
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;And update the &lt;code&gt;license-key&lt;/code&gt; property in &lt;code&gt;config/immutant.properties&lt;/code&gt;.
      That's it! You're ready to run!&lt;/p&gt;
      
      &lt;p&gt;In one shell, fire up Immutant:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;$ lein immutant run
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;And in another shell, fire up the Datomic transactor:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;$ bin/transactor config/immutant.properties
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;If you don't see any error stack traces in either shell, &lt;a href=&quot;https://www.youtube.com/watch?v=b4810hS8weQ&quot;&gt;yay&lt;/a&gt;!&lt;/p&gt;
      
      &lt;h2&gt;Counting on ACID&lt;/h2&gt;
      
      &lt;p&gt;To demonstrate some features, we need an example app. Here's one:
      &lt;a href=&quot;https://github.com/jcrossley3/datomic-counter&quot;&gt;https://github.com/jcrossley3/datomic-counter&lt;/a&gt;:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;$ git clone git@github.com:jcrossley3/datomic-counter.git
      $ cd datomic-counter
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;As its name implies, it counts. But it does this using a pretty cool
      Datomic feature: &lt;a href=&quot;http://docs.datomic.com/database-functions.html&quot;&gt;transaction functions&lt;/a&gt;.&lt;/p&gt;
      
      &lt;p&gt;Before we deploy it, let's highlight a few things. First, notice that
      we added dependencies in &lt;a href=&quot;https://github.com/jcrossley3/datomic-counter/blob/master/project.clj&quot;&gt;project.clj&lt;/a&gt; for our storage service and the
      Datomic peer library (that we installed above):&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;  :dependencies [[org.clojure/clojure &quot;1.5.1&quot;]
                       [org.infinispan/infinispan-client-hotrod &quot;6.0.0.CR1&quot;]
                       [com.datomic/datomic-pro &quot;0.8.4218&quot;]]
        :immutant {:init counter.core/start}&lt;/pre&gt;
      
      &lt;p&gt;And we configured an &lt;code&gt;:init&lt;/code&gt; function to be called when the app
      deploys: &lt;code&gt;start&lt;/code&gt; from the &lt;a href=&quot;https://github.com/jcrossley3/datomic-counter/blob/master/src/counter/core.clj&quot;&gt;counter.core&lt;/a&gt; namespace. It has two duties:
      1) initialize our Datomic database and b) schedule a job to increment
      a counter every couple of seconds.&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(defn start
        &quot;Initialize the database and schedule the counter&quot;
        []
        (try
          (db/init)
          (job/schedule &quot;counter&quot; job, :every [2 :seconds], :singleton false)
          (catch Exception e
            (println &quot;Check the transactor, retrying in 10 seconds&quot;)
            (future (Thread/sleep 10000) (start)))))&lt;/pre&gt;
      
      &lt;p&gt;We log and increment the counter in the &lt;code&gt;counter.core/job&lt;/code&gt; function.
      Note the job sets &lt;code&gt;:singleton false&lt;/code&gt; so it'll run on all nodes in a
      cluster, introducing the potential for race conditions as multiple
      processes attempt to increment a shared counter. We'll deal with those
      using a transaction function.&lt;/p&gt;
      
      &lt;p&gt;We naively assume any exception is due to the &lt;code&gt;transactor&lt;/code&gt; not being
      around, so we log a warning, wait a bit, and retry. We do that in a
      separate thread so as not to lock up the Immutant deployer. Now let's
      take a closer look at the &lt;code&gt;init&lt;/code&gt; function from &lt;a href=&quot;https://github.com/jcrossley3/datomic-counter/blob/master/src/counter/db.clj&quot;&gt;counter.db&lt;/a&gt;:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(defn init
        &quot;Create the database, load the schema, initialize counter, and
        define transaction function named :increment&quot;
        []
        (when (d/create-database uri)
          @(d/transact @conn (read-string (slurp (io/resource &quot;schema.dtm&quot;))))
          @(d/transact @conn [{:db/id :counter :value 0}
                              {:db/id (d/tempid :db.part/user)
                               :db/ident :increment
                               :db/fn (d/function
                                       {:lang &quot;clojure&quot;
                                        :params '[db]
                                        :code '(let [v (:value (d/entity db :counter))]
                                                 (println &quot;inc&quot; v)
                                                 [{:db/id :counter
                                                   :value (inc v)}])})}])))&lt;/pre&gt;
      
      &lt;p&gt;Note that we rely on the return value of &lt;a href=&quot;http://docs.datomic.com/clojure/index.html#datomic.api/create-database&quot;&gt;create-database&lt;/a&gt; to ensure
      that only one node in our cluster loads
      &lt;a href=&quot;https://github.com/jcrossley3/datomic-counter/blob/master/resources/schema.dtm&quot;&gt;our very simple schema&lt;/a&gt; and initializes our counter.&lt;/p&gt;
      
      &lt;p&gt;The &lt;code&gt;:increment&lt;/code&gt; entity is an example of a Datomic
      &lt;a href=&quot;http://docs.datomic.com/database-functions.html&quot;&gt;transaction function&lt;/a&gt;. It runs inside the transactor, which
      serializes all writes to the database, and eliminates the potential
      for the race conditions mentioned above. Note that the &lt;code&gt;println&lt;/code&gt;
      output should appear in the transactor's stdout.&lt;/p&gt;
      
      &lt;p&gt;Go ahead and deploy it:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;$ lein immutant deploy
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;Monitor the shells in which you started Immutant and the Datomic
      transactor to see the expected output once the counting commences.&lt;/p&gt;
      
      &lt;h2&gt;Cluster Time!&lt;/h2&gt;
      
      &lt;p&gt;Now the fun begins. I'm going to assume you don't have a spare server
      lying around, virtual or otherwise, that is discoverable via
      multicast, on which you can install immutant and deploy the app, but
      if you did, you'd simply pass the &lt;code&gt;--clustered&lt;/code&gt; option when you fire
      up the Immutants on both hosts:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;$ lein immutant run --clustered
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;But it's never that easy, is it? ;)&lt;/p&gt;
      
      &lt;p&gt;Instead, I'm going to show you how to create a cluster of Immutants on
      your laptop using a port offset. First, kill the Immutant and
      transactor processes (Ctrl-c) you started earlier, make sure you have
      the app deployed, clean the runtime state, and replicate our Immutant
      installation:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;$ lein immutant deploy /path/to/datomic-counter
      $ rm -rf ~/.immutant/current/jboss/standalone/data
      $ cp -R ~/.immutant/current/ /tmp/node1
      $ cp -R ~/.immutant/current/ /tmp/node2
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;We're going to use two system properties to simulate our cluster:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;
      &lt;strong&gt;jboss.node.name&lt;/strong&gt; Every node in a cluster must have a unique
      identifier, which defaults to &lt;code&gt;hostname&lt;/code&gt;, which will be the same for
      both of our Immutants, so we'll override it on one of them.&lt;/li&gt;
      &lt;li&gt;
      &lt;strong&gt;jboss.socket.binding.port-offset&lt;/strong&gt; To avoid port conflicts, all
      socket bindings will be incremented by this value, which defaults to
      0.&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;In one shell, fire up &lt;em&gt;node1&lt;/em&gt;:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;$ IMMUTANT_HOME=/tmp/node1 lein immutant run --clustered -Djboss.node.name=node1
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;And in another shell, fire up &lt;em&gt;node2&lt;/em&gt;:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;$ IMMUTANT_HOME=/tmp/node2 lein immutant run --clustered -Djboss.socket.binding.port-offset=100
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;Assuming you have lots of RAM and disk and generous &lt;code&gt;ulimit&lt;/code&gt; settings,
      you can fire up as many of these as you like, e.g.&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;$ cp -R ~/.immutant/current/ /tmp/node3
      $ IMMUTANT_HOME=/tmp/node3 lein immutant run --clustered \
        -Djboss.node.name=node3 \
        -Djboss.socket.binding.port-offset=200
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;At this point, your Immutants should be complaining about the lack of
      a running transactor, so go back to your transactor shell and restart
      it:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;$ bin/transactor config/immutant.properties
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;After a few seconds, you should see expected log output from the two
      &quot;nodes&quot; and the transactor. &lt;/p&gt;
      
      &lt;p&gt;To see some failover, recall that the transactor is configured to
      connect to port &lt;code&gt;11222&lt;/code&gt;, which is the &lt;em&gt;node1&lt;/em&gt; Immutant. The &lt;em&gt;node2&lt;/em&gt;
      Immutant with the port offset is listening on port &lt;code&gt;11322&lt;/code&gt;. Go back to
      your &lt;em&gt;node1&lt;/em&gt; shell and hit Ctrl-c to kill it. Observe that the
      transactor doesn't miss a beat because it's already aware of &lt;em&gt;node2&lt;/em&gt;'s
      membership in the cluster. The transactor only needed &lt;em&gt;node1&lt;/em&gt; up long
      enough to bootstrap itself into the cluster. The database remains
      consistent as long as there's at least one node present thereafter.&lt;/p&gt;
      
      &lt;p&gt;Now restart &lt;em&gt;node1&lt;/em&gt; and kill the transactor using Ctrl-c. You should
      see some errors in the output of the Immutants, but they'll recover
      gracefully whenever you restart the transactor, whose output should
      pick up right where it left off when you killed it.&lt;/p&gt;
      
      &lt;h2&gt;Feedback&lt;/h2&gt;
      
      &lt;p&gt;It's still early days, obviously, and I can't yet articulate the
      trade-offs, but I feel confident enough after my limited testing to
      invite others to kick the tires, especially those with more Datomic
      expertise than me. I suspect there are opportunities for tuning, and
      we need to define some best practices around deployment, maybe come up
      with some &lt;a href=&quot;https://www.docker.io/&quot;&gt;Docker&lt;/a&gt; container images, for example.&lt;/p&gt;
      
      &lt;p&gt;As always, feel free to reach out in the &lt;a href=&quot;/community&quot;&gt;usual ways&lt;/a&gt; and feedback us!&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2013/10/18/announcing-1-0-2/</id>
    <title>Immutant 1.0.2 Released</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2013-10-18T00:00:00+00:00</published>
    <link href="/news/2013/10/18/announcing-1-0-2/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="releases"></category>
    <summary>
      We&#39;re happy, happy, happy to announce Immutant 1.0.2 - &quot;HamBiscuit&quot;.
      
      This release is primarily a bug fix release, with a couple of other
      enhancements thrown in. As always, view our road map
      here.
      
      What is Immutant?
      
      Immutant is an application server for
      Clojure. It&#39;s an integrated platform built on
      JBoss AS7 that aims to reduce the inherent
      incidental complexity
      in real world applications.
      
      What&#39;s in this release?
      
      In addition to fixes, we added a few backwards-compatible features:
      
      
      It&#39;s now possible to
      use Immutant&#39;s integrated Infinispan data grid as a
      Datomic data store. We&#39;ll provide more details
      on this in a future blog post.
      We now
      expose the max number of HTTP connections
      as a system property.
      We&#39;ve attempted to...
    </summary>
    <content type="html">
      &lt;p&gt;We're &lt;a href=&quot;https://www.youtube.com/watch?v=iWp1VOFQxKg&quot;&gt;happy, happy, happy&lt;/a&gt; to announce Immutant &lt;strong&gt;1.0.2 - &quot;HamBiscuit&quot;&lt;/strong&gt;.&lt;/p&gt;
      
      &lt;p&gt;This release is primarily a bug fix release, with a couple of other
      enhancements thrown in. As always, view our road map
      &lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;What is Immutant?&lt;/h2&gt;
      
      &lt;p&gt;Immutant is an application server for
      &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;. It's an integrated platform built on
      &lt;a href=&quot;http://www.jboss.org/as7&quot;&gt;JBoss AS7&lt;/a&gt; that aims to reduce the inherent
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Accidental_complexity&quot;&gt;incidental complexity&lt;/a&gt;
      in real world applications.&lt;/p&gt;
      
      &lt;h2&gt;What's in this release?&lt;/h2&gt;
      
      &lt;p&gt;In addition to fixes, we added a few backwards-compatible features:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;It's now &lt;a href=&quot;https://github.com/immutant/hotrod-overlay&quot;&gt;possible&lt;/a&gt; to
      use Immutant's integrated Infinispan data grid as a
      &lt;a href=&quot;http://datomic.com&quot;&gt;Datomic&lt;/a&gt; data store. We'll provide more details
      on this in a future blog post.&lt;/li&gt;
      &lt;li&gt;We now
      &lt;a href=&quot;/documentation/1.0.2/web.html#sec-11&quot;&gt;expose the max number of HTTP connections&lt;/a&gt;
      as a system property.&lt;/li&gt;
      &lt;li&gt;We've attempted to make the &lt;code&gt;immutant.cache&lt;/code&gt; API more functional by
      introducing a &lt;a href=&quot;/documentation/1.0.2/apidoc/immutant.cache.html#var-swap%21&quot;&gt;swap!&lt;/a&gt; function.&lt;/li&gt;
      &lt;li&gt;We've extended the 
      &lt;a href=&quot;/documentation/1.0.2/apidoc/immutant.pipeline.html#var-fanout&quot;&gt;fanout&lt;/a&gt;
      capabilities of pipelines.&lt;/li&gt;
      &lt;li&gt;We now default &lt;code&gt;:nrepl-port&lt;/code&gt; to 0 when the &lt;code&gt;:dev&lt;/code&gt; profile is active.&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;The last item deserves some emphasis. What it means is that unless you
      explicitly set &lt;code&gt;:nrepl-port&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; in either &lt;code&gt;project.clj&lt;/code&gt; or
      &lt;code&gt;profiles.clj&lt;/code&gt;, you'll get a dedicated nREPL service for any app you
      deploy to your Immutant with the &lt;code&gt;:dev&lt;/code&gt; profile active. When
      developing, this is convenient and desired, but it means you should
      probably take care to deploy your app to production without activating
      the &lt;code&gt;:dev&lt;/code&gt; profile, i.e. use the &lt;code&gt;with-profile&lt;/code&gt; Leiningen subtask. The
      risk of not doing so is still small as the OS-assigned port is bound
      to localhost by default and unlikely to be exposed.&lt;/p&gt;
      
      &lt;p&gt;The rest was mostly
      &lt;a href=&quot;/documentation/1.0.2/development.html&quot;&gt;doc enhancements&lt;/a&gt; and bug
      fixes, listed below. We wanted to give a special shout-out to
      &lt;a href=&quot;http://ianeslick.com/&quot;&gt;Ian Eslick&lt;/a&gt; for not only contributing the fix
      for &lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-365&quot;&gt;IMMUTANT-365&lt;/a&gt; but
      also helping us make the
      &lt;a href=&quot;/news/2013/10/18/lein-immutant-1-1-0/&quot;&gt;lein-immutant&lt;/a&gt; plugin's &lt;code&gt;test&lt;/code&gt;
      task more robust. Thanks!&lt;/p&gt;
      
      &lt;h2&gt;Get It&lt;/h2&gt;
      
      &lt;p&gt;The simplest way to install or upgrade to 1.0.2 is via our
      &lt;a href=&quot;https://clojars.org/lein-immutant&quot;&gt;Leiningen plugin&lt;/a&gt;:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;$ lein immutant install 1.0.2
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;See our &lt;a href=&quot;/install/&quot;&gt;install page&lt;/a&gt; for more details. Once you have it
      installed, take a look at our &lt;a href=&quot;/tutorials/&quot;&gt;tutorials&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;If you have any questions, issues, or other feedback about Immutant,
      you can always find us on &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/mailing_lists&quot;&gt;our mailing lists&lt;/a&gt;. &lt;/p&gt;
      
      &lt;h2&gt;Issues resolved in 1.0.2&lt;/h2&gt;
      
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-292&quot;&gt;IMMUTANT-292&lt;/a&gt;] -         Configure an Immutant cluster as a Datomic data store&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-349&quot;&gt;IMMUTANT-349&lt;/a&gt;] -         daemons/create should accept a keyword for a daemon name&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-350&quot;&gt;IMMUTANT-350&lt;/a&gt;] -         Can't seem to queue custom edn tagged elements&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-351&quot;&gt;IMMUTANT-351&lt;/a&gt;] -         'unlisten'ing a listener doesn't remove its MBean&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-352&quot;&gt;IMMUTANT-352&lt;/a&gt;] -         Provide configuration option for binding REPL endpoints to different interfaces&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-353&quot;&gt;IMMUTANT-353&lt;/a&gt;] -         Invalid cache replication modes should toss an exception&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-355&quot;&gt;IMMUTANT-355&lt;/a&gt;] -         Expose number of HTTP service threads as a parameter&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-358&quot;&gt;IMMUTANT-358&lt;/a&gt;] -         Expose a 'keys' fn to list jboss service names in the registry&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-363&quot;&gt;IMMUTANT-363&lt;/a&gt;] -         provide a wrapping function that applies fanout to a pipeline step externally&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-364&quot;&gt;IMMUTANT-364&lt;/a&gt;] -         Unscheduling a job hangs in a cluster&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-365&quot;&gt;IMMUTANT-365&lt;/a&gt;] -         Applications using the servlet interface cannot use servlet-sessions as documented&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-367&quot;&gt;IMMUTANT-367&lt;/a&gt;] -         Update to leiningen-core 2.3.3&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-368&quot;&gt;IMMUTANT-368&lt;/a&gt;] -         Doc the test task's unique context path (app-uri) better&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-369&quot;&gt;IMMUTANT-369&lt;/a&gt;] -         Restore mbeans for jobs&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-370&quot;&gt;IMMUTANT-370&lt;/a&gt;] -         Implement cache/swap! in terms of cache/put-if-replace&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-371&quot;&gt;IMMUTANT-371&lt;/a&gt;] -         message-seq only uses options for the first receive, not subsequent ones&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-372&quot;&gt;IMMUTANT-372&lt;/a&gt;] -         Default :nrepl-port to 0 when dev profile is active&lt;/li&gt;
      &lt;/ul&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2013/10/18/lein-immutant-1-1-0/</id>
    <title>lein-immutant Plugin 1.1.0 Released</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2013-10-18T00:00:00+00:00</published>
    <link href="/news/2013/10/18/lein-immutant-1-1-0/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="lein"></category>
    <category term="lein-immutant"></category>
    <category term="installation"></category>
    <summary>
      We just released version 1.1.0 of
      our Leiningen plugin. This release contains the following changes:
      
      
      The immutant archive subtask now includes dependencies by
      default. To exclude them, pass --exclude-dependencies or -e to
      the task.
      The immutant test subtask now runs tests in an Immutant container
      that uses a different set of network ports than the defaults, and
      writes its logs to target/isolated-immutant/log/. This allows you
      to keep your development Immutant up while running your tests,
      without the development and test deployments of your application
      interfering with each other.
      The immutant new and immutant init subtasks have been removed,
      since they provided little value, and cluttered an already large
      subtask list.
      The immutant overlay subtask...
    </summary>
    <content type="html">
      &lt;p&gt;We just released version &lt;a href=&quot;https://clojars.org/lein-immutant&quot;&gt;1.1.0&lt;/a&gt; of
      our Leiningen plugin. This release contains the following changes:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;&lt;p&gt;The &lt;code&gt;immutant archive&lt;/code&gt; subtask now includes dependencies by
      default. To exclude them, pass &lt;code&gt;--exclude-dependencies&lt;/code&gt; or &lt;code&gt;-e&lt;/code&gt; to
      the task.&lt;/p&gt;&lt;/li&gt;
      &lt;li&gt;&lt;p&gt;The &lt;code&gt;immutant test&lt;/code&gt; subtask now runs tests in an Immutant container
      that uses a different set of network ports than the defaults, and
      writes its logs to &lt;code&gt;target/isolated-immutant/log/&lt;/code&gt;. This allows you
      to keep your development Immutant up while running your tests,
      without the development and test deployments of your application
      interfering with each other.&lt;/p&gt;&lt;/li&gt;
      &lt;li&gt;&lt;p&gt;The &lt;code&gt;immutant new&lt;/code&gt; and &lt;code&gt;immutant init&lt;/code&gt; subtasks have been removed,
      since they provided little value, and cluttered an already large
      subtask list.&lt;/p&gt;&lt;/li&gt;
      &lt;li&gt;&lt;p&gt;The &lt;code&gt;immutant overlay&lt;/code&gt; subtask now copies the current Immutant
      install before applying the overlay, allowing you to roll back to
      the prior version.&lt;/p&gt;&lt;/li&gt;
      &lt;li&gt;&lt;p&gt;The &lt;code&gt;immutant install&lt;/code&gt; task can now install a runnable Immutant
      without requiring the &lt;code&gt;unzip&lt;/code&gt; binary to be installed on non-Windows
      systems.&lt;/p&gt;&lt;/li&gt;
      &lt;/ul&gt;&lt;h2&gt;Get it&lt;/h2&gt;
      
      &lt;p&gt;If you're already using &lt;code&gt;lein-immutant&lt;/code&gt; you probably already know how
      to do this, but just in case - to install it, add it to the &lt;code&gt;:plugins&lt;/code&gt;
      list in your &lt;code&gt;:user&lt;/code&gt; profile in &lt;code&gt;~/.lein/profiles.clj&lt;/code&gt;:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;{:user {:plugins [[lein-immutant &quot;1.1.0&quot;]]}}
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;h2&gt;Get in touch&lt;/h2&gt;
      
      &lt;p&gt;If you have any questions, issues, or other feedback, you can always
      find us on &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or you can file an
      issue on
      &lt;a href=&quot;https://github.com/immutant/lein-immutant/issues&quot;&gt;lein-immutant&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2013/09/23/websocket-sockjs-part-deux/</id>
    <title>WebSockets and SockJS with Immutant and Vert.x - Part 2</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2013-09-23T00:00:00+00:00</published>
    <link href="/news/2013/09/23/websocket-sockjs-part-deux/" rel="alternate" type="text/html" />
    <author>
      <name>Toby Crawley</name>
    </author>
    <category term="daemons"></category>
    <category term="vertx"></category>
    <category term="websockets"></category>
    <category term="sockjs"></category>
    <category term="messaging"></category>
    <summary>
      This is a followup to our
      post last week on WebSockets with Vert.x. If you haven&#39;t read
      it, you should do so now. In that post, we set up a simple echo
      service in Vert.x that bridged the Vert.x EventBus to the
      browser. But that echo service wasn&#39;t very useful - there was no way
      to process incoming messages outside of the daemon, and no way to send
      messages down to the browser client from other parts of the
      application. Today, we&#39;re going to look at bridging the EventBus over
      to Immutant messaging, allowing us to actually interact with the
      client from anywhere within our application.
      
      Our application
      
      We&#39;ll be using...
    </summary>
    <content type="html">
      &lt;p&gt;This is a followup to our
      &lt;a href=&quot;/news/2013/09/17/websocket-sockjs/&quot;&gt;post last week on WebSockets with Vert.x&lt;/a&gt;. If you haven't read
      it, you should do so now. In that post, we set up a simple echo
      service in &lt;a href=&quot;http://vertx.io/&quot;&gt;Vert.x&lt;/a&gt; that bridged the Vert.x &lt;a href=&quot;https://github.com/vert-x/mod-lang-clojure/blob/master/docs/core_manual_clojure.md#the-event-bus&quot;&gt;EventBus&lt;/a&gt; to the
      browser. But that echo service wasn't very useful - there was no way
      to process incoming messages outside of the daemon, and no way to send
      messages down to the browser client from other parts of the
      application. Today, we're going to look at bridging the EventBus over
      to &lt;a href=&quot;/documentation/current/messaging.html&quot;&gt;Immutant messaging&lt;/a&gt;, allowing us to actually interact with the
      client from anywhere within our application.&lt;/p&gt;
      
      &lt;h2&gt;Our application&lt;/h2&gt;
      
      &lt;p&gt;We'll be using the &lt;a href=&quot;https://github.com/immutant/simple-immutant-vertx-demo&quot;&gt;same application&lt;/a&gt; we used in the last post, but
      will be working off of a &lt;a href=&quot;https://github.com/immutant/simple-immutant-vertx-demo/tree/with-messaging&quot;&gt;branch&lt;/a&gt;.&lt;/p&gt;
      
      &lt;p&gt;To get started, &lt;a href=&quot;https://github.com/immutant/simple-immutant-vertx-demo&quot;&gt;clone the app&lt;/a&gt; and run it:[^1]&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;cd /path/to/simple-immutant-vertx-demo
      git checkout with-messaging
      lein do immutant deploy, immutant run
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;Then browse to &lt;a href=&quot;http://localhost:8080/&quot;&gt;http://localhost:8080/&lt;/a&gt;. You should see a UI that lets
      you send messages and see those messages echoed back, but now they
      come back in uppercase:&lt;/p&gt;
      
      &lt;p&gt;&lt;img src=&quot;/images/news/sockjs2.png&quot; alt=&quot;[UI activity]&quot; class=&quot;bordered aligncenter&quot;&gt;&lt;/p&gt;
      
      &lt;h2&gt;Let's see some code!&lt;/h2&gt;
      
      &lt;p&gt;Most of the application remains the same as it did before. But instead
      of just copying messages from the request address to the response
      address, we've now wired our
      &lt;a href=&quot;https://github.com/immutant/simple-immutant-vertx-demo/blob/with-messaging/src/demo/bridge.clj&quot;&gt;&lt;code&gt;demo.bridge&lt;/code&gt; namespace&lt;/a&gt;
      to the Immutant messaging system. We now have functions that bridge
      EventBus addresses to Immutant messaging destinations, and vice-versa,
      and have modified the &lt;code&gt;init-bridge&lt;/code&gt; function to map the appropriate
      addresses and destinations:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(ns demo.bridge
        (:require [vertx.embed :as vembed :refer [with-vertx]]
                  [vertx.http :as http]
                  [vertx.http.sockjs :as sockjs]
                  [vertx.eventbus :as eb]
                  [immutant.messaging :as msg]))
      
      (defn dest-&amp;gt;eventbus
        &quot;Sets up a bridge to copy messages from an Immutant messaging dest to a Vertx address.&quot;
        [vertx dest address]
        (msg/listen dest #(with-vertx vertx
                            (eb/publish address %))))
      
      (defn eventbus-&amp;gt;dest
        &quot;Sets up a bridge to copy messages from a Vertx address to an Immutant messaging dest.&quot;
        [vertx address dest]
        (with-vertx vertx
          (eb/on-message address (partial msg/publish dest))))
      
      (defn- start-sockjs-bridge
        &quot;Creates a Vert.x http server, a sockjs server within that http
        server, then installs an eventbus bridge in the sockjs server.&quot;
        [vertx host port path]
        (println (format &quot;Starting SockJS bridge at http://%s:%s%s&quot; host port path))
        (with-vertx vertx
          (let [server (http/server)]
            (-&amp;gt; server
                (sockjs/sockjs-server)
                (sockjs/bridge {:prefix path} [{}] [{}]))
            (http/listen server port host))))
      
      (defn init-bridge
        &quot;Initializes the embedded vertx instance, bridges to Immutant destinations, and starts the sockjs bridge.&quot;
        [{:keys [request-dest response-dest]}]
        (let [vertx (vembed/vertx)]
          (eventbus-&amp;gt;dest vertx &quot;demo.request&quot; request-dest)
          (dest-&amp;gt;eventbus vertx response-dest &quot;demo.response&quot;)
          {:vertx vertx
           :server (start-sockjs-bridge vertx &quot;localhost&quot; 8081 &quot;/eventbus&quot;)}))&lt;/pre&gt;
      
      &lt;p&gt;Now that &lt;code&gt;demo.bridge&lt;/code&gt; no longer echos, but instead expects something
      on the other end of the &lt;code&gt;request-dest&lt;/code&gt;, we need something listening on
      the other end to do the work. We've added this to the
      &lt;a href=&quot;https://github.com/immutant/simple-immutant-vertx-demo/blob/with-messaging/src/demo/init.clj&quot;&gt;&lt;code&gt;demo.init&lt;/code&gt; namespace&lt;/a&gt;,
      which is also where we define the request/response destination
      names. Our listener here just watches &lt;code&gt;queue.request&lt;/code&gt;, uppercases each
      message, and publishes it to &lt;code&gt;topic.response&lt;/code&gt;. Since we have bridged
      those same destinations in &lt;code&gt;demo.bridge&lt;/code&gt;, we again have a completed
      circle from the client and back:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(ns demo.init
        (:require [demo.web :as web]
                  [demo.daemon :as daemon]
                  [immutant.messaging :as msg]))
      
      (def config {:response-dest &quot;topic.response&quot;
                   :request-dest &quot;queue.request&quot;
                   :process-fn (memfn toUpperCase)})
      
      (defn init []
        (let [{:keys [request-dest response-dest process-fn]} config]
          (msg/start request-dest)
          (msg/start response-dest)
          (msg/listen request-dest
                      #(msg/publish response-dest (process-fn %))))
        (web/start)
        (daemon/start config))&lt;/pre&gt;
      
      &lt;h2&gt;Touch the UI from anywhere&lt;/h2&gt;
      
      &lt;p&gt;Now that we've bridged the EventBus to the Immutant messaging system,
      we can interact with our client UI from anywhere within our
      application. Just to beat the horse a bit more, let's do it from the
      repl. Connect to the &lt;a href=&quot;/documentation/current/development.html#interactive&quot;&gt;nREPL endpoint&lt;/a&gt; in the application running on
      port &lt;code&gt;5309&lt;/code&gt;[^2] using your favorite client, then try sending messages
      directly to the response topic, or to the request queue to have them
      uppercased first:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;user&amp;gt; (require '[immutant.messaging :as msg])
      nil
      user&amp;gt; (msg/publish &quot;topic.response&quot; &quot;ahoyhoy&quot;)
      #&amp;lt;HornetQTextMessage HornetQMessage[ID:8af51642-2478-11e3-9deb-25745b71356d]:PERSISTENT&amp;gt;
      user&amp;gt; (msg/publish &quot;queue.request&quot; &quot;ahoyhoy&quot;)
      #&amp;lt;HornetQTextMessage HornetQMessage[ID:90e4b5b8-2478-11e3-9deb-25745b71356d]:PERSISTENT&amp;gt;
      user&amp;gt; &lt;/pre&gt;
      
      &lt;p&gt;You can also send structured messages:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;user&amp;gt; (msg/publish &quot;topic.response&quot; {:x :y})
      #&amp;lt;HornetQTextMessage HornetQMessage[ID:e09bf794-2478-11e3-9deb-25745b71356d]:PERSISTENT&amp;gt;&lt;/pre&gt;
      
      &lt;p&gt;And see them all displayed in the client UI:&lt;/p&gt;
      
      &lt;p&gt;&lt;img src=&quot;/images/news/sockjs3.png&quot; alt=&quot;[repl UI activity]&quot; class=&quot;bordered aligncenter&quot;&gt;&lt;/p&gt;
      
      &lt;h2&gt;Fare thee well&lt;/h2&gt;
      
      &lt;p&gt;We've extended our &lt;a href=&quot;/news/2013/09/17/websocket-sockjs/&quot;&gt;prior example&lt;/a&gt; to make it actually useful, and
      maintained a separation of concerns within our application - code
      outside of the &lt;code&gt;demo.bridge&lt;/code&gt; namespace has no knowledge of Vert.x, nor
      of the UI communication mechanism. We think this provides a compelling
      way to provide dynamic updates to the browser, but if you don't, or
      have any other questions, comments, or feedback, please
      &lt;a href=&quot;/community/&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;
      
      &lt;hr&gt;&lt;ol&gt;
      &lt;li&gt;[^1] This assumes you have a recent Immutant
      &lt;a href=&quot;/install/&quot;&gt;installed&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;[^2] The demo application specifies &lt;code&gt;5309&lt;/code&gt; as the &lt;code&gt;:nrepl-port&lt;/code&gt; in
      its &lt;code&gt;project.clj&lt;/code&gt;. If you have &lt;code&gt;:immutant {:nrepl-port some-port}&lt;/code&gt;
      set in your &lt;code&gt;~/.lein/profiles.clj&lt;/code&gt;, that will override &lt;code&gt;5309&lt;/code&gt; and
      you'll need to connect to whatever port the endpoint is bound to.&lt;/li&gt;
      &lt;/ol&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2013/09/17/websocket-sockjs/</id>
    <title>WebSockets and SockJS with Immutant and Vert.x</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2013-09-17T00:00:00+00:00</published>
    <link href="/news/2013/09/17/websocket-sockjs/" rel="alternate" type="text/html" />
    <author>
      <name>Toby Crawley</name>
    </author>
    <category term="daemons"></category>
    <category term="vertx"></category>
    <category term="websockets"></category>
    <category term="sockjs"></category>
    <summary>
      Currently, Immutant doesn&#39;t provide any native WebSockets
      support. However, it is possible to use another WebSockets-capable
      server from within an Immutant daemon. There are quite a few
      well-known options in the Clojure ecosystem that we could use here,
      like Aleph, http-kit, or raw Jetty or Netty. Instead, we&#39;re
      going to use a relative newcomer to the Clojure space: Vert.x.
      
      What is Vert.x?
      
      Vert.x is an asynchronous polyglot application platform built on top
      of Netty that has been around for a while, but just recently gained
      Clojure support. It provides (among other things) its own message
      passing system (the EventBus), and provides a SockJS
      implementation that allows browser clients to participate as...
    </summary>
    <content type="html">
      &lt;p&gt;Currently, Immutant doesn't provide any native WebSockets
      support. However, it is possible to use another WebSockets-capable
      server from within an &lt;a href=&quot;/documentation/current/daemons.html&quot;&gt;Immutant daemon&lt;/a&gt;. There are quite a few
      well-known options in the Clojure ecosystem that we could use here,
      like &lt;a href=&quot;https://github.com/ztellman/aleph&quot;&gt;Aleph&lt;/a&gt;, &lt;a href=&quot;http://http-kit.org/&quot;&gt;http-kit&lt;/a&gt;, or raw &lt;a href=&quot;http://www.eclipse.org/jetty/&quot;&gt;Jetty&lt;/a&gt; or &lt;a href=&quot;http://netty.io/&quot;&gt;Netty&lt;/a&gt;. Instead, we're
      going to use a relative newcomer to the Clojure space: &lt;a href=&quot;http://vertx.io/&quot;&gt;Vert.x&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;What is Vert.x?&lt;/h2&gt;
      
      &lt;p&gt;Vert.x is an asynchronous polyglot application platform built on top
      of Netty that has been around for a while, but just recently gained
      &lt;a href=&quot;https://github.com/vert-x/mod-lang-clojure&quot;&gt;Clojure support&lt;/a&gt;. It provides (among other things) its own message
      passing system (the &lt;a href=&quot;https://github.com/vert-x/mod-lang-clojure/blob/master/docs/core_manual_clojure.md#the-event-bus&quot;&gt;EventBus&lt;/a&gt;), and provides a &lt;a href=&quot;http://sockjs.org&quot;&gt;SockJS&lt;/a&gt;
      implementation that allows browser clients to participate as peers in
      the EventBus over WebSockets, falling back to other protocols as the
      browser and network topology dictate. SockJS and an EventBus that is
      bridged to the client abstracts away some of the complexity of
      managing dynamic updates to the browser, and is the primary reason
      we're using Vert.x over some of the alternatives mentioned above.&lt;/p&gt;
      
      &lt;p&gt;Vert.x includes a &lt;a href=&quot;https://github.com/eclipse/vert.x/blob/master/src/dist/client/vertxbus.js&quot;&gt;javascript EventBus client&lt;/a&gt; for use in client-side
      code that allows the browser to participate in the EventBus as a
      peer. The Vert.x Clojure language module includes a
      &lt;a href=&quot;https://github.com/vert-x/mod-lang-clojure/blob/master/api/src/main/clojure/vertx/client/eventbus.cljs&quot;&gt;ClojureScript wrapper&lt;/a&gt; around that javascript client, which we'll use
      in a bit.&lt;/p&gt;
      
      &lt;h2&gt;Our application&lt;/h2&gt;
      
      &lt;p&gt;To demonstrate using the Vert.x EventBus bridge from Immutant, we're
      going to look at a simple application that embeds[^1] Vert.x into an
      &lt;a href=&quot;/documentation/current/daemons.html&quot;&gt;Immutant daemon&lt;/a&gt; to provide an echo service over the EventBus.&lt;/p&gt;
      
      &lt;p&gt;To get started,
      &lt;a href=&quot;https://github.com/immutant/simple-immutant-vertx-demo&quot;&gt;clone the app&lt;/a&gt;
      and run it:[^2]&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;cd /path/to/simple-immutant-vertx-demo
      lein do immutant deploy, immutant run
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;Then browse to &lt;a href=&quot;http://localhost:8080/&quot;&gt;http://localhost:8080/&lt;/a&gt;. You should see a UI that lets
      you send messages and see those messages echoed back. If you're using
      a browser with a Network console, you should be able to see the
      the SockJS WebSockets traffic, like so:&lt;/p&gt;
      
      &lt;p&gt;&lt;img src=&quot;/images/news/sockjs.png&quot; alt=&quot;[websocket activity]&quot;&gt;&lt;/p&gt;
      
      &lt;h2&gt;Let's see some code!&lt;/h2&gt;
      
      &lt;p&gt;First, let's take a look at the &lt;a href=&quot;https://github.com/immutant/simple-immutant-vertx-demo/blob/master/src-cljs/demo/client.cljs&quot;&gt;ClojureScript client&lt;/a&gt;. It's fairly
      standard &lt;a href=&quot;https://github.com/ckirkendall/enfocus&quot;&gt;Enfocus&lt;/a&gt; transformations, with EventBus calls mixed in:&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(ns demo.client
        (:require [enfocus.core :as ef]
                  [enfocus.events :as events]
                  [vertx.client.eventbus :as eb]))
      
      (defn open-eventbus
        &quot;Opens a connection to the remote EventBus endpoint.&quot;
        [&amp;amp; on-open]
        (let [eb (eb/eventbus &quot;http://localhost:8081/eventbus&quot;)]
          (eb/on-open eb #(.log js/console &quot;eventbus opened&quot;))
          (mapv #(eb/on-open eb (fn [] (% eb))) on-open)))
      
      (defn append-content
        &quot;Append the given content to the element specified by id&quot;
        [id content]
        (ef/at id (ef/append (ef/html [:div content]))))
      
      (defn send-message
        &quot;Sends a message to the request address.&quot;
        [eb message]
        (eb/publish eb &quot;demo.request&quot; message))
      
      (defn attach-listeners
        &quot;Attaches listeners to both the the request and response addresses,
         displaying the received messages in the appropriate divs.&quot;
        [eb]
        (eb/on-message eb &quot;demo.request&quot; (partial append-content &quot;#sent&quot;))
        (eb/on-message eb &quot;demo.response&quot; (partial append-content &quot;#rcvd&quot;)))
      
      (defn attach-send-click
        &quot;Attaches handler to send a message when the send button is clicked.&quot;
        [eb]
        (ef/at &quot;#send-message&quot;
               (events/listen :click
                              #(send-message eb (ef/from &quot;#message&quot;
                                                         (ef/get-prop :value))))))
      (defn init []
        (open-eventbus
         attach-listeners
         attach-send-click))
      
      (set! (.-onload js/window) init)&lt;/pre&gt;
      
      &lt;p&gt;On the server side, we start up the SockJS EventBus bridge as an
      Immutant daemon in the
      &lt;a href=&quot;https://github.com/immutant/simple-immutant-vertx-demo/blob/master/src/demo/daemon.clj&quot;&gt;&lt;code&gt;demo.daemon&lt;/code&gt; namespace&lt;/a&gt;,
      and is standard Immutant daemon management code.  The functions that
      actually do the work of setting up the bridge are in the
      &lt;a href=&quot;https://github.com/immutant/simple-immutant-vertx-demo/blob/master/src/demo/bridge.clj&quot;&gt;&lt;code&gt;demo.bridge&lt;/code&gt; namespace&lt;/a&gt;:[^3]&lt;/p&gt;
      
      &lt;pre class=&quot;syntax clojure&quot;&gt;(ns demo.bridge
        (:require [vertx.embed :as vembed :refer [with-vertx]]
                  [vertx.http :as http]
                  [vertx.http.sockjs :as sockjs]
                  [vertx.eventbus :as eb]))
      
      (defn- start-sockjs-bridge
        &quot;Creates a Vert.x http server, a sockjs server within that http
        server, then installs an eventbus bridge in the sockjs server.&quot;
        [vertx host port path]
        (println (format &quot;Starting SockJS bridge at http://%s:%s%s&quot; host port path))
        (with-vertx vertx
          (let [server (http/server)]
            (-&amp;gt; server
                (sockjs/sockjs-server)
                (sockjs/bridge {:prefix path} [{}] [{}]))
            (http/listen server port host))))
      
      (defn init-bridge
        &quot;Initializes the embedded vertx instance, sets up our echo handler,
         and starts the sockjs bridge.&quot;
        []
        (let [vertx (vembed/vertx)]
          (with-vertx vertx
            (eb/on-message &quot;demo.request&quot;
                           (partial eb/publish &quot;demo.response&quot;)))
          {:vertx vertx
           :server (start-sockjs-bridge vertx &quot;localhost&quot; 8081 &quot;/eventbus&quot;)}))&lt;/pre&gt;
      
      &lt;h2&gt;A nice, neat little package?&lt;/h2&gt;
      
      &lt;p&gt;So, what have we done here? We've added dynamic updates over
      WebSockets (with fallback) to an Immutant application, without having
      to handle the minutiae of bi-directional communication over WebSockets
      and any fallback protocols. And since Vert.x allows the browser client
      to be an equal peer in the EventBus, we were able to use a similar API
      on the server and client.&lt;/p&gt;
      
      &lt;p&gt;However, it's not all roses - there is a drawback to this approach:
      since Immutant doesn't support WebSockets natively, we can't share the
      http port and upgrade connections to WebSockets on request. This means
      that any WebSockets solution we run as a daemon has to bind to its own
      port.&lt;/p&gt;
      
      &lt;p&gt;This has been an exploration of one way to add simple dynamic
      interaction to an Immutant application, but is certainly not the only
      way. If you try this approach with another WebSockets server, let us
      know how it goes.&lt;/p&gt;
      
      &lt;p&gt;Watch for a post in the future that presents a more complex
      application that bridges the Vert.x EventBus to &lt;a href=&quot;/documentation/current/messaging.html&quot;&gt;Immutant messaging&lt;/a&gt;
      destinations.&lt;/p&gt;
      
      &lt;p&gt;If you have any questions, comments, or feedback, please
      &lt;a href=&quot;/community/&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;
      
      &lt;hr&gt;&lt;ol&gt;
      &lt;li&gt;[^1] Vert.x provides its own &lt;a href=&quot;http://vertx.io/manual.html#using-vertx-from-the-command-line&quot;&gt;application container&lt;/a&gt;, but we're
      using it embedded, which is an advanced usage.&lt;/li&gt;
      &lt;li&gt;[^2] This assumes you have a recent Immutant
      &lt;a href=&quot;/install/&quot;&gt;installed&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;[^3] For this example, we're not securing the EventBus bridge at
      all. &lt;a href=&quot;https://github.com/vert-x/mod-lang-clojure/blob/master/docs/core_manual_clojure.md#securing-the-bridge&quot;&gt;Doing so&lt;/a&gt; is probably a good idea.&lt;/li&gt;
      &lt;/ol&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2013/08/28/announcing-1-0-1/</id>
    <title>Immutant 1.0.1 Released</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2013-08-28T00:00:00+00:00</published>
    <link href="/news/2013/08/28/announcing-1-0-1/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="releases"></category>
    <summary>
      We&#39;re as happy as
      the owner of this belt
      to announce Immutant 1.0.1
      - &quot;PuntoBueno&quot;.
      
      This release is primarily a bug fix release, with a couple of other
      enhancements thrown in. As always, view our road map
      here.
      
      What is Immutant?
      
      Immutant is an application server for
      Clojure. It&#39;s an integrated platform built on
      JBoss AS7 that aims to reduce the inherent
      incidental complexity
      in real world applications.
      
      What&#39;s in this release?
      
      In addition to fixes, we added a few backwards-compatible features:
      
      
      Leiningen plugins in your project.clj are now loaded when your app
      is deployed
      Custom nREPL handlers and middleware in your project.clj are now
      activated at deployment
      Introduced immutant.messaging/with-connection to facilitate better
      connection re-use
      Introduced immutant.cache.core/builder to enable
      advanced configuration
      of an...
    </summary>
    <content type="html">
      &lt;p&gt;We're as happy as
      &lt;a href=&quot;https://lh5.googleusercontent.com/-JI3xFHFhO1I/UKw8-iOxueI/AAAAAAAABxo/EGFxmgHl8ig/w1319-h989-no/IMG_20121120_211758.jpg&quot;&gt;the owner of this belt&lt;/a&gt;
      to announce Immutant &lt;strong&gt;1.0.1
      - &quot;PuntoBueno&quot;&lt;/strong&gt;.&lt;/p&gt;
      
      &lt;p&gt;This release is primarily a bug fix release, with a couple of other
      enhancements thrown in. As always, view our road map
      &lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;What is Immutant?&lt;/h2&gt;
      
      &lt;p&gt;Immutant is an application server for
      &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;. It's an integrated platform built on
      &lt;a href=&quot;http://www.jboss.org/as7&quot;&gt;JBoss AS7&lt;/a&gt; that aims to reduce the inherent
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Accidental_complexity&quot;&gt;incidental complexity&lt;/a&gt;
      in real world applications.&lt;/p&gt;
      
      &lt;h2&gt;What's in this release?&lt;/h2&gt;
      
      &lt;p&gt;In addition to fixes, we added a few backwards-compatible features:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;Leiningen plugins in your &lt;code&gt;project.clj&lt;/code&gt; are now loaded when your app
      is deployed&lt;/li&gt;
      &lt;li&gt;Custom nREPL handlers and middleware in your &lt;code&gt;project.clj&lt;/code&gt; are now
      activated at deployment&lt;/li&gt;
      &lt;li&gt;Introduced &lt;code&gt;immutant.messaging/with-connection&lt;/code&gt; to facilitate better
      &lt;a href=&quot;/documentation/1.0.1/messaging.html#sec-3-3&quot;&gt;connection re-use&lt;/a&gt;
      &lt;/li&gt;
      &lt;li&gt;Introduced &lt;code&gt;immutant.cache.core/builder&lt;/code&gt; to enable
      &lt;a href=&quot;/documentation/1.0.1/caching.html#advanced-config&quot;&gt;advanced configuration&lt;/a&gt;
      of an Infinispan cache &lt;/li&gt;
      &lt;li&gt;The pipeline namespace now provides a
      &lt;a href=&quot;/documentation/1.0.1/apidoc/immutant.pipeline.html#var-fanout&quot;&gt;fanout&lt;/a&gt;
      function to split a sequence into individual pipeline executions&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;See below for a full list of issues.&lt;/p&gt;
      
      &lt;p&gt;We want to thank everyone who reported issues against 1.0.0. We
      especially want to thank &lt;a href=&quot;http://cemerick.com/&quot;&gt;Chas Emerick&lt;/a&gt;
      and &lt;a href=&quot;http://marianoguerra.org/&quot;&gt;Mariano Guerra&lt;/a&gt; for patiently helping
      us find, recreate, test, and even
      &lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-328&quot;&gt;fix&lt;/a&gt; many of the issues
      resolved in this release.&lt;/p&gt;
      
      &lt;h2&gt;Get It&lt;/h2&gt;
      
      &lt;p&gt;The simplest way to install or upgrade to 1.0.1 is via our
      &lt;a href=&quot;https://clojars.org/lein-immutant&quot;&gt;Leiningen plugin&lt;/a&gt;:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;$ lein immutant install 1.0.1
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;See our &lt;a href=&quot;/install/&quot;&gt;install page&lt;/a&gt; for more details. Once you have it
      installed, take a look at our &lt;a href=&quot;/tutorials/&quot;&gt;tutorials&lt;/a&gt;.&lt;/p&gt;
      
      &lt;p&gt;Alternatively, you can try the
      &lt;a href=&quot;https://github.com/immutant/openshift-immutant-cart&quot;&gt;OpenShift Immutant cartridge&lt;/a&gt;,
      which has been updated to 1.0.1. Our
      &lt;a href=&quot;/news/2013/08/20/openshift-clustering/&quot;&gt;OpenShift clustering tutorial&lt;/a&gt;
      shows you how.&lt;/p&gt;
      
      &lt;h2&gt;Get In Touch&lt;/h2&gt;
      
      &lt;p&gt;If you have any questions, issues, or other feedback about Immutant,
      you can always find us on &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or
      &lt;a href=&quot;/community/mailing_lists&quot;&gt;our mailing lists&lt;/a&gt;. &lt;/p&gt;
      
      &lt;h2&gt;Issues resolved in 1.0.1&lt;/h2&gt;
      
      &lt;ul&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-319&quot;&gt;IMMUTANT-319&lt;/a&gt;] -         Race conditions on slow/limited hardware cause destination start failures&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-324&quot;&gt;IMMUTANT-324&lt;/a&gt;] -         Cache lookup can return one in a TERMINATED state&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-327&quot;&gt;IMMUTANT-327&lt;/a&gt;] -         There should be some documentation around messaging performance with the Messaging API&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-328&quot;&gt;IMMUTANT-328&lt;/a&gt;] -         Add support for custom nREPL handlers + middleware&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-329&quot;&gt;IMMUTANT-329&lt;/a&gt;] -         Not all JDK-standard packages are available, part deux&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-330&quot;&gt;IMMUTANT-330&lt;/a&gt;] -         Leiningen plugins not being loaded upon deployment bums me out&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-334&quot;&gt;IMMUTANT-334&lt;/a&gt;] -         compiled classes not available when no profile is applied&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-335&quot;&gt;IMMUTANT-335&lt;/a&gt;] -         XA transactions involving caches can yield incorrect data when useSynchronization is true&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-336&quot;&gt;IMMUTANT-336&lt;/a&gt;] -         Need a clean way to set *any* ispan cache config parameter&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-337&quot;&gt;IMMUTANT-337&lt;/a&gt;] -         `unlisten`ing a listener multiple times produces WARN log msgs&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-339&quot;&gt;IMMUTANT-339&lt;/a&gt;] -         Write skew error on Infinispan read&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-341&quot;&gt;IMMUTANT-341&lt;/a&gt;] -         Update to leiningen-core 2.3.2&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-342&quot;&gt;IMMUTANT-342&lt;/a&gt;] -         Parent directories of cache :persist store aren't being created&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-344&quot;&gt;IMMUTANT-344&lt;/a&gt;] -         Write the nrepl port to .nrepl-port&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-345&quot;&gt;IMMUTANT-345&lt;/a&gt;] -         Facilitate more JMS connection re-use&lt;/li&gt;
      &lt;li&gt;[&lt;a href=&quot;https://issues.jboss.org/browse/IMMUTANT-346&quot;&gt;IMMUTANT-346&lt;/a&gt;] -         pipeline ns should provide a fanout fn&lt;/li&gt;
      &lt;/ul&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2013/08/20/openshift-clustering/</id>
    <title>Clustering Immutants on OpenShift</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2013-08-20T00:00:00+00:00</published>
    <link href="/news/2013/08/20/openshift-clustering/" rel="alternate" type="text/html" />
    <author>
      <name>Jim Crossley</name>
    </author>
    <category term="openshift"></category>
    <category term="tutorial"></category>
    <category term="clustering"></category>
    <category term="messaging"></category>
    <category term="caching"></category>
    <category term="daemons"></category>
    <category term="scheduled-jobs"></category>
    <category term="ring"></category>
    <summary>
      Lately I&#39;ve been spending a lot of time on OpenShift, building and
      testing a cartridge for Immutant that will properly form a cluster
      across multiple OpenShift gears. In this post, I&#39;ll go through the steps
      of deploying a simple application that demonstrates all of the
      Immutant clustering features running on the three small gears you get
      for free on OpenShift.
      
      Here are the features we&#39;ll be demonstrating:
      
      
      Load-balanced message distribution with automatic peer discovery
      Replicated caching
      Highly-Available, long-running daemons
      HA scheduled jobs
      Web load balancing and session replication
      
      
      If you haven&#39;t already, go set up an OpenShift account and update
      your rhc gem to the latest version. I used 1.12.4 for this article.
      Below...
    </summary>
    <content type="html">
      &lt;p&gt;Lately I've been spending a lot of time on &lt;a href=&quot;http://openshift.com/&quot;&gt;OpenShift&lt;/a&gt;, building and
      testing a &lt;a href=&quot;https://www.openshift.com/developers/technologies&quot;&gt;cartridge&lt;/a&gt; for Immutant that will properly form a cluster
      across multiple OpenShift &lt;a href=&quot;https://www.openshift.com/products/pricing&quot;&gt;gears&lt;/a&gt;. In this post, I'll go through the steps
      of deploying a simple application that demonstrates all of the
      Immutant clustering features running on the three small gears you get
      for free on OpenShift.&lt;/p&gt;
      
      &lt;p&gt;Here are the features we'll be demonstrating:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;Load-balanced message distribution with automatic peer discovery&lt;/li&gt;
      &lt;li&gt;Replicated caching&lt;/li&gt;
      &lt;li&gt;Highly-Available, long-running daemons&lt;/li&gt;
      &lt;li&gt;HA scheduled jobs&lt;/li&gt;
      &lt;li&gt;Web load balancing and session replication&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;If you haven't already, go &lt;a href=&quot;https://www.openshift.com/get-started#cli&quot;&gt;set up an OpenShift account&lt;/a&gt; and update
      your &lt;code&gt;rhc&lt;/code&gt; gem to the latest version. I used 1.12.4 for this article.
      Below you'll see references to &lt;em&gt;$namespace&lt;/em&gt; -- this corresponds to
      your OpenShift domain name, set by running &lt;code&gt;rhc setup&lt;/code&gt;.&lt;/p&gt;
      
      &lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: If this is the first time you've used OpenShift, you'll need
      to visit the &lt;a href=&quot;https://openshift.redhat.com/app/console&quot;&gt;console&lt;/a&gt; and accept the usage agreement before running
      the &lt;code&gt;rhc&lt;/code&gt; command.&lt;/p&gt;
      
      &lt;h2&gt;Create a scaled OpenShift app&lt;/h2&gt;
      
      &lt;p&gt;The Immutant cartridge is available here:
      &lt;a href=&quot;https://github.com/immutant/openshift-immutant-cart&quot;&gt;https://github.com/immutant/openshift-immutant-cart&lt;/a&gt;. As described in
      its README, we create our app using the following command:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;rhc app-create -s demo https://raw.github.com/immutant/openshift-immutant-cart/master/metadata/manifest.yml
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;We're calling our app &lt;em&gt;demo&lt;/em&gt; and we're passing the &lt;code&gt;-s&lt;/code&gt; option to
      make our app scalable. Notice that we're passing a raw URL to the
      cartridge's &lt;code&gt;manifest.yml&lt;/code&gt;.&lt;/p&gt;
      
      &lt;p&gt;Small gears are pretty slow, but when &lt;code&gt;app-create&lt;/code&gt; finally completes,
      you'll have a bare-bones, standard Leiningen application beneath the
      &lt;code&gt;demo/&lt;/code&gt; directory. At this point, you might tail your app's logs or
      ssh into your gear:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;rhc tail demo
      rhc ssh demo
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;The critical log file for Immutant on OpenShift is
      &lt;code&gt;immutant/logs/server.log&lt;/code&gt;. Monitor this file until you eventually see
      the line, &lt;em&gt;Deployed &quot;your-clojure-application.clj&quot;&lt;/em&gt;. Then point a
      browser at &lt;a href=&quot;http://demo-%24namespace.rhcloud.com&quot;&gt;http://demo-$namespace.rhcloud.com&lt;/a&gt; to see a simple
      welcome page.&lt;/p&gt;
      
      &lt;p&gt;Now we'll put some meat on our bare-bones app!&lt;/p&gt;
      
      &lt;h2&gt;Push Me, Pull You&lt;/h2&gt;
      
      &lt;p&gt;Typically, you will add the remote git repository for your real
      application to the local OpenShift repository you just created. We're
      going to use &lt;a href=&quot;https://github.com/immutant/cluster-demo&quot;&gt;https://github.com/immutant/cluster-demo&lt;/a&gt; as our &quot;real&quot;
      application.&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;git remote add upstream -m master git@github.com:immutant/cluster-demo.git
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;Deployment of your app to OpenShift amounts to pulling from your real
      repository and pushing to OpenShift's.&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;git pull -s recursive -X theirs upstream master
      git push
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;While waiting for that to complete, run &lt;code&gt;rhc tail demo&lt;/code&gt; in another
      shell to monitor your log. This time, the &lt;em&gt;Deployed
      &quot;your-clojure-application.clj&quot;&lt;/em&gt; message is going to scroll off the
      screen as the cluster-demo app starts logging its output. Eventually,
      the app should settle into a steady state looking something like this:&lt;/p&gt;
      
      &lt;p&gt;&lt;img src=&quot;/images/news/demo-log.png&quot;&gt;&lt;/p&gt;
      
      &lt;h2&gt;The cluster-demo app&lt;/h2&gt;
      
      &lt;p&gt;If you can ignore the inconsistent thread identifiers in the above
      output, you'll notice there are exactly four types of messages:
      &lt;strong&gt;send&lt;/strong&gt;, &lt;strong&gt;recv&lt;/strong&gt;, &lt;strong&gt;web&lt;/strong&gt;, and &lt;strong&gt;job&lt;/strong&gt;. Noting the timestamps in the
      left column, a &lt;strong&gt;send&lt;/strong&gt; is logged every 5 seconds, as is its
      corresponding &lt;strong&gt;recv&lt;/strong&gt;, a &lt;strong&gt;web&lt;/strong&gt; logged every 2 seconds, and a
      &lt;strong&gt;job&lt;/strong&gt; every 20 seconds.&lt;/p&gt;
      
      &lt;p&gt;The cluster-demo app is comprised of the following:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;A message queue named &lt;em&gt;/queue/msg&lt;/em&gt;
      &lt;/li&gt;
      &lt;li&gt;A distributed cache named &lt;em&gt;counters&lt;/em&gt;
      &lt;/li&gt;
      &lt;li&gt;A listener for the queue that prints the received message and the
      current contents of the cache&lt;/li&gt;
      &lt;li&gt;An HA daemon named &lt;em&gt;counter&lt;/em&gt; that queues a cached value and
      increments it every 5 seconds&lt;/li&gt;
      &lt;li&gt;An HA scheduled job named &lt;em&gt;ajob&lt;/em&gt; that increments another counter in
      the cache every 20 seconds&lt;/li&gt;
      &lt;li&gt;A web request handler mounted at &lt;strong&gt;/&lt;/strong&gt; that logs its &lt;code&gt;:path-info&lt;/code&gt;
      and returns the current values of the two cached counters&lt;/li&gt;
      &lt;li&gt;Another request handler mounted at &lt;strong&gt;/count&lt;/strong&gt; that increments a
      counter in the user's web session.&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;All the code (~60 lines) is &lt;a href=&quot;https://github.com/immutant/cluster-demo/blob/master/src/immutant/init.clj&quot;&gt;contained in a single file&lt;/a&gt;.&lt;/p&gt;
      
      &lt;h2&gt;Programming is hard, let's build a cluster!&lt;/h2&gt;
      
      &lt;p&gt;Now we're ready to form a cluster by adding a gear to our app:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;rhc scale-cartridge immutant -a demo 2
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;Again, this will take a few minutes, and it may return an error even
      though the operation actually succeeded. You can run the following to
      see the definitive state of your gears:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;rhc show-app --gears
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;This also gives you the SSH URLs for your two gears. Fire up two
      shells and ssh into each of your gears using those SSH URLs. Then
      tail the log on each:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;tail -f immutant/logs/server.log
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;When the dust settles, you'll eventually see the gears discover each
      other, and you should see both gears logging &lt;strong&gt;recv&lt;/strong&gt; messages, one
      getting the even numbers and one getting the odd. This is your
      automatic load-balanced message distribution. &lt;/p&gt;
      
      &lt;p&gt;Note also that the counters cache logged in the &lt;strong&gt;recv&lt;/strong&gt; message is
      correct on both gears, even though it's only being updated by one.
      This is our cache replication at work.&lt;/p&gt;
      
      &lt;h2&gt;Let's break stuff!&lt;/h2&gt;
      
      &lt;p&gt;And see how robust our cluster is.&lt;/p&gt;
      
      &lt;h3&gt;High Availability Daemons and Jobs&lt;/h3&gt;
      
      &lt;p&gt;Of course, the &lt;strong&gt;send&lt;/strong&gt; and &lt;strong&gt;job&lt;/strong&gt; log entries should still only
      appear on our original gear, because those are our HA singletons. If
      that gear crashes, our daemon and job should migrate to the other
      gear. While logged into the gear running your singletons, run this:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;immutant/bin/control stop
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;And watch the other gear's log to verify the daemon and job pick up
      right where they left off, fetching their counters from the replicated
      cache. That gear should be consuming all the queued messages, too. Now
      start the original gear back up:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;immutant/bin/control start
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;Eventually, it'll start receiving half the messages again.&lt;/p&gt;
      
      &lt;h3&gt;Web&lt;/h3&gt;
      
      &lt;p&gt;You may be wondering about those &lt;strong&gt;web&lt;/strong&gt; entries showing up in both
      logs. They are &quot;health check&quot; requests from the &lt;a href=&quot;https://www.openshift.com/blogs/how-haproxy-scales-openshift-apps&quot;&gt;HAProxy&lt;/a&gt; web load
      balancer, automatically installed on your primary gear. You can always
      check the state of your cluster from HAProxy's perspective by visiting
      &lt;a href=&quot;http://demo-%24namespace.rhcloud.com/haproxy-status&quot;&gt;http://demo-$namespace.rhcloud.com/haproxy-status&lt;/a&gt;. If you see that
      page without intending to, it means something about your app is
      broken, so check &lt;code&gt;immutant/logs/server.log&lt;/code&gt; for errors and make sure
      your app responds to a request for the root context, i.e. &quot;/&quot;.&lt;/p&gt;
      
      &lt;p&gt;Let's try some web stuff. Use curl to hit your app while observing the
      logs on both gears:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;curl http://demo-$namespace.rhcloud.com/xxxxxxxxxxxxxxxxxxxx
      curl http://demo-$namespace.rhcloud.com/yyyyyyyyyyyyyyyyyyyy
      curl http://demo-$namespace.rhcloud.com/zzzzzzzzzzzzzzzzzzzz
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;Use an obnoxious path to distinguish your request from the health
      checks. Repeat the command a few times to observe the gears taking
      turns responding to your request. Now try it in a browser, and you'll
      see the same gear handling your request every time you reload. This is
      because HAProxy is setting cookies in the response to enable session
      affinity, which your browser is probably sending back. And &lt;code&gt;curl&lt;/code&gt;
      didn't.&lt;/p&gt;
      
      &lt;p&gt;Speaking of session affinity, let's break that while we're at it, by
      invoking our other web handler, the one that increments a counter in
      the user's web session: &lt;a href=&quot;http://demo-%24namespace.rhcloud.com/count&quot;&gt;http://demo-$namespace.rhcloud.com/count&lt;/a&gt;&lt;/p&gt;
      
      &lt;p&gt;You should see the counter increment each time you reload your
      browser. (You'll need to give &lt;code&gt;curl&lt;/code&gt; a cookie store to see it respond
      with anything other than &quot;1 times&quot;)&lt;/p&gt;
      
      &lt;p&gt;Pay attention to which gear is responding to the &lt;em&gt;/count&lt;/em&gt; request. Now
      stop that gear like you did before. When you reload your browser, you
      should see the other gear return the expected value. This is the
      automatic session replication provided by
      &lt;code&gt;immutant.web.session/servlet-store&lt;/code&gt;.&lt;/p&gt;
      
      &lt;p&gt;Don't forget to restart that gear.&lt;/p&gt;
      
      &lt;h2&gt;The Hat Trick&lt;/h2&gt;
      
      &lt;p&gt;Hey, OpenShift is giving us 3 free gears, we may as well use 'em all,
      right?&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;rhc scale-cartridge immutant -a demo 3
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;When the third one finally comes up, there are a couple of things you
      may notice:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;The health checks will disappear from the primary gear as HAProxy
      takes it out of the rotation when 2 or more other gears are
      available, ostensibly to mitigate the &lt;a href=&quot;http://en.wikipedia.org/wiki/Observer_effect_(information_technology)&quot;&gt;observer effect&lt;/a&gt; of the
      health checks.&lt;/li&gt;
      &lt;li&gt;Each cache key will only show up in the &lt;strong&gt;recv&lt;/strong&gt; log messages on 2
      of the 3 gears. This is because Immutant caches default to
      Infinispan's &lt;code&gt;:distributed&lt;/code&gt; replication mode in a cluster. This
      enables Infinispan clusters to achieve &quot;linear scalability&quot; as
      entries are copied to a fixed number of cluster nodes (default 2)
      regardless of the cluster size. Distribution uses a consistent
      hashing algorithm to determine which nodes will store a given entry.&lt;/li&gt;
      &lt;/ul&gt;&lt;h2&gt;Now what?&lt;/h2&gt;
      
      &lt;p&gt;Well, that was a lot to cover. I doubt many apps will use all these
      features, but I think it's nice to have a free playground on which to
      try them out, even with the resources as constrained as they are on a
      small gear.&lt;/p&gt;
      
      &lt;p&gt;Regardless, I'm pretty happy that Immutant is finally feature-complete
      on OpenShift now. :-)&lt;/p&gt;
      
      &lt;p&gt;Of course, I had a lot of help getting things to this point. Many
      folks on the OpenShift and JBoss teams were generous with their
      expertise, but the &quot;three B's&quot; deserve special mention:
      &lt;a href=&quot;https://twitter.com/bbrowning&quot;&gt;Ben&lt;/a&gt;,
      &lt;a href=&quot;http://belaban.blogspot.com/&quot;&gt;Bela&lt;/a&gt;, and
      &lt;a href=&quot;http://www.billdecoste.net/&quot;&gt;Bill&lt;/a&gt;.&lt;/p&gt;
      
      &lt;p&gt;Thanks!&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>/news/2013/08/09/lein-immutant-1-0-1/</id>
    <title>lein-immutant Plugin 1.0.1 Released</title>
    <updated>2018-01-22T11:53:22-05:00</updated>
    <published>2013-08-09T00:00:00+00:00</published>
    <link href="/news/2013/08/09/lein-immutant-1-0-1/" rel="alternate" type="text/html" />
    <author>
      <name>The Immutant Team</name>
    </author>
    <category term="lein"></category>
    <category term="lein-immutant"></category>
    <category term="installation"></category>
    <summary>
      We just released version 1.0.1 of
      our Leiningen plugin. This is a patch release, with the following
      changes:
      
      
      Archive creation no longer uses lib/ as a staging area for
      dependencies - this prevents stale dependencies from being picked up
      in development after creating an archive.
      Archives are no longer created in the current directory, but under
      project-root/target/ instead. The exact location will depend on
      the profiles that are active. The archive command will output the
      full path to the archive.
      The url used by the install and overlay tasks to download
      Immutant has been changed to use a
      CDN. This should provide
      shorter download times, and allows us to track download counts to
      get...
    </summary>
    <content type="html">
      &lt;p&gt;We just released version &lt;a href=&quot;https://clojars.org/lein-immutant&quot;&gt;1.0.1&lt;/a&gt; of
      our Leiningen plugin. This is a patch release, with the following
      changes:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;Archive creation no longer uses &lt;code&gt;lib/&lt;/code&gt; as a staging area for
      dependencies - this prevents stale dependencies from being picked up
      in development after creating an archive.&lt;/li&gt;
      &lt;li&gt;Archives are no longer created in the current directory, but under
      &lt;code&gt;project-root/target/&lt;/code&gt; instead. The exact location will depend on
      the profiles that are active. The archive command will output the
      full path to the archive.&lt;/li&gt;
      &lt;li&gt;The url used by the &lt;code&gt;install&lt;/code&gt; and &lt;code&gt;overlay&lt;/code&gt; tasks to download
      Immutant has been changed to use a
      &lt;a href=&quot;https://aws.amazon.com/cloudfront/&quot;&gt;CDN&lt;/a&gt;. This should provide
      shorter download times, and allows us to track download counts to
      get a feel for usage.&lt;/li&gt;
      &lt;/ul&gt;&lt;h2&gt;Get it&lt;/h2&gt;
      
      &lt;p&gt;If you're already using &lt;code&gt;lein-immutant&lt;/code&gt; you probably already know how
      to do this, but just in case - to install it, add it to the &lt;code&gt;:plugins&lt;/code&gt;
      list in your &lt;code&gt;:user&lt;/code&gt; profile in &lt;code&gt;~/.lein/profiles.clj&lt;/code&gt;:&lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;{:user {:plugins [[lein-immutant &quot;1.0.1&quot;]]}}
      &lt;/code&gt;&lt;/pre&gt;
      
      &lt;h2&gt;Get in touch&lt;/h2&gt;
      
      &lt;p&gt;If you have any questions, issues, or other feedback, you can always
      find us on &lt;a href=&quot;/community/&quot;&gt;#immutant on freenode&lt;/a&gt; or you can file an
      issue on
      &lt;a href=&quot;https://github.com/immutant/lein-immutant/issues&quot;&gt;lein-immutant&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
</feed>
